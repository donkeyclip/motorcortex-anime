/******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdate"];
/******/ 	window["webpackHotUpdate"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		if (null) script.crossOrigin = null;
/******/ 		document.head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentHash = "a7636eeba81bac0693a5";
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParents = [];
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = [];
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e" &&
/******/ 				name !== "t"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		fn.t = function(value, mode) {
/******/ 			if (mode & 1) value = fn(value);
/******/ 			return __webpack_require__.t(value, mode & ~1);
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (dep === undefined) hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (dep === undefined) hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = "main";
/******/ 			// eslint-disable-next-line no-lone-blocks
/******/ 			{
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (!module || module.hot._selfAccepted) continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted &&
/******/ 				// removed self-accepted modules should not be required
/******/ 				appliedUpdate[moduleId] !== warnUnexpectedRequire
/******/ 			) {
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire("./index.js")(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/Player.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/Player.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar MC = __webpack_require__(/*! @kissmybutton/motorcortex */ \"../node_modules/@kissmybutton/motorcortex/dist/motorcortex.umd.js\");\n\nvar timeCapsule = new MC.TimeCapsule();\n\nvar _require = __webpack_require__(/*! ./helpers */ \"../node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    elid = _require.elid,\n    eltag = _require.eltag,\n    elcreate = _require.elcreate;\n\nvar svg = __webpack_require__(/*! ./html/svg */ \"../node_modules/@kissmybutton/motorcortex-player/dist/html/svg.js\");\n\nvar config = __webpack_require__(/*! ./config */ \"../node_modules/@kissmybutton/motorcortex-player/dist/config.js\");\n\nvar confStyle = __webpack_require__(/*! ./html/style */ \"../node_modules/@kissmybutton/motorcortex-player/dist/html/style.js\");\n\nvar confThemes = __webpack_require__(/*! ./html/themes */ \"../node_modules/@kissmybutton/motorcortex-player/dist/html/themes.js\");\n\nvar setElements = __webpack_require__(/*! ./html/setElements */ \"../node_modules/@kissmybutton/motorcortex-player/dist/html/setElements.js\");\n\nvar volumeListener = __webpack_require__(/*! ./listeners/volume */ \"../node_modules/@kissmybutton/motorcortex-player/dist/listeners/volume.js\");\n\nvar loopBarStartListener = __webpack_require__(/*! ./listeners/loopBarStart */ \"../node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBarStart.js\");\n\nvar loopBarEndListener = __webpack_require__(/*! ./listeners/loopBarEnd */ \"../node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBarEnd.js\");\n\nvar loopStartEndListener = __webpack_require__(/*! ./listeners/loopStartEnd */ \"../node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopStartEnd.js\");\n\nvar progressBarListener = __webpack_require__(/*! ./listeners/progressBar */ \"../node_modules/@kissmybutton/motorcortex-player/dist/listeners/progressBar.js\");\n\nvar statusBtnListener = __webpack_require__(/*! ./listeners/statusBtn */ \"../node_modules/@kissmybutton/motorcortex-player/dist/listeners/statusBtn.js\");\n\nvar settingsListener = __webpack_require__(/*! ./listeners/settings */ \"../node_modules/@kissmybutton/motorcortex-player/dist/listeners/settings.js\");\n\nvar speedListener = __webpack_require__(/*! ./listeners/speed */ \"../node_modules/@kissmybutton/motorcortex-player/dist/listeners/speed.js\");\n\nvar loopBtnListener = __webpack_require__(/*! ./listeners/loopBtn */ \"../node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBtn.js\");\n\nvar controlsListener = __webpack_require__(/*! ./listeners/controls */ \"../node_modules/@kissmybutton/motorcortex-player/dist/listeners/controls.js\");\n\nvar fullscreenListener = __webpack_require__(/*! ./listeners/fullscreen */ \"../node_modules/@kissmybutton/motorcortex-player/dist/listeners/fullscreen.js\");\n\nvar donkeyclipListener = __webpack_require__(/*! ./listeners/donkeyclip */ \"../node_modules/@kissmybutton/motorcortex-player/dist/listeners/donkeyclip.js\");\n\nvar previewListener = __webpack_require__(/*! ./listeners/preview */ \"../node_modules/@kissmybutton/motorcortex-player/dist/listeners/preview.js\");\n\nvar bodyListener = __webpack_require__(/*! ./listeners/body */ \"../node_modules/@kissmybutton/motorcortex-player/dist/listeners/body.js\");\n/**\n * @classdesc\n * Timer's purpose is to provide an interface through which any TimedIncident\n * (such as a Scene or a Clip) can both privide info regarding their timing\n * state but also provide an interface for interacting/altering the timing of it\n */\n\n\nvar Player =\n/*#__PURE__*/\nfunction () {\n  function Player(options) {\n    var _this = this;\n\n    _classCallCheck(this, Player);\n\n    // set defaults\n    options.id = options.id || Date.now();\n    options.preview = options.preview || false;\n    options.showVolume = options.showVolume || false;\n    options.showIndicator = options.showIndicator || false;\n    options.theme = options.theme || \"transparent on-top\";\n    options.host = options.host || options.clip.props.host;\n    options.buttons = options.buttons || {};\n    options.timeFormat = options.timeFormat || \"ss\";\n\n    if (options.pointerEvents === undefined || options.pointerEvents === null) {\n      options.pointerEvents = true;\n    } else {\n      options.pointerEvents = Boolean(options.pointerEvents);\n    }\n\n    options.onMillisecondChange = options.onMillisecondChange || null;\n    options.speedValues = options.speedValues || [-4, -2, -1, -0.5, 0, 0.5, 1, 2, 4]; // remove strings\n\n    for (var i in options.speedValues) {\n      if (!isFinite(options.speedValues[i])) {\n        options.speedValues.splice(i, 1);\n      }\n    }\n\n    options.speedValues.sort(function (a, b) {\n      return a - b;\n    });\n    this.className = config.name;\n    config.playerName = options.id;\n    this.options = options;\n    this.id = this.options.id;\n    this.name = config.name;\n    this.previewClip = null;\n    this.clip = options.clip; // host to apply the timer\n\n    this.clipClass = options.clipClass;\n    this.state = this.clip.runTimeInfo.state;\n    this.listeners = {};\n    this.previewScale = 0.25;\n    this.settings = {\n      volume: 1,\n      journey: null,\n      previousVolume: 1,\n      volumeMute: false,\n      needsUpdate: true,\n      resizeLoop: false,\n      loopJourney: false,\n      previewJourney: null,\n      loopActivated: false,\n      requestingLoop: false,\n      playAfterResize: false,\n      loopStartMillisecond: 0,\n      loopLastPositionXPxls: 0,\n      loopLastPositionXPercentage: 0,\n      loopEndMillisecond: this.clip.duration\n    };\n    this.functions = {\n      millisecondChange: this.millisecondChange,\n      createJourney: this.createJourney\n    }; // create the timer controls main div\n\n    setElements(this);\n    this.setTheme();\n    this.setSpeed();\n    this.subscribeToTimer();\n    this.subscribeToDurationChange();\n    this.addEventListeners();\n\n    if (this.options.preview) {\n      this.createPreviewDisplay();\n    }\n\n    window.addEventListener(\"resize\", function () {\n      if (_this.options.preview) {\n        _this.setPreviewDimentions();\n      }\n    });\n  }\n\n  _createClass(Player, [{\n    key: \"createJourney\",\n    value: function createJourney(clip, millisecond) {\n      var _this2 = this;\n\n      var clipCommands = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      setTimeout(function () {\n        var def = null;\n        var _clipCommands$before = clipCommands.before,\n            before = _clipCommands$before === void 0 ? def : _clipCommands$before,\n            _clipCommands$after = clipCommands.after,\n            after = _clipCommands$after === void 0 ? def : _clipCommands$after;\n        before ? clip[before]() : null;\n        _this2.settings.journey = timeCapsule.startJourney(clip);\n\n        _this2.settings.journey.station(millisecond);\n\n        _this2.settings.journey.destination();\n\n        after ? clip[after]() : null;\n      }, 0);\n    }\n  }, {\n    key: \"millisecondChange\",\n    value: function millisecondChange(millisecond, state, roundTo, makeJouney) {\n      var executeOnMillisecondChange = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n      if (this.state !== state) {\n        this.state = state;\n        this.eventBroadcast(\"state-change\", state);\n      }\n\n      if (!this.settings.needsUpdate) {\n        this.clip.pause();\n        return 1;\n      }\n\n      var clip = this.clip;\n      var _this$settings = this.settings,\n          loopActivated = _this$settings.loopActivated,\n          loopEndMillisecond = _this$settings.loopEndMillisecond,\n          loopStartMillisecond = _this$settings.loopStartMillisecond;\n      var duration = this.clip.duration;\n      var _this$elements = this.elements,\n          totalBar = _this$elements.totalBar,\n          loopBar = _this$elements.loopBar;\n      var loopBarWidth = loopBar.offsetWidth;\n      var loopBarLeft = loopBar.offsetLeft / totalBar.offsetWidth;\n      var localMillisecond = millisecond - duration * loopBarLeft;\n      var localDuration = duration / totalBar.offsetWidth * loopBarWidth;\n\n      if (millisecond >= loopEndMillisecond && loopActivated && this.clip.speed >= 0) {\n        this.createJourney(clip, loopStartMillisecond + 1, {\n          after: this.settings.playAfterResize || this.clip.runTimeInfo.state == \"playing\" ? \"play\" : null\n        });\n        return 1;\n      } else if (millisecond >= loopEndMillisecond && loopActivated && this.clip.speed < 0) {\n        this.createJourney(clip, loopEndMillisecond - 1, {\n          after: this.settings.playAfterResize || this.clip.runTimeInfo.state == \"playing\" ? \"play\" : null\n        });\n        return 1;\n      } else if (millisecond <= loopStartMillisecond && loopActivated && this.clip.speed >= 0) {\n        this.createJourney(clip, loopStartMillisecond + 1, {\n          after: this.settings.playAfterResize || this.clip.runTimeInfo.state == \"playing\" ? \"play\" : null\n        });\n        return 1;\n      } else if (millisecond <= loopStartMillisecond && loopActivated && this.clip.speed < 0) {\n        this.createJourney(clip, loopEndMillisecond - 1, {\n          after: this.settings.playAfterResize || this.clip.runTimeInfo.state == \"playing\" ? \"play\" : null\n        });\n        return 1;\n      }\n\n      if (makeJouney) {\n        this.createJourney(clip, millisecond, {\n          after: this.settings.playAfterResize ? \"play\" : null\n        });\n      }\n\n      this.elements.runningBar.style.width = localMillisecond / localDuration * 100 + \"%\";\n      this.elements.currentTime.innerHTML = this.timeFormat(millisecond);\n\n      if (this.options.onMillisecondChange && executeOnMillisecondChange) {\n        this.options.onMillisecondChange(millisecond);\n      }\n    }\n  }, {\n    key: \"eventBroadcast\",\n    value: function eventBroadcast(eventName, state) {\n      if (eventName === \"state-change\") {\n        if (state === \"paused\" || state === \"idle\" || state === \"transitional\" || state === \"armed\" || state === \"blocked\") {\n          this.elements.statusButton.innerHTML = svg.playSVG;\n          this.elements.statusButton.appendChild(this.elements.indicator);\n          this.elements.indicator.innerHTML = \"\".concat(state.charAt(0).toUpperCase() + state.slice(1));\n\n          if (state === \"blocked\") {\n            this.elements.pointerEventPanel.innerHTML = \"\\n            <div style=\\\"width:100%;height:100%;background:rgba(0,0,0,0.5);display:flex;justify-content:center;align-items:center;\\\">\".concat(svg.loadingSVG, \"</div>\");\n          }\n        } else {\n          this.elements.statusButton.innerHTML = svg.pauseSVG;\n          this.elements.statusButton.appendChild(this.elements.indicator);\n          this.elements.indicator.innerHTML = \"Playing\";\n          this.elements.pointerEventPanel.innerHTML = \"\";\n\n          if (state === \"playing\" && this.clip.runTimeInfo.currentMillisecond === this.clip.duration && this.clip.speed >= 0) {\n            this.createJourney(this.clip, 1, {\n              after: \"play\"\n            });\n          } else if (state === \"playing\" && this.clip.runTimeInfo.currentMillisecond === 0 && this.clip.speed < 0) {\n            this.createJourney(this.clip, this.clip.duration - 1, {\n              after: \"play\"\n            });\n          } else if (state === \"playing\" && this.clip.runTimeInfo.currentMillisecond === this.clip.duration && this.clip.speed < 0) {\n            this.createJourney(this.clip, this.clip.duration - 1, {\n              after: \"play\"\n            });\n          }\n        }\n      } else if (eventName === \"duration-change\") {\n        this.elements.totalTime.innerHTML = this.timeFormat(this.clip.duration);\n        this.settings.loopEndMillisecond = this.clip.duration;\n        this.elements.pointerEventPanel.innerHTML = \"\";\n        this.millisecondChange(this.clip.runTimeInfo.currentMillisecond);\n      }\n    }\n  }, {\n    key: \"subscribeToDurationChange\",\n    value: function subscribeToDurationChange() {\n      this.clip.subscribeToDurationChange(this.subscribeToDurationChangeCallback.bind(this));\n    }\n  }, {\n    key: \"subscribeToDurationChangeCallback\",\n    value: function subscribeToDurationChangeCallback()\n    /*newDuration*/\n    {\n      this.eventBroadcast(\"duration-change\");\n    }\n  }, {\n    key: \"subscribeToTimer\",\n    value: function subscribeToTimer() {\n      this.clip.subscribe(this.id, this.millisecondChange.bind(this));\n    }\n  }, {\n    key: \"handleDragStart\",\n    value: function handleDragStart() {\n      this.settings.needsUpdate = true;\n      this.settings.journey = timeCapsule.startJourney(this.clip);\n    }\n  }, {\n    key: \"timeFormat\",\n    value: function timeFormat(ms) {\n      if (this.options.timeFormat === \"ss\") {\n        var hours = ms / 1000 / 60 / 60;\n        var minutes = hours % 1 * 60;\n        var seconds = minutes % 1 * 60;\n        var h = (\"0\" + parseInt(hours)).slice(-2);\n        var m = (\"0\" + parseInt(minutes)).slice(-2);\n        var s = (\"0\" + parseInt(seconds)).slice(-2);\n        return \"\".concat(h === \"00\" ? \"\" : h + \":\").concat(m, \":\").concat(s);\n      } else {\n        return ms;\n      }\n    }\n  }, {\n    key: \"handleDrag\",\n    value: function handleDrag(loopBarPositionX) {\n      var executeOnMillisecondChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!isFinite(loopBarPositionX)) {\n        loopBarPositionX = 0;\n      }\n\n      var duration = this.clip.duration;\n      var journey = this.settings.journey;\n      var _this$elements2 = this.elements,\n          loopBar = _this$elements2.loopBar,\n          totalBar = _this$elements2.totalBar,\n          runningBar = _this$elements2.runningBar,\n          currentTime = _this$elements2.currentTime;\n      var totalBarPositionX = loopBarPositionX + loopBar.offsetLeft;\n      var millisecond = Math.round(duration * totalBarPositionX / totalBar.offsetWidth);\n      currentTime.innerHTML = this.timeFormat(millisecond);\n      runningBar.style.width = loopBarPositionX / loopBar.offsetWidth * 100 + \"%\";\n      journey.station(millisecond);\n\n      if (this.options.onMillisecondChange && executeOnMillisecondChange) {\n        this.options.onMillisecondChange(millisecond);\n      }\n    }\n  }, {\n    key: \"handleDragEnd\",\n    value: function handleDragEnd() {\n      this.settings.journey.destination();\n    }\n  }, {\n    key: \"createProgressDrag\",\n    value: function createProgressDrag(loopBarPositionX) {\n      this.handleDragStart();\n      this.handleDrag(loopBarPositionX);\n      this.handleDragEnd();\n    }\n  }, {\n    key: \"addEventListeners\",\n    value: function addEventListeners() {\n      loopBarEndListener(this);\n      progressBarListener(this);\n      loopBarStartListener(this);\n      loopStartEndListener(this);\n      volumeListener(this);\n      statusBtnListener(this);\n      settingsListener(this);\n      speedListener(this);\n      loopBtnListener(this);\n      controlsListener(this);\n      fullscreenListener(this);\n      donkeyclipListener(this);\n      previewListener(this);\n      bodyListener(this);\n    }\n  }, {\n    key: \"launchIntoFullscreen\",\n    value: function launchIntoFullscreen(element) {\n      if (this.options.preview) {\n        this.setPreviewDimentions();\n      }\n\n      this.elements.mcPlayer.classList.toggle(\"full-screen\");\n\n      if (element.requestFullscreen) {\n        element.requestFullscreen();\n      } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n      } else if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen();\n      } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n      }\n    }\n  }, {\n    key: \"exitFullscreen\",\n    value: function exitFullscreen() {\n      if (this.options.preview) {\n        this.setPreviewDimentions();\n      }\n\n      this.elements.mcPlayer.classList.toggle(\"full-screen\");\n\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n      } else if (document.webkitExitFullscreen) {\n        document.webkitExitFullscreen();\n      }\n    }\n  }, {\n    key: \"setTheme\",\n    value: function setTheme() {\n      // replace multiple spaces with one space\n      this.options.theme.replace(/\\s\\s+/g, \" \");\n      this.options.theme.trim();\n\n      if (!this.options.theme.includes(\"on-top\") && !this.options.theme.includes(\"position-default\")) {\n        this.options.theme += \" position-default\";\n      }\n\n      var theme = {};\n\n      for (var i in this.options.theme.split(\" \")) {\n        var confTheme = confThemes(this.options.theme.split(\" \")[i], this.name);\n\n        for (var q in confTheme || {}) {\n          theme[q] = confTheme[q];\n        }\n      }\n\n      var css = confStyle(theme, this.name, this.options);\n      var style = elcreate(\"style\");\n      style.styleSheet ? style.styleSheet.cssText = css : style.appendChild(document.createTextNode(css)); // append player style to document\n\n      eltag(\"head\")[0].appendChild(style);\n    }\n  }, {\n    key: \"setSpeed\",\n    value: function setSpeed() {\n      var _this3 = this;\n\n      var currentSpeed;\n      this.clip.speed == 1 ? currentSpeed = \"Normal\" : currentSpeed = this.clip.speed;\n      this.elements.speedCurrent.innerHTML = currentSpeed;\n\n      var targetZone = function () {\n        for (var i = 0; i < _this3.options.speedValues.length - 1; i++) {\n          if (_this3.options.speedValues[i] <= _this3.clip.speed && _this3.options.speedValues[i + 1] > _this3.clip.speed) {\n            return i + Math.abs((_this3.clip.speed - _this3.options.speedValues[i]) / (_this3.options.speedValues[i] - _this3.options.speedValues[i + 1]));\n          }\n        }\n      }();\n\n      var step = 1 / (this.options.speedValues.length - 1);\n      var positionY = (targetZone * step - 1) * -1 * (this.options.speedValues.length - 1) * 16;\n      elid(\"\".concat(this.name, \"-speed-cursor\")).style.top = positionY + \"px\";\n    }\n  }, {\n    key: \"calculateSpeed\",\n    value: function calculateSpeed(step, arrayOfValues, currentPercentage) {\n      var botLimitIndex = Math.floor(currentPercentage / step);\n\n      if (botLimitIndex === arrayOfValues.length - 1) {\n        return arrayOfValues[botLimitIndex].toFixed(1);\n      }\n\n      var limitZonePercentage = currentPercentage / step % 1;\n      var limitZoneLength = Math.abs(arrayOfValues[botLimitIndex] - arrayOfValues[botLimitIndex + 1]);\n      var realZoneSpeed = limitZonePercentage * limitZoneLength;\n      var realSpeed = (realZoneSpeed + arrayOfValues[botLimitIndex]).toFixed(1);\n\n      if (realSpeed == 0) {\n        return \"0.0\";\n      }\n\n      return realSpeed;\n    }\n  }, {\n    key: \"createPreviewDisplay\",\n    value: function createPreviewDisplay() {\n      this.previewClip = this.clip.paste(elid(\"\".concat(this.name, \"-hover-display\")));\n      var previewClip = elid(\"\".concat(this.name, \"-hover-display\"));\n      window.previewClip = this.previewClip;\n      previewClip.style.position = \"absolute\";\n      previewClip.style.zIndex = 1;\n      this.setPreviewDimentions();\n    }\n  }, {\n    key: \"setPreviewDimentions\",\n    value: function setPreviewDimentions() {\n      var clip = this.clip.props.host;\n      var previewClip = this.previewClip.ownClip.props.host;\n      var clipWidth = clip.offsetWidth;\n      var clipHeight = clip.offsetHeight;\n      var previewWidth = clipWidth * this.previewScale; // max width is 300\n\n      if (previewWidth > 300) {\n        // previewWidth = parseFloat(\n        //   elid(`${this.name}-hover-display`).style.maxWidth\n        // );\n        previewWidth = 300;\n        this.previewScale = previewWidth / clipWidth;\n      }\n\n      elid(\"\".concat(this.name, \"-hover-display\")).style.width = clipWidth + \"px\";\n      elid(\"\".concat(this.name, \"-hover-display\")).style.height = clipHeight + \"px\";\n      previewClip.style.transform = \"scale(\".concat(this.previewScale, \")\");\n      previewClip.style.transformOrigin = \"center bottom\";\n      previewClip.style.boxSizing = \"border-box\";\n    }\n  }]);\n\n  return Player;\n}();\n\nmodule.exports = Player;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/Player.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/config.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/config.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  // the players start name\n  name: \"mc-player\",\n\n  // set the players total name\n  set playerName(name) {\n    this.name += \"-\" + name;\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvY29uZmlnLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4LXBsYXllci9kaXN0L2NvbmZpZy5qcz8xYWNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gdGhlIHBsYXllcnMgc3RhcnQgbmFtZVxuICBuYW1lOiBcIm1jLXBsYXllclwiLFxuXG4gIC8vIHNldCB0aGUgcGxheWVycyB0b3RhbCBuYW1lXG4gIHNldCBwbGF5ZXJOYW1lKG5hbWUpIHtcbiAgICB0aGlzLm5hbWUgKz0gXCItXCIgKyBuYW1lO1xuICB9XG5cbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/config.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/helpers.js":
/*!************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/helpers.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  el: function el(selector) {\n    return document.querySelectorAll(selector);\n  },\n  elid: function elid(id) {\n    return document.getElementById(id);\n  },\n  eltag: function eltag(tag) {\n    return document.getElementsByTagName(tag);\n  },\n  elcreate: function elcreate(tag) {\n    return document.createElement(tag);\n  },\n  addListener: function addListener() {\n    var _document;\n\n    return (_document = document).addEventListener.apply(_document, arguments);\n  },\n  removeListener: function removeListener() {\n    var _document2;\n\n    return (_document2 = document).removeEventListener.apply(_document2, arguments);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvaGVscGVycy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9oZWxwZXJzLmpzPzVmZmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlbDogZnVuY3Rpb24gZWwoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIH0sXG4gIGVsaWQ6IGZ1bmN0aW9uIGVsaWQoaWQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICB9LFxuICBlbHRhZzogZnVuY3Rpb24gZWx0YWcodGFnKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZyk7XG4gIH0sXG4gIGVsY3JlYXRlOiBmdW5jdGlvbiBlbGNyZWF0ZSh0YWcpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICB9LFxuICBhZGRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkTGlzdGVuZXIoKSB7XG4gICAgdmFyIF9kb2N1bWVudDtcblxuICAgIHJldHVybiAoX2RvY3VtZW50ID0gZG9jdW1lbnQpLmFkZEV2ZW50TGlzdGVuZXIuYXBwbHkoX2RvY3VtZW50LCBhcmd1bWVudHMpO1xuICB9LFxuICByZW1vdmVMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoKSB7XG4gICAgdmFyIF9kb2N1bWVudDI7XG5cbiAgICByZXR1cm4gKF9kb2N1bWVudDIgPSBkb2N1bWVudCkucmVtb3ZlRXZlbnRMaXN0ZW5lci5hcHBseShfZG9jdW1lbnQyLCBhcmd1bWVudHMpO1xuICB9XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/html/playerHTML.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/html/playerHTML.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (config) {\n  return \"\\n  <div\\n    class=\\\"pointer-event-panel\\\"\\n    id=\\\"\".concat(config.name, \"-pointer-event-panel\\\"\\n  ></div>\\n  <div\\n    class=\\\"pointer-event-panel\\\"\\n    id=\\\"\").concat(config.name, \"-listener-helper\\\"\\n  ></div>\\n  <div class=\\\"grad\\\"></div>\\n  <div class=\\\"background\\\"></div>\\n  <div id=\\\"\").concat(config.name, \"-controls\\\">\\n    <div id=\\\"\").concat(config.name, \"-totalbar\\\">\\n      <div id=\\\"\").concat(config.name, \"-hover-display\\\">\\n        <div id=\\\"\").concat(config.name, \"-hover-millisecond\\\"></div>\\n      </div>\\n      <div id=\\\"\").concat(config.name, \"-loopbar\\\">\\n        <div\\n          class=\\\"\").concat(config.name, \"-loop-boundaries\\\"\\n          id=\\\"\").concat(config.name, \"-loopbar-start\\\"\\n        ></div>\\n        <div\\n          class=\\\"\").concat(config.name, \"-loop-boundaries\\\"\\n          id=\\\"\").concat(config.name, \"-loopbar-end\\\"\\n        ></div>\\n        <div id=\\\"\").concat(config.name, \"-helperbar\\\"></div>\\n        <div id=\\\"\").concat(config.name, \"-runningbar\\\">\\n          <div id=\\\"\").concat(config.name, \"-cursor\\\"></div>\\n        </div>\\n      </div>\\n    </div>\\n    <div id=\\\"\").concat(config.name, \"-left-controls\\\">\\n      <div id=\\\"\").concat(config.name, \"-status-btn\\\">\\n        \").concat(config.svg.playSVG, \"\\n        <span id=\\\"\").concat(config.name, \"-indicator\\\"></span>\\n      </div>\\n      <div id=\\\"\").concat(config.name, \"-volume\\\">\\n        <div id=\\\"\").concat(config.name, \"-volume-btn\\\">\\n          \").concat(config.svg.volumeSVG, \"\\n        </div>\\n        <div id=\\\"\").concat(config.name, \"-volumebar-helper\\\"></div>\\n        <div id=\\\"\").concat(config.name, \"-volumebar\\\">\\n            <div id=\\\"\").concat(config.name, \"-volumebar-active\\\">\\n              <div id=\\\"\").concat(config.name, \"-volume-cursor\\\"></div>\\n            </div>\\n        </div>\\n      </div>\\n      <div id=\\\"\").concat(config.name, \"-time-display\\\">\\n        <span id=\\\"\").concat(config.name, \"-time-current\\\"></span>\\n        <span id=\\\"\").concat(config.name, \"-time-separator\\\"></span>\\n        <span id=\\\"\").concat(config.name, \"-time-total\\\"></span>\\n      </div>\\n    </div>\\n    <div id=\\\"\").concat(config.name, \"-right-controls\\\">\\n      <div\\n        id=\\\"\").concat(config.name, \"-loop-btn-container\\\"\\n      >\\n        <div\\n          id=\\\"\").concat(config.name, \"-loop-btn\\\"\\n        >\").concat(config.svg.loopSVG, \"</div>\\n        <div\\n          id=\\\"\").concat(config.name, \"-loop-time\\\"\\n        >\\n          <span\\n            id=\\\"\").concat(config.name, \"-loopbar-start-time\\\"\\n            class=\\\"\").concat(config.name, \"-loopbar-time\\\"\\n          ></span>\\n          <span>:</span>\\n          <span\\n            id=\\\"\").concat(config.name, \"-loopbar-end-time\\\"\\n            class=\\\"\").concat(config.name, \"-loopbar-time\\\"\\n          ></span>\\n        </div>\\n      </div>\\n      <div\\n        id=\\\"\").concat(config.name, \"-settings-btn\\\"\\n      >\").concat(config.svg.settingsSVG, \"</div>\\n      <div\\n        id=\\\"\").concat(config.name, \"-dc-btn\\\"\\n      >\\n        \").concat(config.svg.dcSVG, \"\\n      </div>\\n      \\n      <div\\n        id=\\\"\").concat(config.name, \"-full-screen-btn\\\"\\n      >\").concat(config.svg.fullScreenSVG, \"</div>\\n    </div>\\n    \\n\\n  </div>\\n  <div id=\\\"\").concat(config.name, \"-settings-panel\\\">\\n    <ul id=\\\"\").concat(config.name, \"-main-settings\\\">\\n      <li id=\\\"\").concat(config.name, \"-settings-pointer-events\\\">\\n        <label>Pointer Events</label>\\n        <label class=\\\"switch settings-switch\\\">\\n          <input id=\\\"\").concat(config.name, \"-pointer-events-checkbox\\\" type=\\\"checkbox\\\">\\n          <span class=\\\"slider round\\\"></span>\\n        </label>\\n      </li>\\n      <li id=\\\"\").concat(config.name, \"-settings-preview\\\">\\n        <label>Show Preview</label>\\n        <label class=\\\"switch settings-switch\\\">\\n          <input id=\\\"\").concat(config.name, \"-show-preview-checkbox\\\" type=\\\"checkbox\\\">\\n          <span class=\\\"slider round\\\"></span>\\n        </label>\\n      </li>\\n      <li id=\\\"\").concat(config.name, \"-settings-indicator\\\">\\n        <label>Show Indicator</label>\\n        <label class=\\\"switch settings-switch\\\">\\n          <input id=\\\"\").concat(config.name, \"-show-indicator-checkbox\\\" type=\\\"checkbox\\\">\\n          <span class=\\\"slider round\\\"></span>\\n        </label>\\n      </li>\\n      <li id=\\\"\").concat(config.name, \"-settings-volume\\\">\\n        <label>Show Volume</label>\\n        <label class=\\\"switch settings-switch\\\">\\n          <input id=\\\"\").concat(config.name, \"-show-volume-checkbox\\\" type=\\\"checkbox\\\">\\n          <span class=\\\"slider round\\\"></span>\\n        </label>\\n      </li>\\n      <li id=\\\"\").concat(config.name, \"-settings-speed-show\\\">\\n        <label>Speed</label>\\n        <div class=\\\"\").concat(config.name, \"-speed-btn\\\">\").concat(config.svg.arrowRightSVG, \"</div>\\n        <span id=\\\"\").concat(config.name, \"-speed-current\\\"></span>\\n      </li>\\n    </ul>\\n    <ul id=\\\"\").concat(config.name, \"-speed-settings\\\">\\n      <li id=\\\"\").concat(config.name, \"-settings-speed-hide\\\">\\n        <div class=\\\"\").concat(config.name, \"-speed-btn\\\">\").concat(config.svg.arrowLeftSVG, \"</div>\\n        <label id=\").concat(config.name, \"-speed-runtime>Speed</label>\\n      </li>\\n      <li>\\n        <div id=\\\"\").concat(config.name, \"-speed-value-helperbar\\\"></div>\\n        <div id=\\\"\").concat(config.name, \"-speed-value-bar\\\">\\n          <div\\n            class=\\\"\").concat(config.name, \"-speed-value-step\\\"\\n            id=\\\"\").concat(config.name, \"-speed-cursor\\\"\\n          >\\n            <div></div>\\n          </div>\\n        </div>\\n        <div id=\\\"\").concat(config.name, \"-speed-value\\\">\\n        </div>\\n      </li>\\n    </ul>\\n  </div>\\n\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/html/playerHTML.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/html/setElements.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/html/setElements.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"../node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    elid = _require.elid,\n    elcreate = _require.elcreate;\n\nvar svg = __webpack_require__(/*! ./svg */ \"../node_modules/@kissmybutton/motorcortex-player/dist/html/svg.js\");\n\nvar playerHTML = __webpack_require__(/*! ./playerHTML */ \"../node_modules/@kissmybutton/motorcortex-player/dist/html/playerHTML.js\");\n\nmodule.exports = function (_this) {\n  _this.elements = {};\n  var clipIframe = _this.clip.props.host; // console.log(_this.clip);\n  // set _this.clip position to relative\n\n  clipIframe.style.display = \"flex\";\n  clipIframe.style.justifyContent = \"center\";\n  clipIframe.style.alignItems = \"center\";\n  _this.clip.props.host.style.position = \"relative\";\n  _this.clip.props.host.style.zIndex = \"0\";\n  _this.elements.mcPlayer = elcreate(\"div\");\n  _this.elements.mcPlayer.id = \"\".concat(_this.name);\n  _this.elements.mcPlayer.className = \"\".concat(_this.className);\n  _this.elements.mcPlayer.innerHTML = playerHTML({\n    svg: svg,\n    name: _this.name\n  });\n\n  if (typeof _this.options.host === \"string\") {\n    var nodelist = document.querySelectorAll(_this.options.host);\n\n    for (var i in nodelist) {\n      if (isNaN(i)) {\n        continue;\n      }\n\n      nodelist[i].appendChild(_this.elements.mcPlayer);\n    }\n  } else {\n    _this.options.host.appendChild(_this.elements.mcPlayer);\n  }\n\n  _this.elements.pointerEventPanel = elid(\"\".concat(_this.name, \"-pointer-event-panel\"));\n  _this.elements.listenerHelper = elid(\"\".concat(_this.name, \"-listener-helper\"));\n  _this.elements.loopBar = elid(\"\".concat(_this.name, \"-loopbar\"));\n  _this.elements.totalBar = elid(\"\".concat(_this.name, \"-totalbar\"));\n  _this.elements.indicator = elid(\"\".concat(_this.name, \"-indicator\"));\n  _this.elements.loopButton = elid(\"\".concat(_this.name, \"-loop-btn\"));\n  _this.elements.volumeBar = elid(\"\".concat(_this.name, \"-volumebar\"));\n  _this.elements.totalTime = elid(\"\".concat(_this.name, \"-time-total\"));\n  _this.elements.volumeControl = elid(\"\".concat(_this.name, \"-volume\"));\n  _this.elements.volumeBtn = elid(\"\".concat(_this.name, \"-volume-btn\"));\n  _this.elements.runningBar = elid(\"\".concat(_this.name, \"-runningbar\"));\n  _this.elements.loopBarEnd = elid(\"\".concat(_this.name, \"-loopbar-end\"));\n  _this.elements.statusButton = elid(\"\".concat(_this.name, \"-status-btn\"));\n  _this.elements.speedBar = elid(\"\".concat(_this.name, \"-speed-value-bar\"));\n  _this.elements.currentTime = elid(\"\".concat(_this.name, \"-time-current\"));\n  _this.elements.timeDisplay = elid(\"\".concat(_this.name, \"-time-display\"));\n  _this.elements.speedCurrent = elid(\"\".concat(_this.name, \"-speed-current\"));\n  _this.elements.loopBarStart = elid(\"\".concat(_this.name, \"-loopbar-start\"));\n  _this.elements.volumeCursor = elid(\"\".concat(_this.name, \"-volume-cursor\"));\n  _this.elements.settingsButton = elid(\"\".concat(_this.name, \"-settings-btn\"));\n  _this.elements.donkeyclipButton = elid(\"\".concat(_this.name, \"-dc-btn\"));\n  _this.elements.timeSeparator = elid(\"\".concat(_this.name, \"-time-separator\"));\n  _this.elements.settingsPanel = elid(\"\".concat(_this.name, \"-settings-panel\"));\n  _this.elements.settingsMainPanel = elid(\"\".concat(_this.name, \"-main-settings\"));\n  _this.elements.fullScreenButton = elid(\"\".concat(_this.name, \"-full-screen-btn\"));\n  _this.elements.volumeBarHelper = elid(\"\".concat(_this.name, \"-volumebar-helper\"));\n  _this.elements.volumeBarActive = elid(\"\".concat(_this.name, \"-volumebar-active\"));\n  _this.elements.settingsSpeedPanel = elid(\"\".concat(_this.name, \"-speed-settings\"));\n  _this.elements.settingsShowVolume = elid(\"\".concat(_this.name, \"-settings-volume\"));\n  _this.elements.settingsShowPreview = elid(\"\".concat(_this.name, \"-settings-preview\"));\n  _this.elements.settingsPointerEvents = elid(\"\".concat(_this.name, \"-settings-pointer-events\"));\n  _this.elements.speedBarHelper = elid(\"\".concat(_this.name, \"-speed-value-helperbar\"));\n  _this.elements.settingsShowIndicator = elid(\"\".concat(_this.name, \"-settings-indicator\"));\n  _this.elements.settingsSpeedButtonShow = elid(\"\".concat(_this.name, \"-settings-speed-show\"));\n  _this.elements.settingsSpeedButtonHide = elid(\"\".concat(_this.name, \"-settings-speed-hide\"));\n  _this.elements.volumeBarActive.style.width = _this.settings.volume * 100 + \"%\";\n  _this.elements.currentTime.innerHTML = _this.timeFormat(0);\n  _this.elements.totalTime.innerHTML = _this.timeFormat(_this.clip.duration);\n  _this.elements.timeSeparator.innerHTML = \"/\";\n\n  _this.elements.settingsPanel.classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n\n  if (!_this.options.showIndicator) {\n    _this.elements.indicator.style.visibility = \"hidden\";\n  } else {\n    _this.elements.indicator.style.visibility = \"visible\";\n    _this.elements.statusButton.style.width = \"35px\";\n    _this.elements.statusButton.style.height = \"20px\";\n    _this.elements.statusButton.style.bottom = \"5px\";\n  }\n\n  _this.elements.indicator.innerHTML = _this.clip.runTimeInfo.state;\n  _this.elements.settingsSpeedPanel.style.display = \"none\";\n\n  _this.elements.settingsSpeedPanel.getElementsByTagName(\"li\")[1].classList.add(\"no-hover\");\n\n  _this.elements.loopBarStart.style.left = \"0%\";\n\n  _this.elements.loopBarStart.classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n\n  _this.elements.loopBarEnd.style.left = \"100%\";\n\n  _this.elements.loopBarEnd.classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n\n  _this.elements.loopStartTime = elid(\"\".concat(_this.name, \"-loopbar-start-time\"));\n  _this.elements.loopEndTime = elid(\"\".concat(_this.name, \"-loopbar-end-time\"));\n  _this.elements.editableLoopStartTime = document.createElement(\"input\");\n  _this.elements.editableLoopStartTime.type = \"text\";\n  _this.elements.editableLoopStartTime.size = elid(\"\".concat(_this.name, \"-time-total\")).innerHTML.length + 1;\n  _this.elements.editableLoopStartTime.maxLength = elid(\"\".concat(_this.name, \"-time-total\")).innerHTML.length;\n  _this.elements.editableLoopStartTime.style.height = elid(\"\".concat(_this.name, \"-time-total\")).offsetHeight;\n  _this.elements.editableLoopStartTime.value = elid(\"\".concat(_this.name, \"-loopbar-start-time\")).innerHTML;\n  _this.elements.editableLoopStartTime.style.fontSize = \"8px\";\n  _this.elements.editableLoopEndTime = document.createElement(\"input\");\n  _this.elements.editableLoopEndTime.type = \"text\";\n  _this.elements.editableLoopEndTime.size = elid(\"\".concat(_this.name, \"-time-total\")).innerHTML.length + 1;\n  _this.elements.editableLoopEndTime.maxLength = elid(\"\".concat(_this.name, \"-time-total\")).innerHTML.length;\n  _this.elements.editableLoopEndTime.style.height = elid(\"\".concat(_this.name, \"-time-total\")).offsetHeight;\n  _this.elements.editableLoopEndTime.value = elid(\"\".concat(_this.name, \"-loopbar-start-time\")).innerHTML;\n  _this.elements.editableLoopEndTime.pattern = \"d*\";\n  _this.elements.editableLoopEndTime.style.fontSize = \"8px\";\n  elid(\"\".concat(_this.name, \"-loop-time\")).classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n  elid(\"\".concat(_this.name, \"-hover-display\")).classList.add(\"m-fadeOut\" // `${_this.name}-hide`\n  );\n  elid(\"\".concat(_this.name, \"-show-volume-checkbox\")).checked = _this.options.showVolume;\n  elid(\"\".concat(_this.name, \"-show-indicator-checkbox\")).checked = _this.options.showIndicator;\n  elid(\"\".concat(_this.name, \"-show-preview-checkbox\")).checked = _this.options.preview;\n  elid(\"\".concat(_this.name, \"-pointer-events-checkbox\")).checked = _this.options.pointerEvents;\n\n  if (_this.options.pointerEvents) {\n    _this.elements.mcPlayer.style.pointerEvents = \"none\";\n    _this.elements.pointerEventPanel.style.pointerEvents = \"auto\";\n    elid(\"\".concat(_this.name, \"-controls\")).style.pointerEvents = \"auto\";\n    _this.elements.settingsPanel.style.pointerEvents = \"auto\";\n  } else {\n    _this.elements.mcPlayer.style.pointerEvents = \"none\";\n    _this.elements.pointerEventPanel.style.pointerEvents = \"none\";\n    elid(\"\".concat(_this.name, \"-controls\")).style.pointerEvents = \"auto\";\n    _this.elements.settingsPanel.style.pointerEvents = \"auto\";\n  }\n\n  _this.elements.listenerHelper.style.pointerEvents = \"none\";\n\n  if (!_this.options.showVolume) {\n    _this.elements.timeDisplay.style.left = \"45px\";\n    _this.elements.volumeControl.style.visibility = \"hidden\";\n\n    _this.elements.volumeControl.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n    _this.elements.volumeControl.classList.toggle(\"\".concat(_this.name, \"-volume-width-transition\"));\n  } else {\n    _this.elements.timeDisplay.style.left = \"\";\n    _this.elements.volumeControl.style.visibility = \"visible\";\n  }\n\n  for (var _i in _this.options.speedValues) {\n    var barDiv = elcreate(\"div\");\n    barDiv.className = \"\".concat(_this.name, \"-speed-value-step\");\n    var valueDiv = elcreate(\"div\");\n    valueDiv.className = \"\".concat(_this.name, \"-speed-value\");\n    valueDiv.dataset.speedValue = _this.options.speedValues[_i];\n    valueDiv.innerHTML = _this.options.speedValues[_i];\n    valueDiv.dataset.zone = _i;\n    elid(\"\".concat(_this.name, \"-speed-value\")).prepend(valueDiv);\n\n    _this.elements.speedBar.prepend(barDiv);\n  } // show hide buttons\n\n\n  if (_this.options.buttons.fullScreen === false) {\n    _this.elements.fullScreenButton.remove();\n  }\n\n  if (_this.options.buttons.settings === false) {\n    _this.elements.settingsButton.remove();\n  }\n\n  if (_this.options.buttons.donkeyclip === false) {\n    _this.elements.donkeyclipButton.remove();\n  }\n\n  if (_this.options.buttons.loop === false) {\n    _this.elements.loopButton.remove();\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/html/setElements.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/html/style.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/html/style.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (theme, name, options) {\n  return \"\\n.background {\\n  background-color: black;\\n  width:100%;\\n  height:\".concat(theme[\"background-height\"], \";;\\n  position:absolute;\\n  top:0px;\\n  left:0px;\\n  z-index:-2000;\\n}\\n\\n.full-screen #\").concat(name, \"-controls {\\n  position:fixed;\\n  left:0px;\\n  bottom:0px;\\n}\\n\\n.full-screen #\").concat(name, \"-settings-panel {\\n  position:fixed;\\n  bottom: 45px;\\n}\\n\\n.svg, .svg path {\\n  fill: \").concat(theme[\"svg-color\"], \";\\n}\\n\\n.svg.arrow {\\n  stroke: \").concat(theme[\"svg-color\"], \";\\n}\\n\\n.pointer-event-panel {\\n  height: \").concat(theme[\"pointer-event-panel-height\"], \";\\n  display:flex;\\n  align-items:center;\\n  justify-content:center;\\n}\\n#\").concat(name, \"-pointer-event-panel{\\n  width:100%;\\n  position:absolute;\\n  z-index:100;\\n}\\n#\").concat(name, \"-listener-helper{\\n  width:100%;\\n  height:calc( 100% - 45px );\\n  position:absolute;\\n  z-index:110;\\n}\\n.svg-selected svg{\\n  fill: \").concat(theme[\"svg-selected-color\"], \";\\n  stroke: \").concat(theme[\"svg-selected-color\"], \";\\n}\\n#\").concat(name, \"-hover-display{\\n    border: \").concat(theme[\"preview-border\"], \";\\n    display: flex;\\n    overflow:hidden;\\n    background-color: black;\\n    position: absolute;\\n    bottom: 14px;\\n    left: 0px;\\n    align-items: flex-end;\\n    justify-content: center;\\n}\\n\\n#\").concat(name, \"-hover-millisecond {\\n  background-color: \").concat(theme[\"hms-background-color\"], \";\\n  padding:3px;\\n  height:18px;\\n  margin:0px;\\n  line-height:12px;\\n  font-size:10px;\\n  text-align: center;\\n  min-width:20px;\\n  max-width:100px;\\n  z-index:2;\\n}\\n#\").concat(name, \",\\n#\").concat(name, \" ::before,\\n#\").concat(name, \" :::after,\\n#\").concat(name, \" div,\\n#\").concat(name, \" p,\\n#\").concat(name, \" span,\\n#\").concat(name, \" ul,\\n#\").concat(name, \" li {\\n  font-weight: 400;\\n  line-height: 1.9 !important;\\n  color: \").concat(theme[\"color\"], \";\\n  font-family: \\\"Century Gothic\\\", CenturyGothic, AppleGothic, sans-serif;\\n  box-sizing:border-box;\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n}\\n#\").concat(name, \" {\\n  line-height: 1.9;\\n  font-size: 12px;\\n  overflow:hidden;\\n  height: calc(100% + \").concat(theme[\"controls-position\"], \");\\n  width:100%;\\n  position: absolute;\\n  top: 0px;\\n  left: 0px;\\n  color: \").concat(theme[\"color\"], \";  \\n}\\n\\n#\").concat(name, \"-settings-speed-hide {\\n  text-align:right;\\n}\\n\\n.grad {\\n  background-image: linear-gradient(\\n    rgba(100,100,100,00.01),\\n    rgba(100,100,100,00.02),\\n    rgba(100,100,100,00.03),\\n    rgba(100,100,100,0.04),\\n    rgba(100,100,100,0.05),\\n    rgba(0,0,0,0.06),\\n    rgba(0,0,0,0.07),\\n    rgba(0,0,0,0.08),\\n    rgba(0,0,0,0.09),\\n    rgba(0,0,0,0.1),\\n    rgba(0,0,0,0.2),\\n    rgba(0,0,0,0.3),\\n    rgba(0,0,0,0.4),\\n    rgba(0,0,0,0.4),\\n    rgba(0,0,0,0.5),\\n    rgba(0,0,0,0.6),\\n    rgba(0,0,0,0.7),\\n    rgba(0,0,0,0.8),\\n    rgba(0,0,0,0.9),\\n    rgba(0,0,0,1)\\n  );\\n  position:absolute;\\n  width:100%;\\n  height:\").concat(theme[\"grad-height\"], \";\\n  left:0px;\\n  bottom:0px;\\n  z-index:100;\\n}\\n\\n#\").concat(name, \"-controls {\\n  touch-action: none;\\n  background-color: \").concat(theme[\"background-color\"], \";\\n  border: \").concat(theme[\"controls-border\"], \";\\n  position: absolute;\\n  bottom: \").concat(theme[\"controls-bottom\"], \";\\n  left: 0px;\\n  width: 100%;\\n  z-index:100;\\n  height: 44px;\\n  border-radius: 6px;\\n  display:flex;\\n  align-items:center;\\n}\\n\\n#\").concat(name, \"-totalbar {\\n  width: calc(100% - 20px);\\n  height: 5px;\\n  margin: 0px 10px 0px 10px;\\n  background-color: \").concat(theme[\"totalbar-color\"], \";\\n  position: absolute;\\n  top: 0px;\\n  left: 0px;\\n}\\n\\n#\").concat(name, \"-loopbar {\\n  position: absolute;\\n  height: 100%;\\n  width: 100%;\\n  top: 0px;\\n  left: 0px;\\n  background-color: \").concat(theme[\"loopbar-color\"], \";\\n}\\n\\n.\").concat(name, \"-loop-boundaries::before {\\n  \").concat(theme[\"loopbar-boundaries-style::before\"], \"\\n\\n}\\n.\").concat(name, \"-loop-boundaries {\\n  transform:translate(-50%,-37%);\\n  position:absolute;\\n  width:18px;\\n  background-color:\").concat(theme[\"loopbar-boundaries-color\"], \";\\n  height:18px;\\n  border-radius:10px;\\n  z-index:40;\\n  \").concat(theme[\"loopbar-boundaries-style\"], \"\\n}\\n\\n.\").concat(name, \"-loop-boundaries::after {\\n  \").concat(theme[\"loopbar-boundaries-style::after\"], \"\\n\\n}\\n\\n#\").concat(name, \"-helperbar {\\n  position: absolute;\\n  height: 20px;\\n  top: -10px;\\n  left: 0px;\\n  right: 0px;\\n  z-index:2;\\n}\\n\\n#\").concat(name, \"-runningbar {\\n  position: relative;\\n  width: 0px;\\n  max-width:100%;\\n  height: 100%;\\n  background-color: \").concat(theme[\"runningbar-color\"], \";\\n}\\n\\n#\").concat(name, \"-cursor {\\n  transform:translate(50%,-36%);\\n  right: 0px;\\n  top: 0px;\\n  width: 0px;\\n  height: 0px;\\n  position: absolute;\\n  background-color: \").concat(theme[\"cursor-color\"], \";\\n  border-radius: 10px;\\n  z-index: 5;\\n}\\n\\n#\").concat(name, \"-left-controls,#\").concat(name, \"-right-controls {\\n    display: flex;\\n    align-items:center;\\n    height: 100%;\\n    padding: 5px 5px 0px;\\n}\\n#\").concat(name, \"-right-controls {\\n  position:absolute;\\n  right:0px;\\n}\\n\\n\\n#\").concat(name, \"-left-controls > div,#\").concat(name, \"-right-controls > div {\\n    display: inline-flex;\\n    align-items:center;\\n   margin:0 10px 0 10px;\\n}\\n\\n\\n\\n/*#\").concat(name, \"-time-display {\\n  display: table;\\n  text-align: center;\\n  width: auto;\\n  height: 34px;\\n  position: absolute;\\n  left: 90px;\\n  -webkit-transition: left 0.1s ease;\\n  -moz-transition: left 0.1s ease;\\n  transition: left 0.1s ease;\\n}\\n*/\\n#\").concat(name, \"-time-display span {\\n  display: table-cell;\\n  vertical-align: middle;\\n}\\n\\n#\").concat(name, \"-status-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n}\\n#\").concat(name, \"-status-btn svg{\\n  width:20px;\\n  height:18px;\\n}\\n#\").concat(name, \"-volume {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  position: relative;\\n}\\n#\").concat(name, \"-volume-btn {\\n  width: 20px;\\n  height: 15px;\\n}\\n\\n#\").concat(name, \"-volumebar {\\n  width: 0px;\\n  height: 3px;\\n  background-color: \").concat(theme[\"loopbar-color\"], \";\\n  -webkit-transition: left 0.1s ease;\\n  -moz-transition: left 0.1s ease;\\n  transition: left 0.1s ease;\\n  position:relative;\\n  left:5px;\\n}\\n\\n#\").concat(name, \"-volumebar-helper {\\n  position: absolute;\\n    width: 0px;\\n    height: 15px;\\n    bottom: 0px;\\n    z-index: 10;\\n    left: 25px;\\n}\\n\\n#\").concat(name, \"-volumebar-active {\\n  position: relative;\\n  width: 0%;\\n  height: 100%;\\n  background-color: \").concat(theme[\"color\"], \";\\n  position:relative;\\n  bottom:0px;\\n}\\n\\n#\").concat(name, \"-volume-cursor {\\n  transform:translate(50%,-36%);\\n  right: 0px;\\n  top: 0px;\\n  width: 0px;\\n  height: 0px;\\n  position: absolute;\\n  background-color: \").concat(theme[\"color\"], \";\\n  border-radius: 10px;\\n  z-index: 5;\\n}\\n\\n.\").concat(name, \"-loopbar-time {\\n  width:auto;\\n  height:12px;\\n  background-color:\").concat(theme[\"background-color\"], \";\\n  line-height:10px;\\n  font-size:10px;\\n}\\n\\n#\").concat(name, \"-loop-time {\\n  margin: 7px;\\n}\\n\\n#\").concat(name, \"-dc-btn {\\n    background-repeat: no-repeat;\\n    background-size: 100% 100%;\\n    width: 20px;\\n    height: 15px;\\n    margin: 7px 10px 5px 0px;\\n    transform: scale(1.5,1.5);\\n}\\n\\n#\").concat(name, \"-loop-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  display:flex;\\n  align-items:center;\\n}\\n\\n\\n#\").concat(name, \"-settings-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n}\\n\\n#\").concat(name, \"-full-screen-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n}\\n\\n.\").concat(name, \"-speed-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  height: 14px;\\n}\\n\\n#\").concat(name, \"-settings-panel {\\n  touch-action: none;\\n  box-sizing: border-box;\\n  position: absolute;\\n  z-index:101;\\n  background-color: \").concat(theme[\"settings-background-color\"], \";\\n  bottom: \").concat(theme[\"settings-panel-bottom\"], \";\\n  border: \").concat(theme[\"border\"], \";\\n  right: 8px;\\n  width: 167px;\\n  padding: 5px;\\n  margin: 0px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n.\").concat(name, \"-hide {\\n  display:none !important;\\n}\\n\\n#\").concat(name, \"-speed-value-bar {\\n  position: relative;\\n  width: 5px;\\n  background-color: \").concat(theme[\"speedbar-color\"], \";\\n  display: inline-block;\\n  box-sizing: border-box;\\n  height: \").concat(options.speedValues.length * 16, \"px;\\n  float: left;\\n  margin-right:15px;\\n}\\n\\n#\").concat(name, \"-speed-value-helperbar {\\n  position: absolute;\\n  width: 25px;\\n  height: \").concat(options.speedValues.length * 16, \"px;\\n  float: left;\\n  left: 18px;\\n  z-index:10;\\n}\\n\\n\\n#\").concat(name, \"-speed-value-bar:hover,\\n#\").concat(name, \"-speed-value-helperbar {\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-volumebar:hover,\\n#\").concat(name, \"-volumebar-helper:hover,\\n#\").concat(name, \"-volume-btn:hover,\\n#\").concat(name, \"-volumebar:active,\\n#\").concat(name, \"-volumebar-helper:active,\\n#\").concat(name, \"-volume-btn:active {\\n  cursor:pointer;\\n}\\n\\n#\").concat(name, \"-speed-cursor {\\n  position: absolute;\\n  background-color: \").concat(theme[\"speedbar-cursor-color\"], \";\\n  top: 0px;\\n  left: 0px;\\n}\\n\\n#\").concat(name, \"-speed-cursor div {\\n  position: absolute;\\n  background-color: \").concat(theme[\"speedbar-cursor-color\"], \";\\n  left: -2.5px;\\n  top: -4px;\\n  width: 10px;\\n  height: 10px;\\n  border-radius: 5px;\\n}\\n\\n#\").concat(name, \"-time-separator{\\n  margin:0 3px;\\n}\\n#\").concat(name, \"-speed-cursor:hover {\\n  cursor: pointer;\\n}\\n\\n.\").concat(name, \"-speed-value-step {\\n  width: 16px;\\n  background-color: \").concat(theme[\"speedbar-color\"], \";\\n  display: inline-block;\\n  box-sizing: border-box;\\n  height: 2px;\\n  margin-top: 7px;\\n  margin-bottom: 7px;\\n  float: left;\\n}\\n\\n#\").concat(name, \"-speed-value {\\n  display: inline-block;\\n  box-sizing: border-box;\\n  height: \").concat(options.speedValues.length * 16, \"px;\\n  text-align: left;\\n}\\n\\n.\").concat(name, \"-speed-value {\\n  box-sizing: border-box;\\n  height: 16px;\\n  font-size: 12px;\\n}\\n\\n#\").concat(name, \"-indicator {\\n  font-size: 8px !important;\\n  position: absolute;\\n  bottom: -3px;\\n  color: \").concat(theme[\"color\"], \";\\n}\\n\\n/*#\").concat(name, \"-speed-settings {\\n  height: \").concat(options.speedValues.length * 16 + 32 + 10 - 2, \"px;\\n}*/\\n\\n#\").concat(name, \"-speed-settings li.no-hover { \\n  height: \").concat(options.speedValues.length * 16 + 10 - 2, \"px !important; \\n}\\n#\").concat(name, \"-settings-panel.\").concat(name, \"-settings-speed-panel {\\n  overflow: hidden;\\n  width: 92px;\\n  position:absolute;\\n  z-index:120;\\n  /*height: \").concat(options.speedValues.length * 16 + 32 + 20, \"px;*/\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-settings-panel.\").concat(name, \"-settings-speed-panel .\").concat(name, \"-speed-btn {\\n  float: left;\\n}\\n\\n.\").concat(name, \"-settings-speed-panel ul:first-child {\\n  text-align: right;\\n}\\n\\n#\").concat(name, \"-speed-current {\\n  float: right;\\n  padding-right: 10px\\n}\\n\\n#\").concat(name, \"-settings-panel .\").concat(name, \"-speed-btn {\\n  float: right;\\n}\\n\\n#\").concat(name, \"-settings-panel ul {\\n  width: 100%;\\n  margin: 0px;\\n  padding: 0px;\\n  overflow: hidden;\\n}\\n\\n#\").concat(name, \"-settings-panel.\").concat(name, \"-settings-speed-panel ul li {\\n  min-width: 70px;\\n  display: flex;\\n  height: 32px;\\n  align-items: center;\\n  justify-content:center;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li.no-hover:hover {\\n  background-color: transparent;\\n  cursor: default;\\n}\\n\\ndiv.\").concat(name, \"-speed-value:hover {\\n  background-color: \").concat(theme[\"hover-color\"], \";\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li {\\n  /*position: relative;\\n  width: 100%;\\n  min-width: 154px;*/\\n  list-style-type: none;\\n  margin: 0px;\\n  padding: 5px;\\n  display: flex;\\n  height:32px;\\n  align-items:center;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li label {\\n  margin: 0px;\\n}\\n\\n.switch {\\n  position: relative;\\n  display: inline-block;\\n  width: 32px;\\n  height: 18px;\\n}\\n\\n.switch input {\\n  display: none;\\n}\\n\\n.settings-switch {\\n  position: absolute;\\n  right: 24px;\\n}\\n\\n.settings-switch::after {\\n  clear: both;\\n}\\n\\n.slider {\\n  position: absolute;\\n  cursor: pointer;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  background-color: \").concat(theme[\"slider-off-color\"], \";\\n  -webkit-transition: .4s;\\n  transition: .4s;\\n}\\n\\n.slider:before {\\n  position: absolute;\\n  content: \\\"\\\";\\n  height: 16px;\\n  width: 16px;\\n  left: 1px;\\n  bottom: 1px;\\n  background-color: white;\\n  -webkit-transition: .4s;\\n  transition: .4s;\\n}\\n\\ninput:checked+.slider {\\n  background-color: \").concat(theme[\"slider-on-color\"], \";\\n}\\n\\ninput:focus+.slider {\\n  box-shadow: 0 0 1px \").concat(theme[\"slider-on-color\"], \";\\n}\\n\\ninput:checked+.slider:before {\\n  -webkit-transform: translateX(16px);\\n  -ms-transform: translateX(16px);\\n  transform: translateX(16px);\\n}\\n\\n\\n/* Rounded sliders */\\n\\n.slider.round {\\n  border-radius: 34px;\\n}\\n\\n.slider.round:before {\\n  border-radius: 50%;\\n}\\n\\n\\n.m-fadeOut {\\n  visibility: hidden;\\n  opacity: 0;\\n  transition: visibility 0s linear 300ms, opacity 300ms;\\n}\\n\\n.m-fadeIn {\\n  visibility: visible;\\n  opacity: 1;\\n  transition: visibility 0s linear 0s, opacity 300ms;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li:hover {\\n  background-color: \").concat(theme[\"hover-color\"], \";\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li label:hover {\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-loopbar:hover {\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-status-btn:hover {\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-controls:active #\").concat(name, \"-cursor,\\n#\").concat(name, \"-controls:hover #\").concat(name, \"-cursor  {\\n  width: 16px;\\n  height: 16px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-volume .\").concat(name, \"-volume-cursor-transition {\\n  width: 12px;\\n  height: 12px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-volume .\").concat(name, \"-volume-width-transition\\n {\\n  width: 50px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-time-display.\").concat(name, \"-time-width-transition {\\n  position:relative;\\n  left: 10px;\\n  -webkit-transition: left 0.3s ease;\\n  -moz-transition: left 0.3s ease;\\n  transition: left 0.3s ease;\\n}\\n\\n#\").concat(name, \"-settings-speed:hover .\").concat(name, \"-speed-btn {\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-status-btn:hover {\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-loop-btn:hover,\\n#\").concat(name, \"-dc-btn:hover\\n {\\n  cursor: pointer;\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n#\").concat(name, \"-settings-btn:hover {\\n  cursor: pointer;\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-full-screen-btn:hover {\\n  cursor: pointer;\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\").concat(theme[\"theme-style\"], \"\\n\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/html/style.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/html/svg.js":
/*!*************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/html/svg.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar svg = module.exports = {};\nsvg.playSVG = \"\\n  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"18\\\" height=\\\"20\\\" viewBox=\\\"0 0 18 20\\\">\\n    <path fill=\\\"#999\\\" fill-rule=\\\"nonzero\\\" d=\\\"M16.224 8.515L2.582.245A1.7 1.7 0 0 0 0 1.702V18.24a1.7 1.7 0 0 0 2.582 1.455l13.642-8.27a1.7 1.7 0 0 0 0-2.91z\\\"/>\\n</svg>\\n\\n\";\nsvg.dcSVG = \"\\n  <svg class=\\\"svg\\\" style=\\\"transform:scale(0.55)\\\" version=\\\"1.0\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n width=\\\"1705.000000pt\\\" height=\\\"1903.000000pt\\\" viewBox=\\\"0 0 1705.000000 1903.000000\\\"\\n preserveAspectRatio=\\\"xMidYMid meet\\\">\\n<metadata>\\nCreated by potrace 1.15, written by Peter Selinger 2001-2017\\n</metadata>\\n<g transform=\\\"translate(0.000000,1903.000000) scale(0.100000,-0.100000)\\\"\\nfill=\\\"#000000\\\" stroke=\\\"none\\\">\\n<path d=\\\"M0 9515 l0 -9515 1583 0 1582 0 4430 4655 c2437 2561 4457 4687 4490\\n4726 33 38 1164 1227 2513 2642 l2452 2572 0 2192 c0 1206 -2 2193 -4 2193 -3\\n0 -1597 -1652 -3542 -3671 l-3538 -3671 -31 35 c-16 20 -1497 1683 -3290 3696\\nl-3260 3661 -1692 0 -1693 0 0 -9515z m5504 2412 c1253 -1413 2279 -2574 2282\\n-2580 3 -9 -3274 -3438 -4597 -4811 -5 -6 -9 1968 -9 4999 l0 5010 24 -25 c13\\n-14 1048 -1181 2300 -2593z\\\"/>\\n<path d=\\\"M13924 7584 c-34 -17 -2029 -2158 -2029 -2178 0 -15 5121 -5400 5141\\n-5404 12 -3 14 295 14 2241 l0 2245 -1478 1543 c-813 849 -1490 1550 -1505\\n1557 -38 16 -105 15 -143 -4z\\\"/>\\n</g>\\n</svg>\\n\";\nsvg.pauseSVG = \"\\n  <svg class=\\\"svg\\\" style=\\\"transform:scale(1.5)\\\" width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 36 36\\\" >\\n    <path id=\\\"pause-icon\\\" data-state=\\\"playing\\\" d=\\\"M11,10 L17,10 17,26 11,26 M20,10 L26,10 26,26 20,26\\\" />\\n  </svg>\\n\";\nsvg.replaySVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 1000 1000\\\" enable-background=\\\"new 0 0 1000 1000\\\" xml:space=\\\"preserve\\\">\\n    <metadata> Svg Vector Icons : http://www.onlinewebfonts.com/icon </metadata>\\n    <g><g transform=\\\"translate(0.000000,511.000000) scale(0.100000,-0.100000)\\\">\\n      <path d=\\\"M5356.3,4203.8c-1247.8-153.1-2324.2-811.3-3000.7-1839.7c-379.4-578.2-596.5-1209-660.5-1933.4l-27.4-294.8H883.9c-431.9,0-783.9-6.9-783.9-18.3c0-9.2,477.6-493.7,1062.7-1078.7l1062.7-1062.7L3288.1-961.1C3873.1-376,4350.8,108.5,4350.8,117.6c0,11.4-356.5,18.3-790.7,18.3h-793l18.3,189.7C2831,876.3,2991,1338,3288.1,1779.1C4122.3,3026.9,5706,3472.5,7065.8,2841.8C7639.4,2578.9,8197,2035,8487.3,1461.4C8581,1274,8709,896.9,8754.7,666.1c48-246.8,54.8-811.3,9.1-1055.8C8567.3-1491.3,7788-2394,6720.7-2750.5c-315.4-107.4-541.6-139.4-941.6-139.4c-287.9,0-415.9,11.4-598.8,50.3c-523.3,112-973.6,335.9-1371.2,681c-75.4,68.6-148.5,123.4-160,123.4c-9.1,0-187.4-169.1-393.1-374.8c-434.2-434.2-420.5-363.4-105.1-628.5c852.4-710.7,1972.3-1055.8,3046.4-937c1627.2,176,2977.8,1257,3489.8,2790.4c457.1,1368.9,169.1,2843-777,3969.7C8322.7,3484,7417.8,4000.4,6503.6,4160.4C6197.4,4213,5619.2,4235.8,5356.3,4203.8z\\\"/>\\n      <path d=\\\"M4990.7,124.5c0-1503.8,4.6-1794,32-1778c16,9.1,505.1,413.6,1085.6,895.8C7113.8,78.8,7161.8,122.2,7122.9,161c-80,75.4-2109.4,1757.5-2120.8,1757.5C4995.3,1918.5,4990.7,1111.8,4990.7,124.5z\\\"/>\\n    </g></g>\\n  </svg>\\n\";\nsvg.volumeSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n   viewBox=\\\"0 0 286.374 286.374\\\" style=\\\"enable-background:new 0 0 286.374 286.374;\\\" xml:space=\\\"preserve\\\">\\n    <g id=\\\"Volume_2\\\">\\n      <path style=\\\"fill-rule:evenodd;clip-rule:evenodd;\\\" d=\\\"M233.636,26.767l-33.372,28.5c25.659,21.07,42.006,52.616,42.006,87.92\\n        c0,35.305-16.347,66.851-42.006,87.921l33.372,28.499c32.324-28.869,52.738-70.268,52.738-116.421\\n        C286.374,97.034,265.96,55.635,233.636,26.767z M177.737,74.513l-34.69,29.64c15.14,6.818,27.19,21.681,27.19,39.034\\n        s-12.05,32.216-27.19,39.034l34.69,29.64c21.294-15.717,36.051-40.586,36.051-68.674C213.788,115.099,199.03,90.23,177.737,74.513z\\n         M108.672,48.317L44.746,98.441H17.898C4.671,98.441,0,103.268,0,116.34v53.695c0,13.072,4.951,17.898,17.898,17.898h26.848\\n        l63.926,50.068c7.668,4.948,16.558,6.505,16.558-7.365V55.683C125.23,41.813,116.34,43.37,108.672,48.317z\\\"/>\\n    </g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n  </svg>\\n\";\nsvg.volumeMuteSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n   viewBox=\\\"0 0 286.277 286.277\\\" style=\\\"enable-background:new 0 0 286.277 286.277;\\\" xml:space=\\\"preserve\\\">\\n    <g id=\\\"Volume_none\\\">\\n      <path style=\\\"fill-rule:evenodd;clip-rule:evenodd;\\\" d=\\\"M245.102,143.151l36.98-37.071c5.593-5.605,5.593-14.681,0-20.284\\n        l-10.124-10.142c-5.593-5.604-14.655-5.604-20.247,0l-36.98,37.071l-36.977-37.043c-5.594-5.603-14.654-5.603-20.247,0\\n        l-10.124,10.143c-5.594,5.603-5.594,14.679,0,20.282l36.987,37.053l-36.961,37.051c-5.591,5.604-5.591,14.681,0,20.284\\n        l10.126,10.141c5.593,5.604,14.654,5.604,20.247,0l36.96-37.05l36.97,37.035c5.592,5.605,14.654,5.605,20.247,0l10.124-10.141\\n        c5.593-5.603,5.593-14.68,0-20.282L245.102,143.151z M108.674,48.296L44.747,98.42H17.9c-13.228,0-17.899,4.826-17.899,17.898\\n        L0,142.719l0.001,27.295c0,13.072,4.951,17.898,17.899,17.898h26.847l63.927,50.068c7.667,4.948,16.557,6.505,16.557-7.365V55.662\\n        C125.23,41.792,116.341,43.349,108.674,48.296z\\\"/>\\n    </g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n  </svg>\\n\";\nsvg.settingsSVG = \"\\n  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"19\\\" height=\\\"19\\\" viewBox=\\\"0 0 19 19\\\">\\n    <path fill=\\\"#999\\\" fill-rule=\\\"nonzero\\\" d=\\\"M17.812 7.52h-1.474a7.09 7.09 0 0 0-.604-1.456l1.043-1.042a1.187 1.187 0 0 0 0-1.68l-1.12-1.118a1.188 1.188 0 0 0-1.68 0l-1.043 1.042a7.05 7.05 0 0 0-1.455-.604V1.188C11.48.531 10.948 0 10.292 0H8.708c-.656 0-1.187.532-1.187 1.188v1.474a7.1 7.1 0 0 0-1.456.604L5.022 2.224a1.187 1.187 0 0 0-1.68 0l-1.12 1.12a1.188 1.188 0 0 0 0 1.68l1.044 1.042c-.256.46-.458.949-.604 1.455H1.188C.531 7.52 0 8.052 0 8.708v1.584c0 .656.532 1.187 1.188 1.187h1.474c.146.507.348.995.604 1.456L2.22 13.979a1.188 1.188 0 0 0 0 1.68l1.12 1.119a1.223 1.223 0 0 0 1.68 0l1.043-1.043c.462.255.95.458 1.457.605v1.472c0 .656.531 1.188 1.187 1.188h1.584c.656 0 1.187-.532 1.187-1.188V16.34c.506-.147.995-.35 1.456-.604l1.043 1.043a1.188 1.188 0 0 0 1.68 0l1.119-1.12a1.187 1.187 0 0 0 0-1.679l-1.043-1.043c.256-.461.458-.95.604-1.456h1.474A1.188 1.188 0 0 0 19 10.29V8.709c0-.656-.532-1.187-1.188-1.187zM9.5 13.459a3.958 3.958 0 1 1 0-7.916 3.958 3.958 0 0 1 0 7.916z\\\"/>\\n</svg>\\n\\n\";\nsvg.arrowRightSVG = \"\\n  <svg class=\\\"svg arrow\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 50 80\\\" xml:space=\\\"preserve\\\">\\n    <polyline fill=\\\"none\\\" stroke-width=\\\"10\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" points=\\\"0.375,0.375 45.63,38.087 0.375,75.8 \\\"/>\\n  </svg>\\n\";\nsvg.arrowLeftSVG = \"\\n  <svg class=\\\"svg arrow\\\" class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 50 80\\\" xml:space=\\\"preserve\\\">\\n    <polyline fill=\\\"none\\\" stroke-width=\\\"10\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" points=\\\"45.63,75.8 0.375,38.087 45.63,0.375 \\\"/>\\n  </svg> \\n\";\nsvg.fullScreenSVG = \"\\n <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"19\\\" height=\\\"19\\\" viewBox=\\\"0 0 19 19\\\">\\n    <g fill=\\\"#999\\\" fill-rule=\\\"nonzero\\\">\\n        <path d=\\\"M18.802 1.942A1.746 1.746 0 0 0 17.06.2h-4.537a.99.99 0 1 0 0 1.98h4.102c.11 0 .198.088.198.197v2.588a.99.99 0 1 0 1.98 0V1.942zM.198 4.965a.99.99 0 0 0 1.98 0v-2.59a.198.198 0 0 1 .197-.199h4.102a.99.99 0 0 0 0-1.979H1.944C.983.2.204.978.202 1.94L.198 4.965zM18.802 17.056v-3.023a.99.99 0 1 0-1.98 0v2.592c0 .11-.088.198-.197.198h-4.102a.99.99 0 1 0 0 1.98h4.533c.964-.001 1.746-.783 1.746-1.747zM.198 17.056a1.746 1.746 0 0 0 1.746 1.742h4.533a.99.99 0 1 0 0-1.979H2.375a.198.198 0 0 1-.198-.194v-2.592a.99.99 0 1 0-1.98 0v3.023z\\\"/>\\n        <rect width=\\\"10.651\\\" height=\\\"6.117\\\" x=\\\"4.174\\\" y=\\\"6.441\\\" rx=\\\"1.954\\\"/>\\n    </g>\\n</svg>\\n\\n\";\nsvg.loopSVG = \"\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"22\\\" viewBox=\\\"0 0 24 22\\\">\\n    <g fill=\\\"#999\\\" fill-rule=\\\"nonzero\\\">\\n        <path d=\\\"M16.773 15.476H16.3a1.25 1.25 0 0 0 0 2.5h.478a6.944 6.944 0 0 0 .98-13.823.251.251 0 0 1-.208-.246V1.93A1.25 1.25 0 0 0 15.584.906l-4.778 3.341a1.25 1.25 0 0 0 .717 2.274h4.764c2.829 0 4.963 1.925 4.963 4.478a4.482 4.482 0 0 1-4.477 4.477zM6.247 17.845c.12.02.208.124.208.246v1.976a1.249 1.249 0 0 0 1.966 1.024l4.773-3.34a1.251 1.251 0 0 0-.717-2.275H7.713c-2.829 0-4.963-1.925-4.963-4.476a4.482 4.482 0 0 1 4.477-4.479h.478a1.25 1.25 0 1 0 0-2.5h-.478a6.945 6.945 0 0 0-.98 13.824z\\\"/>\\n    </g>\\n</svg>\\n\";\nsvg.loadingSVG = \"<svg class=\\\"lds-spinner\\\" width=\\\"200px\\\"  height=\\\"200px\\\"  xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" viewBox=\\\"0 0 100 100\\\" preserveAspectRatio=\\\"xMidYMid\\\" style=\\\"background: none;\\\"><g transform=\\\"rotate(0 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#999\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.9166666666666666s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(30 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#999\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.8333333333333334s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(60 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#999\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.75s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(90 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#999\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.6666666666666666s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(120 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#999\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.5833333333333334s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(150 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#999\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.5s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(180 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#999\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.4166666666666667s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(210 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#999\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.3333333333333333s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(240 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#999\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.25s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(270 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#999\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.16666666666666666s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(300 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#999\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.08333333333333333s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(330 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#999\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"0s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g></svg>\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/html/svg.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/html/themes.js":
/*!****************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/html/themes.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (theme, name) {\n  var themes = {\n    default: {\n      \"settings-background-color\": \"whitesmoke\",\n      \"hms-background-color\": \"whitesmoke\",\n      \"background-color\": \"whitesmoke\",\n      \"grad-height\": \"0px\",\n      color: \"black\",\n      \"svg-color\": \"black\",\n      \"loopbar-color\": \"#808086\",\n      \"speedbar-color\": \"#999\",\n      \"runningbar-color\": \"red\",\n      \"cursor-color\": \"red\",\n      \"speedbar-cursor-color\": \"red\",\n      \"button-opacity\": \"1\",\n      \"hover-color\": \"rgba(200, 200, 200, 0.5)\",\n      \"slider-off-color\": \"#ccc\",\n      \"slider-on-color\": \"red\",\n      \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n      border: \"1px solid rgba(255,255,255,0.2)\",\n      \"controls-border\": \"none\",\n      \"svg-selected-color\": \"red\",\n      \"loopbar-boundaries-style::before\": \"\",\n      \"loopbar-boundaries-style::after\": \"\",\n      \"theme-style\": \"\",\n      \"loopbar-boundaries-color\": \"#808086\"\n    },\n    dark: {\n      \"settings-background-color\": \"black\",\n      \"hms-background-color\": \"black\",\n      \"background-color\": \"black\",\n      \"grad-height\": \"0px\",\n      color: \"white\",\n      \"svg-color\": \"white\",\n      \"loopbar-color\": \"#808086\",\n      \"speedbar-color\": \"#999\",\n      \"runningbar-color\": \"red\",\n      \"cursor-color\": \"red\",\n      \"speedbar-cursor-color\": \"red\",\n      \"button-opacity\": \"1\",\n      \"hover-color\": \"rgba(90, 90, 90, 0.5)\",\n      \"slider-off-color\": \"#ccc\",\n      \"slider-on-color\": \"red\",\n      \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n      border: \"1px solid rgba(255,255,255,0.2)\",\n      \"controls-border\": \"none\",\n      \"svg-selected-color\": \"red\",\n      \"loopbar-boundaries-style::before\": \"\",\n      \"loopbar-boundaries-style::after\": \"\",\n      \"theme-style\": \"\",\n      \"loopbar-boundaries-color\": \"#808086\"\n    },\n    whiteGold: {\n      \"settings-background-color\": \"white\",\n      \"hms-background-color\": \"white\",\n      \"background-color\": \"white\",\n      \"grad-height\": \"0px\",\n      color: \"#a17f1a\",\n      \"svg-color\": \"#a17f1a\",\n      \"loopbar-color\": \"#808086\",\n      \"speedbar-color\": \"#999\",\n      \"runningbar-color\": \"#a17f1a\",\n      \"cursor-color\": \"#a17f1a\",\n      \"speedbar-cursor-color\": \"#a17f1a\",\n      \"button-opacity\": \"1\",\n      \"hover-color\": \"rgba(200, 200, 200, 0.5)\",\n      \"slider-off-color\": \"#ccc\",\n      \"slider-on-color\": \"#a17f1a\",\n      \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n      border: \"1px solid rgba(255,255,255,0.2)\",\n      \"controls-border\": \"none\",\n      \"svg-selected-color\": \"red\",\n      \"loopbar-boundaries-style::before\": \"\",\n      \"loopbar-boundaries-style::after\": \"\",\n      \"theme-style\": \"\",\n      \"loopbar-boundaries-color\": \"#808086\"\n    },\n    darkGold: {\n      \"settings-background-color\": \"black\",\n      \"hms-background-color\": \"black\",\n      \"background-color\": \"black\",\n      \"grad-height\": \"0px\",\n      color: \"#a17f1a\",\n      \"svg-color\": \"#a17f1a\",\n      \"loopbar-color\": \"#808086\",\n      \"speedbar-color\": \"#999\",\n      \"runningbar-color\": \"#a17f1a\",\n      \"cursor-color\": \"#a17f1a\",\n      \"speedbar-cursor-color\": \"#a17f1a\",\n      \"button-opacity\": \"1\",\n      \"hover-color\": \"rgba(90, 90, 90, 0.5)\",\n      \"slider-off-color\": \"#ccc\",\n      \"slider-on-color\": \"#a17f1a\",\n      \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n      border: \"1px solid rgba(255,255,255,0.2)\",\n      \"controls-border\": \"none\",\n      \"svg-selected-color\": \"red\",\n      \"loopbar-boundaries-style::before\": \"\",\n      \"loopbar-boundaries-style::after\": \"\",\n      \"theme-style\": \"\",\n      \"loopbar-boundaries-color\": \"#808086\"\n    },\n    transparent: {\n      \"background-color\": \"transparent\",\n      \"settings-background-color\": \"rgba(0,0,0,0.5)\",\n      \"hms-background-color\": \"rgba(0,0,0,0.5)\",\n      \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n      color: \"white\",\n      \"grad-height\": \"60px\",\n      \"svg-color\": \"white\",\n      \"loopbar-color\": \"#808086\",\n      \"speedbar-color\": \"#999\",\n      \"runningbar-color\": \"red\",\n      \"cursor-color\": \"red\",\n      \"speedbar-cursor-color\": \"red\",\n      \"button-opacity\": \"1\",\n      \"hover-color\": \"rgba(200, 200, 200, 0.5)\",\n      \"slider-off-color\": \"#ccc\",\n      \"slider-on-color\": \"red\",\n      border: \"1px solid rgba(255,255,255,0.1)\",\n      \"controls-border\": \"1px solid rgba(255,255,255,0.1)\",\n      \"svg-selected-color\": \"red\",\n      \"loopbar-boundaries-style::before\": \"\",\n      \"loopbar-boundaries-style::after\": \"\",\n      \"theme-style\": \"\",\n      \"loopbar-boundaries-color\": \"#808086\"\n    },\n    \"mc-green\": {\n      \"background-color\": \"#141416\",\n      \"settings-background-color\": \"rgba(0,0,0,0.5)\",\n      \"hms-background-color\": \"rgba(0,0,0,0.5)\",\n      \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n      color: \"#999\",\n      \"grad-height\": \"60px\",\n      \"svg-color\": \"#999\",\n      \"loopbar-color\": \"rgba(0,184,139,0.2)\",\n      \"loopbar-boundaries-color\": \"#00b88b\",\n      \"totalbar-color\": \"rgba(255, 255, 255, 0.11)\",\n      \"speedbar-color\": \"#999\",\n      \"runningbar-color\": \"#00b88b\",\n      \"cursor-color\": \"#00b88b\",\n      \"speedbar-cursor-color\": \"#00b88b\",\n      \"button-opacity\": \"1\",\n      \"hover-color\": \"rgba(0,184,139,0.2)\",\n      \"slider-off-color\": \"#ccc\",\n      \"slider-on-color\": \"#00b88b\",\n      border: \"1px solid rgba(255,255,255,0.1)\",\n      \"controls-border\": \"1px solid #151515\",\n      \"svg-selected-color\": \"#00b88b\",\n      \"loopbar-boundaries-style\": \"\\n        transform: translate(-50%,-37%);\\n        position: absolute;\\n        width: 18px;\\n        background-color: #00b88b;\\n        height: 18px;\\n        border-radius: 10px;\\n        z-index: 40;\\n        position: absolute;\\n        width: 18px;\\n        background-color: #00b88b;\\n        height: 18px;\\n        border-radius: 10px;\\n        z-index: 40;\\n        width: 18px;\\n        height: 9px;\\n        border-radius: 100%;\\n        top: 1.5px;\\n    \",\n      \"loopbar-boundaries-style::before\": \"\\n            width: 16px;\\n        height: 5px;\\n        background: #00b88b;\\n        border-radius: 100%;\\n        display: block;\\n        content: \\\"\\\";\\n        position: relative;\\n        left: -2px;\\n        top: 2px;\\n    \",\n      \"loopbar-boundaries-style::after\": \"\\n        width: 14px;\\n        height: 11px;\\n        border-radius: 100%;\\n        background: #00b88b;\\n        content: \\\"\\\";\\n        display: block;\\n        position: relative;\\n        top: -6px;\\n        left: 5px;\\n    \",\n      \"theme-style\": \"\\n        #\".concat(name, \"-loopbar-start {\\n            left: -9px !important;\\n            transform: rotate(180deg);\\n            top: -2px;\\n        }\\n    \")\n    },\n    \"mc-blue\": {\n      \"background-color\": \"#141416\",\n      \"settings-background-color\": \"rgba(0,0,0,0.5)\",\n      \"hms-background-color\": \"rgba(0,0,0,0.5)\",\n      \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n      color: \"#999\",\n      \"grad-height\": \"60px\",\n      \"svg-color\": \"#999\",\n      \"loopbar-color\": \"rgba(0,153,225,0.2)\",\n      \"loopbar-boundaries-color\": \"#0099e1\",\n      \"totalbar-color\": \"rgba(255, 255, 255, 0.11)\",\n      \"speedbar-color\": \"#999\",\n      \"runningbar-color\": \"#0099e1\",\n      \"cursor-color\": \"#0099e1\",\n      \"speedbar-cursor-color\": \"#0099e1\",\n      \"button-opacity\": \"1\",\n      \"hover-color\": \"rgba(0,153,225,0.2)\",\n      \"slider-off-color\": \"#ccc\",\n      \"slider-on-color\": \"#0099e1\",\n      border: \"1px solid rgba(255,255,255,0.1)\",\n      \"controls-border\": \"1px solid #151515\",\n      \"svg-selected-color\": \"#0099e1\",\n      \"loopbar-boundaries-style\": \"\\n        transform: translate(-50%,-37%);\\n        position: absolute;\\n        width: 18px;\\n        background-color: #0099e1;\\n        height: 18px;\\n        border-radius: 10px;\\n        z-index: 40;\\n        position: absolute;\\n        width: 18px;\\n        background-color: #0099e1;\\n        height: 18px;\\n        border-radius: 10px;\\n        z-index: 40;\\n        width: 18px;\\n        height: 9px;\\n        border-radius: 100%;\\n        top: 1.5px;\\n    \",\n      \"loopbar-boundaries-style::before\": \"\\n            width: 16px;\\n        height: 5px;\\n        background: #0099e1;\\n        border-radius: 100%;\\n        display: block;\\n        content: \\\"\\\";\\n        position: relative;\\n        left: -2px;\\n        top: 2px;\\n    \",\n      \"loopbar-boundaries-style::after\": \"\\n        width: 14px;\\n        height: 11px;\\n        border-radius: 100%;\\n        background: #0099e1;\\n        content: \\\"\\\";\\n        display: block;\\n        position: relative;\\n        top: -6px;\\n        left: 5px;\\n    \",\n      \"theme-style\": \"\\n        #\".concat(name, \"-loopbar-start {\\n            left: -9px !important;\\n            transform: rotate(180deg);\\n            top: -2px;\\n        }\\n    \")\n    },\n    \"on-top\": {\n      \"background-height\": \"100%\",\n      \"pointer-event-panel-height\": \"calc(100% - 44px)\",\n      \"controls-bottom\": \"0px\",\n      \"settings-panel-bottom\": \"48px\",\n      \"controls-position\": \"0px\"\n    },\n    \"position-default\": {\n      \"background-height\": \"calc(100% - 44px)\",\n      \"pointer-event-panel-height\": \"calc(100% - 44px)\",\n      \"controls-bottom\": \"-0px\",\n      \"settings-panel-bottom\": \"48px\",\n      \"controls-position\": \"40px\"\n    }\n  };\n  return themes[theme];\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/html/themes.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/listeners/body.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/listeners/body.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"../node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    el = _require.el,\n    elid = _require.elid;\n\nmodule.exports = function (_this) {\n  el(\"body\")[0].addEventListener(\"click\", function (e) {\n    if (e.target.className === \"\".concat(_this.name, \"-speed-value\")) {\n      var speedDisplay = e.target.dataset.speedValue - 0;\n      _this.clip.executionSpeed = e.target.dataset.speedValue;\n      _this.clip.speed == 1 ? speedDisplay = \"Normal\" : speedDisplay = _this.clip.speed;\n      _this.elements.speedCurrent.innerHTML = speedDisplay;\n      var step = 1 / (_this.options.speedValues.length - 1);\n      var positionY = (e.target.dataset.zone * step - 1) * -1 * ((_this.options.speedValues.length - 1) * 16);\n      elid(\"\".concat(_this.name, \"-speed-cursor\")).style.top = positionY + \"px\";\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL2JvZHkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL2JvZHkuanM/MmFjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIiksXG4gICAgZWwgPSBfcmVxdWlyZS5lbCxcbiAgICBlbGlkID0gX3JlcXVpcmUuZWxpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX3RoaXMpIHtcbiAgZWwoXCJib2R5XCIpWzBdLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldC5jbGFzc05hbWUgPT09IFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLXNwZWVkLXZhbHVlXCIpKSB7XG4gICAgICB2YXIgc3BlZWREaXNwbGF5ID0gZS50YXJnZXQuZGF0YXNldC5zcGVlZFZhbHVlIC0gMDtcbiAgICAgIF90aGlzLmNsaXAuZXhlY3V0aW9uU3BlZWQgPSBlLnRhcmdldC5kYXRhc2V0LnNwZWVkVmFsdWU7XG4gICAgICBfdGhpcy5jbGlwLnNwZWVkID09IDEgPyBzcGVlZERpc3BsYXkgPSBcIk5vcm1hbFwiIDogc3BlZWREaXNwbGF5ID0gX3RoaXMuY2xpcC5zcGVlZDtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnNwZWVkQ3VycmVudC5pbm5lckhUTUwgPSBzcGVlZERpc3BsYXk7XG4gICAgICB2YXIgc3RlcCA9IDEgLyAoX3RoaXMub3B0aW9ucy5zcGVlZFZhbHVlcy5sZW5ndGggLSAxKTtcbiAgICAgIHZhciBwb3NpdGlvblkgPSAoZS50YXJnZXQuZGF0YXNldC56b25lICogc3RlcCAtIDEpICogLTEgKiAoKF90aGlzLm9wdGlvbnMuc3BlZWRWYWx1ZXMubGVuZ3RoIC0gMSkgKiAxNik7XG4gICAgICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLXNwZWVkLWN1cnNvclwiKSkuc3R5bGUudG9wID0gcG9zaXRpb25ZICsgXCJweFwiO1xuICAgIH1cbiAgfSk7XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/listeners/body.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/listeners/controls.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/listeners/controls.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"../node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    elid = _require.elid;\n\nmodule.exports = function (_this) {\n  elid(\"\".concat(_this.name, \"-controls\")).onmouseover = function () {\n    if (!_this.settings.loopActivated) {\n      return;\n    }\n\n    _this.elements.loopBarStart.classList.remove(\"m-fadeOut\");\n\n    _this.elements.loopBarEnd.classList.remove(\"m-fadeOut\");\n\n    _this.elements.loopBarStart.classList.add(\"m-fadeIn\");\n\n    _this.elements.loopBarEnd.classList.add(\"m-fadeIn\");\n  };\n\n  elid(\"\".concat(_this.name, \"-controls\")).onmouseout = function (event) {\n    var e = event.toElement || event.relatedTarget || event.target;\n\n    if (isDescendant(this, e) || e === this) {\n      return;\n    }\n\n    if (!_this.settings.loopActivated) {\n      return;\n    }\n\n    _this.elements.loopBarStart.classList.add(\"m-fadeOut\");\n\n    _this.elements.loopBarEnd.classList.add(\"m-fadeOut\");\n\n    _this.elements.loopBarStart.classList.remove(\"m-fadeIn\");\n\n    _this.elements.loopBarEnd.classList.remove(\"m-fadeIn\");\n  };\n\n  var twt = false;\n\n  elid(\"\".concat(_this.name, \"-controls\")).ontouchstart = function (event) {\n    var e = event.toElement || event.relatedTarget || event.target;\n\n    if (isDescendant(_this.elements.statusButton, e) || e === _this.elements.statusButton || isDescendant(_this.elements.settingsButton, e) || e === _this.elements.settingsButton || isDescendant(_this.elements.fullScreenButton, e) || e === _this.elements.fullScreenButton || isDescendant(_this.elements.loopButton, e) || e === _this.elements.loopButton || isDescendant(_this.elements.totalBar, e) || e === _this.elements.totalBar) {\n      return;\n    }\n\n    _this.elements.volumeControl.className = \"\".concat(_this.name, \"-volume-width-transition\");\n    _this.elements.volumeBar.className = \"\".concat(_this.name, \"-volume-width-transition\");\n    _this.elements.volumeBarHelper.className = \"\".concat(_this.name, \"-volume-width-transition\");\n    _this.elements.timeDisplay.className = \"\".concat(_this.name, \"-time-width-transition\");\n    _this.elements.volumeCursor.className = \"\".concat(_this.name, \"-volume-cursor-transition\");\n    twt = true;\n  };\n\n  window.addEventListener(\"touchstart\", function (event) {\n    var e = event.toElement || event.relatedTarget || event.target;\n\n    if (isDescendant(elid(\"\".concat(_this.name, \"-controls\")), e) || e === elid(\"\".concat(_this.name, \"-controls\"))) {\n      return;\n    }\n\n    if (twt) {\n      _this.elements.volumeControl.className = \"\";\n      _this.elements.volumeBar.className = \"\";\n      _this.elements.volumeBarHelper.className = \"\";\n      _this.elements.timeDisplay.className = \"\";\n      _this.elements.volumeCursor.className = \"\";\n    }\n  }); // elid(`${_this.name}-left-controls`).ontouchstart = function (event) {\n  //   const e = event.toElement || event.relatedTarget || event.target;\n  //     if (isDescendant(_this.elements.statusBtn, e) || e === _this.elements.statusBtn) {\n  //       return false;\n  //     }\n  //     return \"\";\n  // };\n};\n\nfunction isDescendant(parent, child) {\n  var node = child.parentNode;\n\n  while (node != null) {\n    if (node == parent) {\n      return true;\n    }\n\n    node = node.parentNode;\n  }\n\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL2NvbnRyb2xzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4LXBsYXllci9kaXN0L2xpc3RlbmVycy9jb250cm9scy5qcz9hNWMyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKFwiLi4vaGVscGVyc1wiKSxcbiAgICBlbGlkID0gX3JlcXVpcmUuZWxpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX3RoaXMpIHtcbiAgZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1jb250cm9sc1wiKSkub25tb3VzZW92ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFfdGhpcy5zZXR0aW5ncy5sb29wQWN0aXZhdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhclN0YXJ0LmNsYXNzTGlzdC5yZW1vdmUoXCJtLWZhZGVPdXRcIik7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyRW5kLmNsYXNzTGlzdC5yZW1vdmUoXCJtLWZhZGVPdXRcIik7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyU3RhcnQuY2xhc3NMaXN0LmFkZChcIm0tZmFkZUluXCIpO1xuXG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhckVuZC5jbGFzc0xpc3QuYWRkKFwibS1mYWRlSW5cIik7XG4gIH07XG5cbiAgZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1jb250cm9sc1wiKSkub25tb3VzZW91dCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBlID0gZXZlbnQudG9FbGVtZW50IHx8IGV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgZXZlbnQudGFyZ2V0O1xuXG4gICAgaWYgKGlzRGVzY2VuZGFudCh0aGlzLCBlKSB8fCBlID09PSB0aGlzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFfdGhpcy5zZXR0aW5ncy5sb29wQWN0aXZhdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhclN0YXJ0LmNsYXNzTGlzdC5hZGQoXCJtLWZhZGVPdXRcIik7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyRW5kLmNsYXNzTGlzdC5hZGQoXCJtLWZhZGVPdXRcIik7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyU3RhcnQuY2xhc3NMaXN0LnJlbW92ZShcIm0tZmFkZUluXCIpO1xuXG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhckVuZC5jbGFzc0xpc3QucmVtb3ZlKFwibS1mYWRlSW5cIik7XG4gIH07XG5cbiAgdmFyIHR3dCA9IGZhbHNlO1xuXG4gIGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItY29udHJvbHNcIikpLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBlID0gZXZlbnQudG9FbGVtZW50IHx8IGV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgZXZlbnQudGFyZ2V0O1xuXG4gICAgaWYgKGlzRGVzY2VuZGFudChfdGhpcy5lbGVtZW50cy5zdGF0dXNCdXR0b24sIGUpIHx8IGUgPT09IF90aGlzLmVsZW1lbnRzLnN0YXR1c0J1dHRvbiB8fCBpc0Rlc2NlbmRhbnQoX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NCdXR0b24sIGUpIHx8IGUgPT09IF90aGlzLmVsZW1lbnRzLnNldHRpbmdzQnV0dG9uIHx8IGlzRGVzY2VuZGFudChfdGhpcy5lbGVtZW50cy5mdWxsU2NyZWVuQnV0dG9uLCBlKSB8fCBlID09PSBfdGhpcy5lbGVtZW50cy5mdWxsU2NyZWVuQnV0dG9uIHx8IGlzRGVzY2VuZGFudChfdGhpcy5lbGVtZW50cy5sb29wQnV0dG9uLCBlKSB8fCBlID09PSBfdGhpcy5lbGVtZW50cy5sb29wQnV0dG9uIHx8IGlzRGVzY2VuZGFudChfdGhpcy5lbGVtZW50cy50b3RhbEJhciwgZSkgfHwgZSA9PT0gX3RoaXMuZWxlbWVudHMudG90YWxCYXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVDb250cm9sLmNsYXNzTmFtZSA9IFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLXZvbHVtZS13aWR0aC10cmFuc2l0aW9uXCIpO1xuICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUJhci5jbGFzc05hbWUgPSBcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi12b2x1bWUtd2lkdGgtdHJhbnNpdGlvblwiKTtcbiAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVCYXJIZWxwZXIuY2xhc3NOYW1lID0gXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItdm9sdW1lLXdpZHRoLXRyYW5zaXRpb25cIik7XG4gICAgX3RoaXMuZWxlbWVudHMudGltZURpc3BsYXkuY2xhc3NOYW1lID0gXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItdGltZS13aWR0aC10cmFuc2l0aW9uXCIpO1xuICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUN1cnNvci5jbGFzc05hbWUgPSBcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi12b2x1bWUtY3Vyc29yLXRyYW5zaXRpb25cIik7XG4gICAgdHd0ID0gdHJ1ZTtcbiAgfTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGUgPSBldmVudC50b0VsZW1lbnQgfHwgZXZlbnQucmVsYXRlZFRhcmdldCB8fCBldmVudC50YXJnZXQ7XG5cbiAgICBpZiAoaXNEZXNjZW5kYW50KGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItY29udHJvbHNcIikpLCBlKSB8fCBlID09PSBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWNvbnRyb2xzXCIpKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0d3QpIHtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUNvbnRyb2wuY2xhc3NOYW1lID0gXCJcIjtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUJhci5jbGFzc05hbWUgPSBcIlwiO1xuICAgICAgX3RoaXMuZWxlbWVudHMudm9sdW1lQmFySGVscGVyLmNsYXNzTmFtZSA9IFwiXCI7XG4gICAgICBfdGhpcy5lbGVtZW50cy50aW1lRGlzcGxheS5jbGFzc05hbWUgPSBcIlwiO1xuICAgICAgX3RoaXMuZWxlbWVudHMudm9sdW1lQ3Vyc29yLmNsYXNzTmFtZSA9IFwiXCI7XG4gICAgfVxuICB9KTsgLy8gZWxpZChgJHtfdGhpcy5uYW1lfS1sZWZ0LWNvbnRyb2xzYCkub250b3VjaHN0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIC8vICAgY29uc3QgZSA9IGV2ZW50LnRvRWxlbWVudCB8fCBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IGV2ZW50LnRhcmdldDtcbiAgLy8gICAgIGlmIChpc0Rlc2NlbmRhbnQoX3RoaXMuZWxlbWVudHMuc3RhdHVzQnRuLCBlKSB8fCBlID09PSBfdGhpcy5lbGVtZW50cy5zdGF0dXNCdG4pIHtcbiAgLy8gICAgICAgcmV0dXJuIGZhbHNlO1xuICAvLyAgICAgfVxuICAvLyAgICAgcmV0dXJuIFwiXCI7XG4gIC8vIH07XG59O1xuXG5mdW5jdGlvbiBpc0Rlc2NlbmRhbnQocGFyZW50LCBjaGlsZCkge1xuICB2YXIgbm9kZSA9IGNoaWxkLnBhcmVudE5vZGU7XG5cbiAgd2hpbGUgKG5vZGUgIT0gbnVsbCkge1xuICAgIGlmIChub2RlID09IHBhcmVudCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/listeners/controls.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/listeners/donkeyclip.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/listeners/donkeyclip.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (_this) {\n  _this.elements.donkeyclipButton.addEventListener(\"click\", function () {\n    var u = create_UUID();\n    var popupDC = window.open(\"http://localhost:8081?u=\".concat(u));\n\n    \n    var definition = _this.clip.exportDefinition();\n\n    var clipClass = _this.clipClass;\n    window.addEventListener(\"message\", receiveMessage, false);\n\n    function receiveMessage(event) {\n      if (event.data === u) {\n        popupDC.postMessage(JSON.stringify({\n          definition: definition,\n          clipClass: clipClass,\n          u: u\n        }), \"*\");\n      }\n    }\n  });\n};\n\nfunction create_UUID() {\n  var dt = new Date().getTime();\n  var uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (dt + Math.random() * 16) % 16 | 0;\n    dt = Math.floor(dt / 16);\n    return (c == \"x\" ? r : r & 0x3 | 0x8).toString(16);\n  });\n  return uuid;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL2RvbmtleWNsaXAuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL2RvbmtleWNsaXAuanM/NWQyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX3RoaXMpIHtcbiAgX3RoaXMuZWxlbWVudHMuZG9ua2V5Y2xpcEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB1ID0gY3JlYXRlX1VVSUQoKTtcbiAgICB2YXIgcG9wdXBEQyA9IHdpbmRvdy5vcGVuKFwiaHR0cDovL2xvY2FsaG9zdDo4MDgxP3U9XCIuY29uY2F0KHUpKTtcblxuICAgIFxuICAgIHZhciBkZWZpbml0aW9uID0gX3RoaXMuY2xpcC5leHBvcnREZWZpbml0aW9uKCk7XG5cbiAgICB2YXIgY2xpcENsYXNzID0gX3RoaXMuY2xpcENsYXNzO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCByZWNlaXZlTWVzc2FnZSwgZmFsc2UpO1xuXG4gICAgZnVuY3Rpb24gcmVjZWl2ZU1lc3NhZ2UoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5kYXRhID09PSB1KSB7XG4gICAgICAgIHBvcHVwREMucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIGRlZmluaXRpb246IGRlZmluaXRpb24sXG4gICAgICAgICAgY2xpcENsYXNzOiBjbGlwQ2xhc3MsXG4gICAgICAgICAgdTogdVxuICAgICAgICB9KSwgXCIqXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVfVVVJRCgpIHtcbiAgdmFyIGR0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIHZhciB1dWlkID0gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgdmFyIHIgPSAoZHQgKyBNYXRoLnJhbmRvbSgpICogMTYpICUgMTYgfCAwO1xuICAgIGR0ID0gTWF0aC5mbG9vcihkdCAvIDE2KTtcbiAgICByZXR1cm4gKGMgPT0gXCJ4XCIgPyByIDogciAmIDB4MyB8IDB4OCkudG9TdHJpbmcoMTYpO1xuICB9KTtcbiAgcmV0dXJuIHV1aWQ7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/listeners/donkeyclip.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/listeners/fullscreen.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/listeners/fullscreen.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (_this) {\n  _this.elements.fullScreenButton.addEventListener(\"click\", function () {\n    var elFullScreen = _this.clip.props.host.className.includes(\"full-screen\");\n\n    _this.clip.props.host !== _this.options.host && !elFullScreen ? _this.clip.props.host.appendChild(_this.elements.mcPlayer) : null;\n    _this.clip.props.host !== _this.options.host && elFullScreen ? _this.options.host.appendChild(_this.elements.mcPlayer) : null;\n    elFullScreen ? _this.exitFullscreen() : _this.launchIntoFullscreen(_this.clip.props.host);\n\n    _this.clip.props.host.classList.toggle(\"full-screen\");\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL2Z1bGxzY3JlZW4uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL2Z1bGxzY3JlZW4uanM/OTM2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX3RoaXMpIHtcbiAgX3RoaXMuZWxlbWVudHMuZnVsbFNjcmVlbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbEZ1bGxTY3JlZW4gPSBfdGhpcy5jbGlwLnByb3BzLmhvc3QuY2xhc3NOYW1lLmluY2x1ZGVzKFwiZnVsbC1zY3JlZW5cIik7XG5cbiAgICBfdGhpcy5jbGlwLnByb3BzLmhvc3QgIT09IF90aGlzLm9wdGlvbnMuaG9zdCAmJiAhZWxGdWxsU2NyZWVuID8gX3RoaXMuY2xpcC5wcm9wcy5ob3N0LmFwcGVuZENoaWxkKF90aGlzLmVsZW1lbnRzLm1jUGxheWVyKSA6IG51bGw7XG4gICAgX3RoaXMuY2xpcC5wcm9wcy5ob3N0ICE9PSBfdGhpcy5vcHRpb25zLmhvc3QgJiYgZWxGdWxsU2NyZWVuID8gX3RoaXMub3B0aW9ucy5ob3N0LmFwcGVuZENoaWxkKF90aGlzLmVsZW1lbnRzLm1jUGxheWVyKSA6IG51bGw7XG4gICAgZWxGdWxsU2NyZWVuID8gX3RoaXMuZXhpdEZ1bGxzY3JlZW4oKSA6IF90aGlzLmxhdW5jaEludG9GdWxsc2NyZWVuKF90aGlzLmNsaXAucHJvcHMuaG9zdCk7XG5cbiAgICBfdGhpcy5jbGlwLnByb3BzLmhvc3QuY2xhc3NMaXN0LnRvZ2dsZShcImZ1bGwtc2NyZWVuXCIpO1xuICB9KTtcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/listeners/fullscreen.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBarEnd.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBarEnd.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"../node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // let pe = false;\n  _this.listeners.onCursorMoveLoopEnd = function (e) {\n    e.preventDefault();\n    var clientX = e.clientX || ((e.touches || [])[0] || {}).clientX;\n\n    var viewportOffset = _this.elements.totalBar.getBoundingClientRect();\n\n    var positionX = clientX - viewportOffset.left;\n\n    if (positionX < 0) {\n      positionX = 0;\n    } else if (positionX > _this.elements.totalBar.offsetWidth) {\n      positionX = _this.elements.totalBar.offsetWidth;\n    }\n\n    if (_this.elements.runningBar.offsetWidth >= _this.elements.loopBar.offsetWidth) {\n      _this.elements.runningBar.style.width = _this.elements.loopBar.offsetWidth + \"px\";\n    }\n\n    if (_this.settings.loopLastPositionXPxls - positionX < 0) {\n      _this.elements.loopBar.style.width = Math.abs(_this.settings.loopLastPositionXPxls - positionX) + \"px\";\n    } else {\n      _this.elements.loopBar.style.left = positionX + \"px\";\n      _this.settings.loopLastPositionXPxls = positionX;\n    }\n\n    _this.settings.loopEndMillisecond = Math.round(_this.clip.duration * ((parseFloat(_this.elements.loopBar.style.left) || 0) + parseFloat(_this.elements.loopBar.style.width)) / _this.elements.totalBar.offsetWidth);\n\n    if (_this.settings.loopEndMillisecond < _this.clip.runTimeInfo.currentMillisecond) {\n      _this.settings.loopJourney = true;\n    }\n\n    if (_this.settings.loopStartMillisecond > _this.settings.loopEndMillisecond) {\n      _this.settings.loopStartMillisecond = _this.settings.loopEndMillisecond;\n      _this.settings.loopJourney = true;\n    }\n\n    _this.elements.loopEndTime.innerHTML = _this.settings.loopEndMillisecond;\n    _this.elements.loopStartTime.innerHTML = _this.settings.loopStartMillisecond;\n  };\n\n  _this.listeners.onMouseUpLoopEnd = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"none\"; // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.settings.resizeLoop = false;\n    e.preventDefault();\n    _this.elements.runningBar.style.width = _this.elements.runningBar.offsetWidth / _this.elements.loopBar.offsetWidth * 100 + \"%\";\n    _this.elements.loopBar.style.left = _this.elements.loopBar.offsetLeft / _this.elements.totalBar.offsetWidth * 100 + \"%\";\n    _this.elements.loopBar.style.width = _this.elements.loopBar.offsetWidth / _this.elements.totalBar.offsetWidth * 100 + \"%\";\n\n    if (_this.settings.loopJourney) {\n      _this.createProgressDrag(_this.elements.runningBar.offsetWidth);\n\n      _this.settings.loopJourney = false;\n    }\n\n    removeListener(\"mouseup\", _this.listeners.onMouseUpLoopEnd, false);\n    removeListener(\"touchend\", _this.listeners.onMouseUpLoopEnd, false);\n    removeListener(\"mousemove\", _this.listeners.onCursorMoveLoopEnd, false);\n    removeListener(\"touchmove\", _this.listeners.onCursorMoveLoopEnd, false);\n\n    _this.elements.loopBar.addEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n    _this.elements.loopBar.addEventListener(\"touchstart\", _this.listeners.onMouseDown, {\n      passive: true\n    }, false);\n\n    if (_this.settings.playAfterResize) {\n      if (_this.clip.runTimeInfo.state === \"idle\") {\n        var loopms;\n\n        if (_this.clip.speed >= 0) {\n          loopms = _this.settings.loopStartMillisecond + 1;\n        } else {\n          loopms = _this.settings.loopEndMillisecond - 1;\n        }\n\n        _this.settings.needsUpdate = true;\n\n        _this.createJourney(_this.clip, loopms, {\n          before: \"pause\",\n          after: \"play\"\n        });\n      } else if (_this.clip.runTimeInfo.state === \"completed\") {\n        var _loopms;\n\n        if (_this.clip.speed >= 0) {\n          _loopms = _this.settings.loopStartMillisecond + 1;\n        } else {\n          _loopms = _this.settings.loopEndMillisecond - 1;\n        }\n\n        _this.settings.needsUpdate = true;\n\n        _this.createJourney(_this.clip, _loopms, {\n          before: \"pause\",\n          after: \"play\"\n        });\n      } else {\n        _this.clip.play();\n      }\n\n      _this.settings.playAfterResize = false;\n    }\n  };\n\n  _this.listeners.onMouseDownLoopEnd = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\"; // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.settings.resizeLoop = true;\n    _this.settings.needsUpdate = true;\n\n    if (_this.clip.runTimeInfo.state === \"playing\") {\n      _this.clip.pause();\n\n      _this.settings.playAfterResize = true;\n    }\n\n    e.preventDefault();\n    _this.elements.runningBar.style.width = _this.elements.runningBar.offsetWidth + \"px\";\n    _this.elements.loopBar.style.left = _this.elements.loopBar.offsetLeft + \"px\";\n    _this.elements.loopBar.style.width = _this.elements.loopBar.offsetWidth + \"px\";\n\n    _this.elements.loopBar.removeEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n    _this.elements.loopBar.removeEventListener(\"touchstart\", _this.listeners.onMouseDown, false);\n\n    _this.listeners.onCursorMoveLoopEnd(e);\n\n    addListener(\"mouseup\", _this.listeners.onMouseUpLoopEnd, false);\n    addListener(\"touchend\", _this.listeners.onMouseUpLoopEnd, false);\n    addListener(\"mousemove\", _this.listeners.onCursorMoveLoopEnd, false);\n    addListener(\"touchmove\", _this.listeners.onCursorMoveLoopEnd, false);\n  };\n\n  _this.elements.loopBarEnd.addEventListener(\"mousedown\", _this.listeners.onMouseDownLoopEnd, false);\n\n  _this.elements.loopBarEnd.addEventListener(\"touchstart\", _this.listeners.onMouseDownLoopEnd, {\n    passive: false\n  }, false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBarEnd.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBarStart.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBarStart.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"../node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // let pe = false;\n  _this.listeners.onCursorMoveLoopStart = function (e) {\n    e.preventDefault();\n    var clientX = e.clientX || ((e.touches || [])[0] || {}).clientX;\n\n    var viewportOffset = _this.elements.totalBar.getBoundingClientRect();\n\n    var positionX = Math.round(clientX - viewportOffset.left);\n    var endPositionsInPxls = Math.round(_this.settings.loopEndMillisecond / _this.clip.duration * _this.elements.totalBar.offsetWidth);\n\n    if (positionX < 0) {\n      positionX = 0;\n    } else if (positionX > _this.elements.totalBar.offsetWidth) {\n      positionX = _this.elements.totalBar.offsetWidth;\n    }\n\n    var runningBarWidthInPxls = _this.clip.runTimeInfo.currentMillisecond / _this.clip.duration * _this.elements.totalBar.offsetWidth - positionX;\n    _this.elements.loopBar.style.left = positionX + \"px\";\n    _this.elements.loopBar.style.width = endPositionsInPxls - positionX + \"px\";\n    _this.elements.runningBar.style.width = runningBarWidthInPxls + \"px\";\n    _this.settings.loopLastPositionXPxls = positionX;\n    _this.settings.loopStartMillisecond = Math.round(_this.clip.duration * _this.elements.loopBar.offsetLeft / _this.elements.totalBar.offsetWidth);\n\n    if (_this.settings.loopEndMillisecond < _this.settings.loopStartMillisecond) {\n      _this.settings.loopEndMillisecond = _this.settings.loopStartMillisecond;\n      _this.elements.loopBar.style.width = \"0px\";\n      _this.elements.runningBar.style.width = \"0px\";\n    }\n\n    _this.elements.loopEndTime.innerHTML = _this.settings.loopEndMillisecond;\n    _this.elements.loopStartTime.innerHTML = _this.settings.loopStartMillisecond;\n\n    if (_this.settings.loopStartMillisecond > _this.clip.runTimeInfo.currentMillisecond) {\n      _this.settings.loopJourney = true;\n    }\n  };\n\n  _this.listeners.onMouseUpLoopStart = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"none\"; // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.settings.resizeLoop = false;\n    e.preventDefault();\n\n    if (_this.settings.loopJourney) {\n      _this.createProgressDrag(_this.elements.runningBar.offsetWidth);\n\n      _this.settings.loopJourney = false;\n    }\n\n    _this.elements.loopBar.style.left = _this.elements.loopBar.offsetLeft / _this.elements.totalBar.offsetWidth * 100 + \"%\";\n    _this.elements.loopBar.style.width = _this.elements.loopBar.offsetWidth / _this.elements.totalBar.offsetWidth * 100 + \"%\";\n    _this.settings.loopStartMillisecond = Math.round(_this.clip.duration * _this.elements.loopBar.offsetLeft / _this.elements.totalBar.offsetWidth);\n    _this.elements.runningBar.style.width = _this.elements.runningBar.offsetWidth / _this.elements.loopBar.offsetWidth * 100 + \"%\";\n    removeListener(\"mouseup\", _this.listeners.onMouseUpLoopStart, false);\n    removeListener(\"touchend\", _this.listeners.onMouseUpLoopStart, false);\n    removeListener(\"mousemove\", _this.listeners.onCursorMoveLoopStart, false);\n    removeListener(\"touchmove\", _this.listeners.onCursorMoveLoopStart, false);\n\n    _this.elements.loopBar.addEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n    _this.elements.loopBar.addEventListener(\"touchstart\", _this.listeners.onMouseDown, {\n      passive: true\n    }, false);\n\n    if (_this.settings.playAfterResize) {\n      if (_this.clip.runTimeInfo.state === \"idle\") {\n        var loopms;\n\n        if (_this.clip.speed >= 0) {\n          loopms = _this.settings.loopStartMillisecond + 1;\n        } else {\n          loopms = _this.settings.loopEndMillisecond - 1;\n        }\n\n        _this.settings.needsUpdate = true;\n\n        _this.createJourney(_this.clip, loopms, {\n          before: \"pause\",\n          after: \"play\"\n        });\n      } else {\n        _this.clip.play();\n      }\n\n      _this.settings.playAfterResize = false;\n    }\n  };\n\n  _this.listeners.onMouseDownLoopStart = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\"; // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.settings.resizeLoop = true;\n    e.preventDefault();\n    _this.settings.needsUpdate = true;\n\n    if (_this.clip.runTimeInfo.state === \"playing\") {\n      _this.clip.pause();\n\n      _this.settings.playAfterResize = true;\n    }\n\n    _this.elements.loopBar.removeEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n    _this.elements.loopBar.removeEventListener(\"touchstart\", _this.listeners.onMouseDown, false);\n\n    _this.listeners.onCursorMoveLoopStart(e);\n\n    addListener(\"mouseup\", _this.listeners.onMouseUpLoopStart, false);\n    addListener(\"touchend\", _this.listeners.onMouseUpLoopStart, false);\n    addListener(\"mousemove\", _this.listeners.onCursorMoveLoopStart, false);\n    addListener(\"touchmove\", _this.listeners.onCursorMoveLoopStart, false);\n  };\n\n  _this.elements.loopBarStart.addEventListener(\"mousedown\", _this.listeners.onMouseDownLoopStart, false);\n\n  _this.elements.loopBarStart.addEventListener(\"touchstart\", _this.listeners.onMouseDownLoopStart, {\n    passive: false\n  }, false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBarStart.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBtn.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBtn.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"../node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    elid = _require.elid;\n\nmodule.exports = function (_this) {\n  _this.elements.loopButton.onclick = function () {\n    _this.settings.loopActivated = !_this.settings.loopActivated;\n\n    _this.elements.loopButton.classList.toggle(\"svg-selected\");\n\n    _this.elements.loopBarStart.classList.toggle(\"m-fadeOut\");\n\n    _this.elements.loopBarEnd.classList.toggle(\"m-fadeOut\");\n\n    _this.elements.loopBarStart.classList.toggle(\"m-fadeIn\");\n\n    _this.elements.loopBarStart.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n    _this.elements.loopBarEnd.classList.toggle(\"m-fadeIn\");\n\n    _this.elements.loopBarEnd.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n    elid(\"\".concat(_this.name, \"-loop-time\")).classList.toggle(\"m-fadeOut\");\n    elid(\"\".concat(_this.name, \"-loop-time\")).classList.toggle(\"m-fadeIn\");\n    elid(\"\".concat(_this.name, \"-loop-time\")).classList.toggle(\"\".concat(_this.name, \"-hide\"));\n    _this.elements.loopEndTime.innerHTML = _this.settings.loopEndMillisecond;\n    _this.elements.loopStartTime.innerHTML = _this.settings.loopStartMillisecond;\n    _this.settings.needsUpdate = true;\n\n    if (!_this.settings.loopActivated) {\n      _this.elements.loopBar.style.left = \"0%\";\n      _this.elements.loopBar.style.width = \"100%\";\n      _this.settings.loopStartMillisecond = 0;\n      _this.settings.loopEndMillisecond = _this.clip.duration;\n      _this.settings.loopLastPositionXPxls = 0;\n      _this.settings.loopLastPositionXPercentage = 0;\n      _this.elements.runningBar.style.width = _this.clip.runTimeInfo.currentMillisecond / _this.clip.duration * 100 + \"%\";\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL2xvb3BCdG4uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL2xvb3BCdG4uanM/N2ExZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIiksXG4gICAgZWxpZCA9IF9yZXF1aXJlLmVsaWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF90aGlzKSB7XG4gIF90aGlzLmVsZW1lbnRzLmxvb3BCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy5zZXR0aW5ncy5sb29wQWN0aXZhdGVkID0gIV90aGlzLnNldHRpbmdzLmxvb3BBY3RpdmF0ZWQ7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoXCJzdmctc2VsZWN0ZWRcIik7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyU3RhcnQuY2xhc3NMaXN0LnRvZ2dsZShcIm0tZmFkZU91dFwiKTtcblxuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJFbmQuY2xhc3NMaXN0LnRvZ2dsZShcIm0tZmFkZU91dFwiKTtcblxuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJTdGFydC5jbGFzc0xpc3QudG9nZ2xlKFwibS1mYWRlSW5cIik7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyU3RhcnQuY2xhc3NMaXN0LnRvZ2dsZShcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1oaWRlXCIpKTtcblxuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJFbmQuY2xhc3NMaXN0LnRvZ2dsZShcIm0tZmFkZUluXCIpO1xuXG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhckVuZC5jbGFzc0xpc3QudG9nZ2xlKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWhpZGVcIikpO1xuXG4gICAgZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1sb29wLXRpbWVcIikpLmNsYXNzTGlzdC50b2dnbGUoXCJtLWZhZGVPdXRcIik7XG4gICAgZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1sb29wLXRpbWVcIikpLmNsYXNzTGlzdC50b2dnbGUoXCJtLWZhZGVJblwiKTtcbiAgICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWxvb3AtdGltZVwiKSkuY2xhc3NMaXN0LnRvZ2dsZShcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1oaWRlXCIpKTtcbiAgICBfdGhpcy5lbGVtZW50cy5sb29wRW5kVGltZS5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sb29wRW5kTWlsbGlzZWNvbmQ7XG4gICAgX3RoaXMuZWxlbWVudHMubG9vcFN0YXJ0VGltZS5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sb29wU3RhcnRNaWxsaXNlY29uZDtcbiAgICBfdGhpcy5zZXR0aW5ncy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cbiAgICBpZiAoIV90aGlzLnNldHRpbmdzLmxvb3BBY3RpdmF0ZWQpIHtcbiAgICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXIuc3R5bGUubGVmdCA9IFwiMCVcIjtcbiAgICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXIuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICAgIF90aGlzLnNldHRpbmdzLmxvb3BTdGFydE1pbGxpc2Vjb25kID0gMDtcbiAgICAgIF90aGlzLnNldHRpbmdzLmxvb3BFbmRNaWxsaXNlY29uZCA9IF90aGlzLmNsaXAuZHVyYXRpb247XG4gICAgICBfdGhpcy5zZXR0aW5ncy5sb29wTGFzdFBvc2l0aW9uWFB4bHMgPSAwO1xuICAgICAgX3RoaXMuc2V0dGluZ3MubG9vcExhc3RQb3NpdGlvblhQZXJjZW50YWdlID0gMDtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnJ1bm5pbmdCYXIuc3R5bGUud2lkdGggPSBfdGhpcy5jbGlwLnJ1blRpbWVJbmZvLmN1cnJlbnRNaWxsaXNlY29uZCAvIF90aGlzLmNsaXAuZHVyYXRpb24gKiAxMDAgKyBcIiVcIjtcbiAgICB9XG4gIH07XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopBtn.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopStartEnd.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopStartEnd.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (_this) {\n  _this.listeners.editableLoopStartTime = function () {\n    _this.elements.editableLoopStartTime.value = _this.elements.loopStartTime.innerHTML;\n\n    _this.elements.loopStartTime.replaceWith(_this.elements.editableLoopStartTime);\n\n    _this.elements.editableLoopStartTime.focus();\n  };\n\n  _this.listeners.editableLoopEndTime = function () {\n    _this.elements.editableLoopEndTime.value = _this.elements.loopEndTime.innerHTML;\n\n    _this.elements.loopEndTime.replaceWith(_this.elements.editableLoopEndTime);\n\n    _this.elements.editableLoopEndTime.focus();\n  };\n\n  _this.elements.editableLoopEndTime.onkeydown = _this.elements.editableLoopStartTime.onkeydown = function (e) {\n    e.preventDefault();\n\n    if (e.keyCode === 13) {\n      _this.elements.editableLoopStartTime.onfocusout();\n\n      _this.elements.editableLoopEndTime.onfocusout();\n    }\n\n    if (e.keyCode === 8) {\n      e.target.value = e.target.value.toString().substring(0, e.target.value.toString().length - 1);\n    }\n\n    if (e.keyCode === 13) {\n      e.target.blur();\n    }\n\n    var newValue = parseFloat((e.target.value || 0).toString() + e.key);\n\n    if (newValue > _this.clip.duration) {\n      return;\n    }\n\n    e.target.value = newValue;\n\n    if (e.target === _this.elements.editableLoopStartTime) {\n      var viewportOffset = _this.elements.totalBar.getBoundingClientRect();\n\n      var event = {\n        preventDefault: function preventDefault() {},\n        clientX: _this.elements.totalBar.offsetWidth / _this.clip.duration * e.target.value + viewportOffset.left\n      };\n\n      _this.listeners.onMouseDownLoopStart(event);\n\n      _this.listeners.onCursorMoveLoopStart(event);\n\n      _this.listeners.onMouseUpLoopStart(event);\n    } else if (e.target === _this.elements.editableLoopEndTime) {\n      var _viewportOffset = _this.elements.totalBar.getBoundingClientRect();\n\n      var _event = {\n        preventDefault: function preventDefault() {},\n        clientX: _this.elements.totalBar.offsetWidth / _this.clip.duration * e.target.value + _viewportOffset.left\n      };\n\n      _this.listeners.onMouseDownLoopEnd(_event);\n\n      _this.listeners.onCursorMoveLoopEnd(_event);\n\n      _this.listeners.onMouseUpLoopEnd(_event);\n    }\n  };\n\n  _this.elements.loopStartTime.onclick = _this.listeners.editableLoopStartTime;\n  _this.elements.loopEndTime.onclick = _this.listeners.editableLoopEndTime;\n\n  _this.elements.editableLoopStartTime.onfocusout = function () {\n    _this.elements.editableLoopStartTime.replaceWith(_this.elements.loopStartTime);\n  };\n\n  _this.elements.editableLoopEndTime.onfocusout = function () {\n    _this.elements.editableLoopEndTime.replaceWith(_this.elements.loopEndTime);\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL2xvb3BTdGFydEVuZC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvbG9vcFN0YXJ0RW5kLmpzP2M3MTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF90aGlzKSB7XG4gIF90aGlzLmxpc3RlbmVycy5lZGl0YWJsZUxvb3BTdGFydFRpbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wU3RhcnRUaW1lLnZhbHVlID0gX3RoaXMuZWxlbWVudHMubG9vcFN0YXJ0VGltZS5pbm5lckhUTUw7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wU3RhcnRUaW1lLnJlcGxhY2VXaXRoKF90aGlzLmVsZW1lbnRzLmVkaXRhYmxlTG9vcFN0YXJ0VGltZSk7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BTdGFydFRpbWUuZm9jdXMoKTtcbiAgfTtcblxuICBfdGhpcy5saXN0ZW5lcnMuZWRpdGFibGVMb29wRW5kVGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BFbmRUaW1lLnZhbHVlID0gX3RoaXMuZWxlbWVudHMubG9vcEVuZFRpbWUuaW5uZXJIVE1MO1xuXG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEVuZFRpbWUucmVwbGFjZVdpdGgoX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wRW5kVGltZSk7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BFbmRUaW1lLmZvY3VzKCk7XG4gIH07XG5cbiAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wRW5kVGltZS5vbmtleWRvd24gPSBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BTdGFydFRpbWUub25rZXlkb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoZS5rZXlDb2RlID09PSAxMykge1xuICAgICAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wU3RhcnRUaW1lLm9uZm9jdXNvdXQoKTtcblxuICAgICAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wRW5kVGltZS5vbmZvY3Vzb3V0KCk7XG4gICAgfVxuXG4gICAgaWYgKGUua2V5Q29kZSA9PT0gOCkge1xuICAgICAgZS50YXJnZXQudmFsdWUgPSBlLnRhcmdldC52YWx1ZS50b1N0cmluZygpLnN1YnN0cmluZygwLCBlLnRhcmdldC52YWx1ZS50b1N0cmluZygpLmxlbmd0aCAtIDEpO1xuICAgIH1cblxuICAgIGlmIChlLmtleUNvZGUgPT09IDEzKSB7XG4gICAgICBlLnRhcmdldC5ibHVyKCk7XG4gICAgfVxuXG4gICAgdmFyIG5ld1ZhbHVlID0gcGFyc2VGbG9hdCgoZS50YXJnZXQudmFsdWUgfHwgMCkudG9TdHJpbmcoKSArIGUua2V5KTtcblxuICAgIGlmIChuZXdWYWx1ZSA+IF90aGlzLmNsaXAuZHVyYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlLnRhcmdldC52YWx1ZSA9IG5ld1ZhbHVlO1xuXG4gICAgaWYgKGUudGFyZ2V0ID09PSBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BTdGFydFRpbWUpIHtcbiAgICAgIHZhciB2aWV3cG9ydE9mZnNldCA9IF90aGlzLmVsZW1lbnRzLnRvdGFsQmFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICB2YXIgZXZlbnQgPSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHt9LFxuICAgICAgICBjbGllbnRYOiBfdGhpcy5lbGVtZW50cy50b3RhbEJhci5vZmZzZXRXaWR0aCAvIF90aGlzLmNsaXAuZHVyYXRpb24gKiBlLnRhcmdldC52YWx1ZSArIHZpZXdwb3J0T2Zmc2V0LmxlZnRcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlRG93bkxvb3BTdGFydChldmVudCk7XG5cbiAgICAgIF90aGlzLmxpc3RlbmVycy5vbkN1cnNvck1vdmVMb29wU3RhcnQoZXZlbnQpO1xuXG4gICAgICBfdGhpcy5saXN0ZW5lcnMub25Nb3VzZVVwTG9vcFN0YXJ0KGV2ZW50KTtcbiAgICB9IGVsc2UgaWYgKGUudGFyZ2V0ID09PSBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BFbmRUaW1lKSB7XG4gICAgICB2YXIgX3ZpZXdwb3J0T2Zmc2V0ID0gX3RoaXMuZWxlbWVudHMudG90YWxCYXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgIHZhciBfZXZlbnQgPSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHt9LFxuICAgICAgICBjbGllbnRYOiBfdGhpcy5lbGVtZW50cy50b3RhbEJhci5vZmZzZXRXaWR0aCAvIF90aGlzLmNsaXAuZHVyYXRpb24gKiBlLnRhcmdldC52YWx1ZSArIF92aWV3cG9ydE9mZnNldC5sZWZ0XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5saXN0ZW5lcnMub25Nb3VzZURvd25Mb29wRW5kKF9ldmVudCk7XG5cbiAgICAgIF90aGlzLmxpc3RlbmVycy5vbkN1cnNvck1vdmVMb29wRW5kKF9ldmVudCk7XG5cbiAgICAgIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlVXBMb29wRW5kKF9ldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLmxvb3BTdGFydFRpbWUub25jbGljayA9IF90aGlzLmxpc3RlbmVycy5lZGl0YWJsZUxvb3BTdGFydFRpbWU7XG4gIF90aGlzLmVsZW1lbnRzLmxvb3BFbmRUaW1lLm9uY2xpY2sgPSBfdGhpcy5saXN0ZW5lcnMuZWRpdGFibGVMb29wRW5kVGltZTtcblxuICBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BTdGFydFRpbWUub25mb2N1c291dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BTdGFydFRpbWUucmVwbGFjZVdpdGgoX3RoaXMuZWxlbWVudHMubG9vcFN0YXJ0VGltZSk7XG4gIH07XG5cbiAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wRW5kVGltZS5vbmZvY3Vzb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgIF90aGlzLmVsZW1lbnRzLmVkaXRhYmxlTG9vcEVuZFRpbWUucmVwbGFjZVdpdGgoX3RoaXMuZWxlbWVudHMubG9vcEVuZFRpbWUpO1xuICB9O1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/listeners/loopStartEnd.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/listeners/preview.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/listeners/preview.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"../node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    elid = _require.elid,\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // only on desctop devices\n  if (!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n    var loopBarMouseInOut = function loopBarMouseInOut() {\n      if (!_this.options.preview) {\n        return;\n      }\n\n      elid(\"\".concat(_this.name, \"-hover-display\")).classList.toggle(\"m-fadeOut\");\n      elid(\"\".concat(_this.name, \"-hover-display\")).classList.toggle(\"m-fadeIn\"); // elid(`${_this.name}-hover-display`).classList.toggle(\n      //   `${_this.name}-hide`\n      // );\n      // if (elid(`${_this.name}-hover-display`).className.includes(`m-fadeIn`)) {\n      //   _this.previewJourney = hoverTimeCapsule.startJourney(_this.previewClip);\n      // } else {\n      //   _this.previewJourney.destination();\n      // }\n\n      _this.elements.loopBar.onmousemove = loopBarMouseMove;\n    };\n\n    var loopBarAddListeners = function loopBarAddListeners() {\n      if (!_this.options.preview) {\n        return;\n      }\n\n      loopBarMouseInOut();\n      _this.elements.loopBar.onmouseover = _this.elements.loopBar.onmouseout = loopBarMouseInOut;\n      _this.elements.loopBar.onmousemove = loopBarMouseMove;\n      removeListener(\"mouseup\", loopBarAddListeners, false);\n      removeListener(\"touchend\", loopBarAddListeners, false);\n      removeListener(\"mousemove\", loopBarMouseMove, false);\n      removeListener(\"touchmove\", loopBarMouseMove, false);\n    };\n\n    _this.elements.loopBar.onmouseover = _this.elements.loopBar.onmouseout = loopBarMouseInOut;\n\n    _this.elements.loopBar.onmousedown = function () {\n      if (!_this.options.preview) {\n        return;\n      }\n\n      _this.elements.loopBar.onmouseover = _this.elements.loopBar.onmouseout = null;\n      _this.elements.loopBar.onmousemove = null;\n      addListener(\"mouseup\", loopBarAddListeners, false);\n      addListener(\"touchend\", loopBarAddListeners, false);\n      addListener(\"mousemove\", loopBarMouseMove, false);\n      addListener(\"touchmove\", loopBarMouseMove, false);\n    };\n\n    _this.elements.loopBar.onmouseup = function () {\n      if (!_this.options.preview) {\n        return;\n      }\n\n      removeListener(\"mouseup\", loopBarAddListeners, false);\n      removeListener(\"touchend\", loopBarAddListeners, false);\n      removeListener(\"mousemove\", loopBarMouseMove, false);\n      removeListener(\"touchmove\", loopBarMouseMove, false);\n      _this.elements.loopBar.onmouseover = _this.elements.loopBar.onmouseout = loopBarMouseInOut;\n      _this.elements.loopBar.onmousemove = loopBarMouseMove;\n    };\n\n    var loopBarMouseMove = function loopBarMouseMove(e) {\n      var clientX = e.clientX;\n\n      var viewportOffset = _this.elements.loopBar.getBoundingClientRect();\n\n      if (clientX - viewportOffset.left + _this.settings.loopLastPositionXPxls > _this.settings.loopLastPositionXPxls + _this.elements.loopBar.offsetWidth && !_this.settings.resizeLoop) {\n        elid(\"\".concat(_this.name, \"-hover-millisecond\")).innerHTML = _this.settings.loopEndMillisecond;\n        return;\n      } else if (clientX - viewportOffset.left < 0 && !_this.settings.resizeLoop) {\n        elid(\"\".concat(_this.name, \"-hover-millisecond\")).innerHTML = _this.settings.loopStartMillisecond;\n        return;\n      }\n\n      var positionX = clientX - viewportOffset.left + _this.settings.loopLastPositionXPxls;\n\n      if (positionX < 0) {\n        positionX = 0;\n      }\n\n      var previewWidth = elid(\"\".concat(_this.name, \"-hover-display\")).offsetWidth * _this.previewScale;\n\n      var halfPreviewWidth = previewWidth / 2;\n      var clipWidth = elid(\"\".concat(_this.name, \"-hover-display\")).offsetWidth;\n      var halfClipWidth = clipWidth / 2; // console.log(\n      //   elid(`${_this.name}-hover-display`).offsetWidth,\n      //   _this.previewScale,\n      //   positionX,\n      //   clipWidth,\n      //   halfClipWidth,\n      //   previewWidth,\n      //   halfPreviewWidth\n      // );\n\n      var left = positionX - halfClipWidth; // console.log(left, halfClipWidth);\n\n      if (positionX - halfPreviewWidth < 0) {\n        left = 0 - (previewWidth + halfPreviewWidth);\n      } else if (positionX + halfPreviewWidth > _this.elements.totalBar.offsetWidth) {\n        left = _this.elements.totalBar.offsetWidth - halfClipWidth - halfPreviewWidth;\n      }\n\n      var ms = Math.round(positionX / _this.elements.totalBar.offsetWidth * _this.clip.duration);\n\n      if (_this.options.preview) {\n        var fraction = ms / _this.clip.duration;\n\n        _this.previewClip.onProgress(fraction, ms);\n      }\n\n      elid(\"\".concat(_this.name, \"-hover-millisecond\")).innerHTML = ms;\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.left = left + \"px\";\n    };\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL3ByZXZpZXcuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL3ByZXZpZXcuanM/ZGQ5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIiksXG4gICAgZWxpZCA9IF9yZXF1aXJlLmVsaWQsXG4gICAgYWRkTGlzdGVuZXIgPSBfcmVxdWlyZS5hZGRMaXN0ZW5lcixcbiAgICByZW1vdmVMaXN0ZW5lciA9IF9yZXF1aXJlLnJlbW92ZUxpc3RlbmVyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChfdGhpcykge1xuICAvLyBvbmx5IG9uIGRlc2N0b3AgZGV2aWNlc1xuICBpZiAoIS9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgIHZhciBsb29wQmFyTW91c2VJbk91dCA9IGZ1bmN0aW9uIGxvb3BCYXJNb3VzZUluT3V0KCkge1xuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnByZXZpZXcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWhvdmVyLWRpc3BsYXlcIikpLmNsYXNzTGlzdC50b2dnbGUoXCJtLWZhZGVPdXRcIik7XG4gICAgICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWhvdmVyLWRpc3BsYXlcIikpLmNsYXNzTGlzdC50b2dnbGUoXCJtLWZhZGVJblwiKTsgLy8gZWxpZChgJHtfdGhpcy5uYW1lfS1ob3Zlci1kaXNwbGF5YCkuY2xhc3NMaXN0LnRvZ2dsZShcbiAgICAgIC8vICAgYCR7X3RoaXMubmFtZX0taGlkZWBcbiAgICAgIC8vICk7XG4gICAgICAvLyBpZiAoZWxpZChgJHtfdGhpcy5uYW1lfS1ob3Zlci1kaXNwbGF5YCkuY2xhc3NOYW1lLmluY2x1ZGVzKGBtLWZhZGVJbmApKSB7XG4gICAgICAvLyAgIF90aGlzLnByZXZpZXdKb3VybmV5ID0gaG92ZXJUaW1lQ2Fwc3VsZS5zdGFydEpvdXJuZXkoX3RoaXMucHJldmlld0NsaXApO1xuICAgICAgLy8gfSBlbHNlIHtcbiAgICAgIC8vICAgX3RoaXMucHJldmlld0pvdXJuZXkuZGVzdGluYXRpb24oKTtcbiAgICAgIC8vIH1cblxuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlbW92ZSA9IGxvb3BCYXJNb3VzZU1vdmU7XG4gICAgfTtcblxuICAgIHZhciBsb29wQmFyQWRkTGlzdGVuZXJzID0gZnVuY3Rpb24gbG9vcEJhckFkZExpc3RlbmVycygpIHtcbiAgICAgIGlmICghX3RoaXMub3B0aW9ucy5wcmV2aWV3KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbG9vcEJhck1vdXNlSW5PdXQoKTtcbiAgICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXIub25tb3VzZW92ZXIgPSBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2VvdXQgPSBsb29wQmFyTW91c2VJbk91dDtcbiAgICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXIub25tb3VzZW1vdmUgPSBsb29wQmFyTW91c2VNb3ZlO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoXCJtb3VzZXVwXCIsIGxvb3BCYXJBZGRMaXN0ZW5lcnMsIGZhbHNlKTtcbiAgICAgIHJlbW92ZUxpc3RlbmVyKFwidG91Y2hlbmRcIiwgbG9vcEJhckFkZExpc3RlbmVycywgZmFsc2UpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgbG9vcEJhck1vdXNlTW92ZSwgZmFsc2UpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgbG9vcEJhck1vdXNlTW92ZSwgZmFsc2UpO1xuICAgIH07XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2VvdmVyID0gX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlb3V0ID0gbG9vcEJhck1vdXNlSW5PdXQ7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2Vkb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnByZXZpZXcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2VvdmVyID0gX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlb3V0ID0gbnVsbDtcbiAgICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXIub25tb3VzZW1vdmUgPSBudWxsO1xuICAgICAgYWRkTGlzdGVuZXIoXCJtb3VzZXVwXCIsIGxvb3BCYXJBZGRMaXN0ZW5lcnMsIGZhbHNlKTtcbiAgICAgIGFkZExpc3RlbmVyKFwidG91Y2hlbmRcIiwgbG9vcEJhckFkZExpc3RlbmVycywgZmFsc2UpO1xuICAgICAgYWRkTGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgbG9vcEJhck1vdXNlTW92ZSwgZmFsc2UpO1xuICAgICAgYWRkTGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgbG9vcEJhck1vdXNlTW92ZSwgZmFsc2UpO1xuICAgIH07XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2V1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMub3B0aW9ucy5wcmV2aWV3KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVtb3ZlTGlzdGVuZXIoXCJtb3VzZXVwXCIsIGxvb3BCYXJBZGRMaXN0ZW5lcnMsIGZhbHNlKTtcbiAgICAgIHJlbW92ZUxpc3RlbmVyKFwidG91Y2hlbmRcIiwgbG9vcEJhckFkZExpc3RlbmVycywgZmFsc2UpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgbG9vcEJhck1vdXNlTW92ZSwgZmFsc2UpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgbG9vcEJhck1vdXNlTW92ZSwgZmFsc2UpO1xuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlb3ZlciA9IF90aGlzLmVsZW1lbnRzLmxvb3BCYXIub25tb3VzZW91dCA9IGxvb3BCYXJNb3VzZUluT3V0O1xuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlbW92ZSA9IGxvb3BCYXJNb3VzZU1vdmU7XG4gICAgfTtcblxuICAgIHZhciBsb29wQmFyTW91c2VNb3ZlID0gZnVuY3Rpb24gbG9vcEJhck1vdXNlTW92ZShlKSB7XG4gICAgICB2YXIgY2xpZW50WCA9IGUuY2xpZW50WDtcblxuICAgICAgdmFyIHZpZXdwb3J0T2Zmc2V0ID0gX3RoaXMuZWxlbWVudHMubG9vcEJhci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgaWYgKGNsaWVudFggLSB2aWV3cG9ydE9mZnNldC5sZWZ0ICsgX3RoaXMuc2V0dGluZ3MubG9vcExhc3RQb3NpdGlvblhQeGxzID4gX3RoaXMuc2V0dGluZ3MubG9vcExhc3RQb3NpdGlvblhQeGxzICsgX3RoaXMuZWxlbWVudHMubG9vcEJhci5vZmZzZXRXaWR0aCAmJiAhX3RoaXMuc2V0dGluZ3MucmVzaXplTG9vcCkge1xuICAgICAgICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWhvdmVyLW1pbGxpc2Vjb25kXCIpKS5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sb29wRW5kTWlsbGlzZWNvbmQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAoY2xpZW50WCAtIHZpZXdwb3J0T2Zmc2V0LmxlZnQgPCAwICYmICFfdGhpcy5zZXR0aW5ncy5yZXNpemVMb29wKSB7XG4gICAgICAgIGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItaG92ZXItbWlsbGlzZWNvbmRcIikpLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxvb3BTdGFydE1pbGxpc2Vjb25kO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwb3NpdGlvblggPSBjbGllbnRYIC0gdmlld3BvcnRPZmZzZXQubGVmdCArIF90aGlzLnNldHRpbmdzLmxvb3BMYXN0UG9zaXRpb25YUHhscztcblxuICAgICAgaWYgKHBvc2l0aW9uWCA8IDApIHtcbiAgICAgICAgcG9zaXRpb25YID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZpZXdXaWR0aCA9IGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItaG92ZXItZGlzcGxheVwiKSkub2Zmc2V0V2lkdGggKiBfdGhpcy5wcmV2aWV3U2NhbGU7XG5cbiAgICAgIHZhciBoYWxmUHJldmlld1dpZHRoID0gcHJldmlld1dpZHRoIC8gMjtcbiAgICAgIHZhciBjbGlwV2lkdGggPSBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWhvdmVyLWRpc3BsYXlcIikpLm9mZnNldFdpZHRoO1xuICAgICAgdmFyIGhhbGZDbGlwV2lkdGggPSBjbGlwV2lkdGggLyAyOyAvLyBjb25zb2xlLmxvZyhcbiAgICAgIC8vICAgZWxpZChgJHtfdGhpcy5uYW1lfS1ob3Zlci1kaXNwbGF5YCkub2Zmc2V0V2lkdGgsXG4gICAgICAvLyAgIF90aGlzLnByZXZpZXdTY2FsZSxcbiAgICAgIC8vICAgcG9zaXRpb25YLFxuICAgICAgLy8gICBjbGlwV2lkdGgsXG4gICAgICAvLyAgIGhhbGZDbGlwV2lkdGgsXG4gICAgICAvLyAgIHByZXZpZXdXaWR0aCxcbiAgICAgIC8vICAgaGFsZlByZXZpZXdXaWR0aFxuICAgICAgLy8gKTtcblxuICAgICAgdmFyIGxlZnQgPSBwb3NpdGlvblggLSBoYWxmQ2xpcFdpZHRoOyAvLyBjb25zb2xlLmxvZyhsZWZ0LCBoYWxmQ2xpcFdpZHRoKTtcblxuICAgICAgaWYgKHBvc2l0aW9uWCAtIGhhbGZQcmV2aWV3V2lkdGggPCAwKSB7XG4gICAgICAgIGxlZnQgPSAwIC0gKHByZXZpZXdXaWR0aCArIGhhbGZQcmV2aWV3V2lkdGgpO1xuICAgICAgfSBlbHNlIGlmIChwb3NpdGlvblggKyBoYWxmUHJldmlld1dpZHRoID4gX3RoaXMuZWxlbWVudHMudG90YWxCYXIub2Zmc2V0V2lkdGgpIHtcbiAgICAgICAgbGVmdCA9IF90aGlzLmVsZW1lbnRzLnRvdGFsQmFyLm9mZnNldFdpZHRoIC0gaGFsZkNsaXBXaWR0aCAtIGhhbGZQcmV2aWV3V2lkdGg7XG4gICAgICB9XG5cbiAgICAgIHZhciBtcyA9IE1hdGgucm91bmQocG9zaXRpb25YIC8gX3RoaXMuZWxlbWVudHMudG90YWxCYXIub2Zmc2V0V2lkdGggKiBfdGhpcy5jbGlwLmR1cmF0aW9uKTtcblxuICAgICAgaWYgKF90aGlzLm9wdGlvbnMucHJldmlldykge1xuICAgICAgICB2YXIgZnJhY3Rpb24gPSBtcyAvIF90aGlzLmNsaXAuZHVyYXRpb247XG5cbiAgICAgICAgX3RoaXMucHJldmlld0NsaXAub25Qcm9ncmVzcyhmcmFjdGlvbiwgbXMpO1xuICAgICAgfVxuXG4gICAgICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWhvdmVyLW1pbGxpc2Vjb25kXCIpKS5pbm5lckhUTUwgPSBtcztcbiAgICAgIGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItaG92ZXItZGlzcGxheVwiKSkuc3R5bGUubGVmdCA9IGxlZnQgKyBcInB4XCI7XG4gICAgfTtcbiAgfVxufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/listeners/preview.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/listeners/progressBar.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/listeners/progressBar.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"../node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // let pe = false;\n  _this.listeners.onCursorMove = function (e) {\n    e.preventDefault();\n    var clientX = e.clientX || ((e.touches || [])[0] || {}).clientX;\n\n    var viewportOffset = _this.elements.loopBar.getBoundingClientRect();\n\n    var positionX = clientX - viewportOffset.left;\n\n    if (positionX < 0) {\n      positionX = 0;\n    } else if (positionX > _this.elements.loopBar.offsetWidth) {\n      positionX = _this.elements.loopBar.offsetWidth;\n    }\n\n    _this.handleDrag(positionX);\n  };\n\n  _this.listeners.onMouseUp = function () {\n    _this.elements.listenerHelper.style.pointerEvents = \"none\";\n    removeListener(\"mouseup\", _this.listeners.onMouseUp, false);\n    removeListener(\"touchend\", _this.listeners.onMouseUp, false);\n    removeListener(\"mousemove\", _this.listeners.onCursorMove, false);\n    removeListener(\"touchmove\", _this.listeners.onCursorMove, false);\n\n    _this.handleDragEnd(_this.settings);\n  };\n\n  _this.listeners.onMouseDown = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\";\n\n    if (_this.clip.runTimeInfo.state === \"playing\") {\n      _this.settings.playAfterResize = true;\n    }\n\n    _this.handleDragStart(_this.clip);\n\n    _this.listeners.onCursorMove(e);\n\n    addListener(\"mouseup\", _this.listeners.onMouseUp, false);\n    addListener(\"touchend\", _this.listeners.onMouseUp, false);\n    addListener(\"mousemove\", _this.listeners.onCursorMove, false);\n    addListener(\"touchmove\", _this.listeners.onCursorMove, false);\n  };\n\n  _this.elements.loopBar.addEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n  _this.elements.loopBar.addEventListener(\"touchstart\", _this.listeners.onMouseDown, {\n    passive: false\n  }, false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL3Byb2dyZXNzQmFyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4LXBsYXllci9kaXN0L2xpc3RlbmVycy9wcm9ncmVzc0Jhci5qcz80NzU3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKFwiLi4vaGVscGVyc1wiKSxcbiAgICBhZGRMaXN0ZW5lciA9IF9yZXF1aXJlLmFkZExpc3RlbmVyLFxuICAgIHJlbW92ZUxpc3RlbmVyID0gX3JlcXVpcmUucmVtb3ZlTGlzdGVuZXI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF90aGlzKSB7XG4gIC8vIGxldCBwZSA9IGZhbHNlO1xuICBfdGhpcy5saXN0ZW5lcnMub25DdXJzb3JNb3ZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdmFyIGNsaWVudFggPSBlLmNsaWVudFggfHwgKChlLnRvdWNoZXMgfHwgW10pWzBdIHx8IHt9KS5jbGllbnRYO1xuXG4gICAgdmFyIHZpZXdwb3J0T2Zmc2V0ID0gX3RoaXMuZWxlbWVudHMubG9vcEJhci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIHZhciBwb3NpdGlvblggPSBjbGllbnRYIC0gdmlld3BvcnRPZmZzZXQubGVmdDtcblxuICAgIGlmIChwb3NpdGlvblggPCAwKSB7XG4gICAgICBwb3NpdGlvblggPSAwO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb25YID4gX3RoaXMuZWxlbWVudHMubG9vcEJhci5vZmZzZXRXaWR0aCkge1xuICAgICAgcG9zaXRpb25YID0gX3RoaXMuZWxlbWVudHMubG9vcEJhci5vZmZzZXRXaWR0aDtcbiAgICB9XG5cbiAgICBfdGhpcy5oYW5kbGVEcmFnKHBvc2l0aW9uWCk7XG4gIH07XG5cbiAgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VVcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy5lbGVtZW50cy5saXN0ZW5lckhlbHBlci5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG4gICAgcmVtb3ZlTGlzdGVuZXIoXCJtb3VzZXVwXCIsIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlVXAsIGZhbHNlKTtcbiAgICByZW1vdmVMaXN0ZW5lcihcInRvdWNoZW5kXCIsIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlVXAsIGZhbHNlKTtcbiAgICByZW1vdmVMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBfdGhpcy5saXN0ZW5lcnMub25DdXJzb3JNb3ZlLCBmYWxzZSk7XG4gICAgcmVtb3ZlTGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgX3RoaXMubGlzdGVuZXJzLm9uQ3Vyc29yTW92ZSwgZmFsc2UpO1xuXG4gICAgX3RoaXMuaGFuZGxlRHJhZ0VuZChfdGhpcy5zZXR0aW5ncyk7XG4gIH07XG5cbiAgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VEb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICBfdGhpcy5lbGVtZW50cy5saXN0ZW5lckhlbHBlci5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhdXRvXCI7XG5cbiAgICBpZiAoX3RoaXMuY2xpcC5ydW5UaW1lSW5mby5zdGF0ZSA9PT0gXCJwbGF5aW5nXCIpIHtcbiAgICAgIF90aGlzLnNldHRpbmdzLnBsYXlBZnRlclJlc2l6ZSA9IHRydWU7XG4gICAgfVxuXG4gICAgX3RoaXMuaGFuZGxlRHJhZ1N0YXJ0KF90aGlzLmNsaXApO1xuXG4gICAgX3RoaXMubGlzdGVuZXJzLm9uQ3Vyc29yTW92ZShlKTtcblxuICAgIGFkZExpc3RlbmVyKFwibW91c2V1cFwiLCBfdGhpcy5saXN0ZW5lcnMub25Nb3VzZVVwLCBmYWxzZSk7XG4gICAgYWRkTGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBfdGhpcy5saXN0ZW5lcnMub25Nb3VzZVVwLCBmYWxzZSk7XG4gICAgYWRkTGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgX3RoaXMubGlzdGVuZXJzLm9uQ3Vyc29yTW92ZSwgZmFsc2UpO1xuICAgIGFkZExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIF90aGlzLmxpc3RlbmVycy5vbkN1cnNvck1vdmUsIGZhbHNlKTtcbiAgfTtcblxuICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VEb3duLCBmYWxzZSk7XG5cbiAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBfdGhpcy5saXN0ZW5lcnMub25Nb3VzZURvd24sIHtcbiAgICBwYXNzaXZlOiBmYWxzZVxuICB9LCBmYWxzZSk7XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/listeners/progressBar.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/listeners/settings.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/listeners/settings.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"../node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    elid = _require.elid,\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  _this.elements.settingsShowIndicator.onclick = function (e) {\n    e.preventDefault();\n    var checkbox = elid(\"\".concat(_this.name, \"-show-indicator-checkbox\"));\n\n    if (checkbox.checked) {\n      checkbox.checked = false;\n      _this.elements.indicator.style.visibility = \"hidden\";\n    } else {\n      checkbox.checked = true;\n      _this.elements.indicator.style.visibility = \"visible\";\n    }\n  };\n\n  _this.elements.settingsPointerEvents.onclick = function (e) {\n    e.preventDefault();\n    var checkbox = elid(\"\".concat(_this.name, \"-pointer-events-checkbox\"));\n\n    if (checkbox.checked) {\n      checkbox.checked = false;\n      _this.options.pointerEvents = false;\n      _this.elements.mcPlayer.style.pointerEvents = \"none\";\n      _this.elements.pointerEventPanel.style.pointerEvents = \"none\";\n      elid(\"\".concat(_this.name, \"-controls\")).style.pointerEvents = \"auto\";\n      _this.elements.settingsPanel.style.pointerEvents = \"auto\";\n    } else {\n      checkbox.checked = true;\n      _this.elements.mcPlayer.style.pointerEvents = \"none\";\n      _this.elements.pointerEventPanel.style.pointerEvents = \"auto\";\n      elid(\"\".concat(_this.name, \"-controls\")).style.pointerEvents = \"auto\";\n      _this.elements.settingsPanel.style.pointerEvents = \"auto\";\n    }\n  };\n\n  _this.elements.settingsShowVolume.onclick = function (e) {\n    e.preventDefault();\n\n    _this.elements.volumeControl.classList.toggle(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.volumeControl.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n    var checkbox = elid(\"\".concat(_this.name, \"-show-volume-checkbox\"));\n\n    if (checkbox.checked) {\n      checkbox.checked = false;\n      _this.elements.volumeControl.style.visibility = \"hidden\";\n      _this.elements.timeDisplay.style.left = \"45px\";\n    } else {\n      checkbox.checked = true;\n      _this.elements.volumeControl.style.visibility = \"visible\";\n      _this.elements.timeDisplay.style.left = \"\";\n    }\n  };\n\n  _this.elements.settingsShowPreview.onclick = function (e) {\n    e.preventDefault();\n    var checkbox = elid(\"\".concat(_this.name, \"-show-preview-checkbox\"));\n\n    if (checkbox.checked) {\n      checkbox.checked = false;\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.visibility = \"hidden\";\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.display = \"none\";\n      _this.options.preview = false;\n    } else {\n      if (!_this.previewClip) {\n        _this.createPreviewDisplay();\n      }\n\n      checkbox.checked = true;\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.visibility = \"visible\";\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.display = \"flex\";\n      _this.options.preview = true;\n    }\n  };\n\n  _this.elements.settingsButton.onclick = function (e) {\n    e.preventDefault();\n\n    var showHideSettings = function showHideSettings(e) {\n      if (_this.elements.settingsPanel.contains(e.target)) {\n        return true;\n      }\n\n      _this.elements.settingsPanel.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n      _this.elements.settingsPanel.classList.toggle(\"m-fadeOut\");\n\n      _this.elements.settingsPanel.classList.toggle(\"m-fadeIn\");\n\n      if (_this.elements.settingsPanel.className.includes(\"m-fadeOut\")) {\n        removeListener(\"click\", showHideSettings, false);\n      }\n    };\n\n    if (_this.elements.settingsPanel.className.includes(\"m-fadeOut\")) {\n      addListener(\"click\", showHideSettings, false);\n    } else {\n      removeListener(\"click\", showHideSettings, false);\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL3NldHRpbmdzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4LXBsYXllci9kaXN0L2xpc3RlbmVycy9zZXR0aW5ncy5qcz9kMjUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKFwiLi4vaGVscGVyc1wiKSxcbiAgICBlbGlkID0gX3JlcXVpcmUuZWxpZCxcbiAgICBhZGRMaXN0ZW5lciA9IF9yZXF1aXJlLmFkZExpc3RlbmVyLFxuICAgIHJlbW92ZUxpc3RlbmVyID0gX3JlcXVpcmUucmVtb3ZlTGlzdGVuZXI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF90aGlzKSB7XG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzU2hvd0luZGljYXRvci5vbmNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdmFyIGNoZWNrYm94ID0gZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1zaG93LWluZGljYXRvci1jaGVja2JveFwiKSk7XG5cbiAgICBpZiAoY2hlY2tib3guY2hlY2tlZCkge1xuICAgICAgY2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgX3RoaXMuZWxlbWVudHMuaW5kaWNhdG9yLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgIF90aGlzLmVsZW1lbnRzLmluZGljYXRvci5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG4gICAgfVxuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUG9pbnRlckV2ZW50cy5vbmNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdmFyIGNoZWNrYm94ID0gZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1wb2ludGVyLWV2ZW50cy1jaGVja2JveFwiKSk7XG5cbiAgICBpZiAoY2hlY2tib3guY2hlY2tlZCkge1xuICAgICAgY2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgX3RoaXMub3B0aW9ucy5wb2ludGVyRXZlbnRzID0gZmFsc2U7XG4gICAgICBfdGhpcy5lbGVtZW50cy5tY1BsYXllci5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG4gICAgICBfdGhpcy5lbGVtZW50cy5wb2ludGVyRXZlbnRQYW5lbC5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG4gICAgICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWNvbnRyb2xzXCIpKS5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhdXRvXCI7XG4gICAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcImF1dG9cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHRydWU7XG4gICAgICBfdGhpcy5lbGVtZW50cy5tY1BsYXllci5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG4gICAgICBfdGhpcy5lbGVtZW50cy5wb2ludGVyRXZlbnRQYW5lbC5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhdXRvXCI7XG4gICAgICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWNvbnRyb2xzXCIpKS5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhdXRvXCI7XG4gICAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcImF1dG9cIjtcbiAgICB9XG4gIH07XG5cbiAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NTaG93Vm9sdW1lLm9uY2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUNvbnRyb2wuY2xhc3NMaXN0LnRvZ2dsZShcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi12b2x1bWUtd2lkdGgtdHJhbnNpdGlvblwiKSk7XG5cbiAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVDb250cm9sLmNsYXNzTGlzdC50b2dnbGUoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItaGlkZVwiKSk7XG5cbiAgICB2YXIgY2hlY2tib3ggPSBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLXNob3ctdm9sdW1lLWNoZWNrYm94XCIpKTtcblxuICAgIGlmIChjaGVja2JveC5jaGVja2VkKSB7XG4gICAgICBjaGVja2JveC5jaGVja2VkID0gZmFsc2U7XG4gICAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVDb250cm9sLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgX3RoaXMuZWxlbWVudHMudGltZURpc3BsYXkuc3R5bGUubGVmdCA9IFwiNDVweFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUNvbnRyb2wuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuICAgICAgX3RoaXMuZWxlbWVudHMudGltZURpc3BsYXkuc3R5bGUubGVmdCA9IFwiXCI7XG4gICAgfVxuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzU2hvd1ByZXZpZXcub25jbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBjaGVja2JveCA9IGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItc2hvdy1wcmV2aWV3LWNoZWNrYm94XCIpKTtcblxuICAgIGlmIChjaGVja2JveC5jaGVja2VkKSB7XG4gICAgICBjaGVja2JveC5jaGVja2VkID0gZmFsc2U7XG4gICAgICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLWhvdmVyLWRpc3BsYXlcIikpLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1ob3Zlci1kaXNwbGF5XCIpKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICBfdGhpcy5vcHRpb25zLnByZXZpZXcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFfdGhpcy5wcmV2aWV3Q2xpcCkge1xuICAgICAgICBfdGhpcy5jcmVhdGVQcmV2aWV3RGlzcGxheSgpO1xuICAgICAgfVxuXG4gICAgICBjaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgIGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItaG92ZXItZGlzcGxheVwiKSkuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuICAgICAgZWxpZChcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1ob3Zlci1kaXNwbGF5XCIpKS5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICBfdGhpcy5vcHRpb25zLnByZXZpZXcgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc0J1dHRvbi5vbmNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB2YXIgc2hvd0hpZGVTZXR0aW5ncyA9IGZ1bmN0aW9uIHNob3dIaWRlU2V0dGluZ3MoZSkge1xuICAgICAgaWYgKF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUGFuZWwuY29udGFpbnMoZS50YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLmNsYXNzTGlzdC50b2dnbGUoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItaGlkZVwiKSk7XG5cbiAgICAgIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUGFuZWwuY2xhc3NMaXN0LnRvZ2dsZShcIm0tZmFkZU91dFwiKTtcblxuICAgICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NQYW5lbC5jbGFzc0xpc3QudG9nZ2xlKFwibS1mYWRlSW5cIik7XG5cbiAgICAgIGlmIChfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLmNsYXNzTmFtZS5pbmNsdWRlcyhcIm0tZmFkZU91dFwiKSkge1xuICAgICAgICByZW1vdmVMaXN0ZW5lcihcImNsaWNrXCIsIHNob3dIaWRlU2V0dGluZ3MsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUGFuZWwuY2xhc3NOYW1lLmluY2x1ZGVzKFwibS1mYWRlT3V0XCIpKSB7XG4gICAgICBhZGRMaXN0ZW5lcihcImNsaWNrXCIsIHNob3dIaWRlU2V0dGluZ3MsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoXCJjbGlja1wiLCBzaG93SGlkZVNldHRpbmdzLCBmYWxzZSk7XG4gICAgfVxuICB9O1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/listeners/settings.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/listeners/speed.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/listeners/speed.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"../node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    elid = _require.elid,\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // const pe = false;\n  _this.elements.settingsSpeedButtonShow.onclick = _this.elements.settingsSpeedButtonHide.onclick = function (e) {\n    e.preventDefault();\n\n    _this.elements.settingsPanel.classList.toggle(\"\".concat(_this.name, \"-settings-speed-panel\"));\n\n    var includesClass = _this.elements.settingsPanel.className.includes(\"\".concat(_this.name, \"-settings-speed-panel\"));\n\n    if (includesClass) {\n      _this.elements.settingsMainPanel.style.display = \"none\";\n      _this.elements.settingsSpeedPanel.style.display = \"block\";\n    } else {\n      _this.elements.settingsSpeedPanel.style.display = \"none\";\n      _this.elements.settingsMainPanel.style.display = \"block\";\n    }\n  };\n\n  var onCursorMoveSpeedBar = function onCursorMoveSpeedBar(e) {\n    e.preventDefault();\n\n    var viewportOffset = _this.elements.speedBar.getBoundingClientRect();\n\n    var clientY = e.clientY || ((e.touches || [])[0] || {}).clientY;\n    var positionY = clientY - viewportOffset.top;\n    positionY -= 8;\n\n    if (positionY < 0) {\n      positionY = 0;\n    } else if (positionY > _this.elements.speedBar.offsetHeight - 16) {\n      positionY = _this.elements.speedBar.offsetHeight - 16;\n    }\n\n    positionY = Math.floor(positionY); // show speed\n\n    var percentage = (positionY / ((_this.options.speedValues.length - 1) * 16) - 1) * -1;\n    var step = 1 / (_this.options.speedValues.length - 1);\n\n    var speed = _this.calculateSpeed(step, _this.options.speedValues, percentage);\n\n    elid(\"\".concat(_this.name, \"-speed-runtime\")).innerHTML = speed + \"0\";\n    elid(\"\".concat(_this.name, \"-speed-cursor\")).style.top = positionY + \"px\";\n    _this.clip.executionSpeed = speed;\n  };\n\n  var onMouseUpSpeedBar = function onMouseUpSpeedBar(e) {\n    // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n    _this.elements.listenerHelper.style.pointerEvents = \"none\";\n    e.preventDefault();\n    removeListener(\"mouseup\", onMouseUpSpeedBar, false);\n    removeListener(\"touchend\", onMouseUpSpeedBar, false);\n    removeListener(\"mousemove\", onCursorMoveSpeedBar, false);\n    removeListener(\"touchmove\", onCursorMoveSpeedBar, false);\n    elid(\"\".concat(_this.name, \"-speed-runtime\")).innerHTML = \"Speed\";\n    var speedDisplay;\n    _this.clip.speed == 1 ? speedDisplay = \"Normal\" : speedDisplay = _this.clip.speed;\n    _this.elements.speedCurrent.innerHTML = speedDisplay;\n  };\n\n  var onMouseDownSpeedBar = function onMouseDownSpeedBar(e) {\n    // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\";\n    e.preventDefault();\n    onCursorMoveSpeedBar(e);\n    addListener(\"mouseup\", onMouseUpSpeedBar, false);\n    addListener(\"touchend\", onMouseUpSpeedBar, false);\n    addListener(\"mousemove\", onCursorMoveSpeedBar, false);\n    addListener(\"touchmove\", onCursorMoveSpeedBar, false);\n  };\n\n  _this.elements.speedBarHelper.addEventListener(\"mousedown\", onMouseDownSpeedBar, false);\n\n  _this.elements.speedBarHelper.addEventListener(\"touchstart\", onMouseDownSpeedBar, {\n    passive: false\n  }, false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL3NwZWVkLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4LXBsYXllci9kaXN0L2xpc3RlbmVycy9zcGVlZC5qcz9hNDc5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKFwiLi4vaGVscGVyc1wiKSxcbiAgICBlbGlkID0gX3JlcXVpcmUuZWxpZCxcbiAgICBhZGRMaXN0ZW5lciA9IF9yZXF1aXJlLmFkZExpc3RlbmVyLFxuICAgIHJlbW92ZUxpc3RlbmVyID0gX3JlcXVpcmUucmVtb3ZlTGlzdGVuZXI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF90aGlzKSB7XG4gIC8vIGNvbnN0IHBlID0gZmFsc2U7XG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzU3BlZWRCdXR0b25TaG93Lm9uY2xpY2sgPSBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1NwZWVkQnV0dG9uSGlkZS5vbmNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLmNsYXNzTGlzdC50b2dnbGUoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItc2V0dGluZ3Mtc3BlZWQtcGFuZWxcIikpO1xuXG4gICAgdmFyIGluY2x1ZGVzQ2xhc3MgPSBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLmNsYXNzTmFtZS5pbmNsdWRlcyhcIlwiLmNvbmNhdChfdGhpcy5uYW1lLCBcIi1zZXR0aW5ncy1zcGVlZC1wYW5lbFwiKSk7XG5cbiAgICBpZiAoaW5jbHVkZXNDbGFzcykge1xuICAgICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NNYWluUGFuZWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NTcGVlZFBhbmVsLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzU3BlZWRQYW5lbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc01haW5QYW5lbC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIH1cbiAgfTtcblxuICB2YXIgb25DdXJzb3JNb3ZlU3BlZWRCYXIgPSBmdW5jdGlvbiBvbkN1cnNvck1vdmVTcGVlZEJhcihlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgdmFyIHZpZXdwb3J0T2Zmc2V0ID0gX3RoaXMuZWxlbWVudHMuc3BlZWRCYXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICB2YXIgY2xpZW50WSA9IGUuY2xpZW50WSB8fCAoKGUudG91Y2hlcyB8fCBbXSlbMF0gfHwge30pLmNsaWVudFk7XG4gICAgdmFyIHBvc2l0aW9uWSA9IGNsaWVudFkgLSB2aWV3cG9ydE9mZnNldC50b3A7XG4gICAgcG9zaXRpb25ZIC09IDg7XG5cbiAgICBpZiAocG9zaXRpb25ZIDwgMCkge1xuICAgICAgcG9zaXRpb25ZID0gMDtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uWSA+IF90aGlzLmVsZW1lbnRzLnNwZWVkQmFyLm9mZnNldEhlaWdodCAtIDE2KSB7XG4gICAgICBwb3NpdGlvblkgPSBfdGhpcy5lbGVtZW50cy5zcGVlZEJhci5vZmZzZXRIZWlnaHQgLSAxNjtcbiAgICB9XG5cbiAgICBwb3NpdGlvblkgPSBNYXRoLmZsb29yKHBvc2l0aW9uWSk7IC8vIHNob3cgc3BlZWRcblxuICAgIHZhciBwZXJjZW50YWdlID0gKHBvc2l0aW9uWSAvICgoX3RoaXMub3B0aW9ucy5zcGVlZFZhbHVlcy5sZW5ndGggLSAxKSAqIDE2KSAtIDEpICogLTE7XG4gICAgdmFyIHN0ZXAgPSAxIC8gKF90aGlzLm9wdGlvbnMuc3BlZWRWYWx1ZXMubGVuZ3RoIC0gMSk7XG5cbiAgICB2YXIgc3BlZWQgPSBfdGhpcy5jYWxjdWxhdGVTcGVlZChzdGVwLCBfdGhpcy5vcHRpb25zLnNwZWVkVmFsdWVzLCBwZXJjZW50YWdlKTtcblxuICAgIGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItc3BlZWQtcnVudGltZVwiKSkuaW5uZXJIVE1MID0gc3BlZWQgKyBcIjBcIjtcbiAgICBlbGlkKFwiXCIuY29uY2F0KF90aGlzLm5hbWUsIFwiLXNwZWVkLWN1cnNvclwiKSkuc3R5bGUudG9wID0gcG9zaXRpb25ZICsgXCJweFwiO1xuICAgIF90aGlzLmNsaXAuZXhlY3V0aW9uU3BlZWQgPSBzcGVlZDtcbiAgfTtcblxuICB2YXIgb25Nb3VzZVVwU3BlZWRCYXIgPSBmdW5jdGlvbiBvbk1vdXNlVXBTcGVlZEJhcihlKSB7XG4gICAgLy8gaWYgKHBlKSB7XG4gICAgLy8gICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BvaW50ZXJFdmVudHMuY2xpY2soKTtcbiAgICAvLyB9XG4gICAgX3RoaXMuZWxlbWVudHMubGlzdGVuZXJIZWxwZXIuc3R5bGUucG9pbnRlckV2ZW50cyA9IFwibm9uZVwiO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICByZW1vdmVMaXN0ZW5lcihcIm1vdXNldXBcIiwgb25Nb3VzZVVwU3BlZWRCYXIsIGZhbHNlKTtcbiAgICByZW1vdmVMaXN0ZW5lcihcInRvdWNoZW5kXCIsIG9uTW91c2VVcFNwZWVkQmFyLCBmYWxzZSk7XG4gICAgcmVtb3ZlTGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgb25DdXJzb3JNb3ZlU3BlZWRCYXIsIGZhbHNlKTtcbiAgICByZW1vdmVMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBvbkN1cnNvck1vdmVTcGVlZEJhciwgZmFsc2UpO1xuICAgIGVsaWQoXCJcIi5jb25jYXQoX3RoaXMubmFtZSwgXCItc3BlZWQtcnVudGltZVwiKSkuaW5uZXJIVE1MID0gXCJTcGVlZFwiO1xuICAgIHZhciBzcGVlZERpc3BsYXk7XG4gICAgX3RoaXMuY2xpcC5zcGVlZCA9PSAxID8gc3BlZWREaXNwbGF5ID0gXCJOb3JtYWxcIiA6IHNwZWVkRGlzcGxheSA9IF90aGlzLmNsaXAuc3BlZWQ7XG4gICAgX3RoaXMuZWxlbWVudHMuc3BlZWRDdXJyZW50LmlubmVySFRNTCA9IHNwZWVkRGlzcGxheTtcbiAgfTtcblxuICB2YXIgb25Nb3VzZURvd25TcGVlZEJhciA9IGZ1bmN0aW9uIG9uTW91c2VEb3duU3BlZWRCYXIoZSkge1xuICAgIC8vIGlmICghX3RoaXMub3B0aW9ucy5wb2ludGVyRXZlbnRzKSB7XG4gICAgLy8gICBwZSA9IHRydWU7XG4gICAgLy8gICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BvaW50ZXJFdmVudHMuY2xpY2soKTtcbiAgICAvLyB9XG4gICAgX3RoaXMuZWxlbWVudHMubGlzdGVuZXJIZWxwZXIuc3R5bGUucG9pbnRlckV2ZW50cyA9IFwiYXV0b1wiO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBvbkN1cnNvck1vdmVTcGVlZEJhcihlKTtcbiAgICBhZGRMaXN0ZW5lcihcIm1vdXNldXBcIiwgb25Nb3VzZVVwU3BlZWRCYXIsIGZhbHNlKTtcbiAgICBhZGRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIG9uTW91c2VVcFNwZWVkQmFyLCBmYWxzZSk7XG4gICAgYWRkTGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgb25DdXJzb3JNb3ZlU3BlZWRCYXIsIGZhbHNlKTtcbiAgICBhZGRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBvbkN1cnNvck1vdmVTcGVlZEJhciwgZmFsc2UpO1xuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLnNwZWVkQmFySGVscGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgb25Nb3VzZURvd25TcGVlZEJhciwgZmFsc2UpO1xuXG4gIF90aGlzLmVsZW1lbnRzLnNwZWVkQmFySGVscGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIG9uTW91c2VEb3duU3BlZWRCYXIsIHtcbiAgICBwYXNzaXZlOiBmYWxzZVxuICB9LCBmYWxzZSk7XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/listeners/speed.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/listeners/statusBtn.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/listeners/statusBtn.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (_this) {\n  _this.elements.statusButton.onclick = function (e) {\n    e.preventDefault(); // console.log(_this.clip);\n\n    if (_this.clip.runTimeInfo.state === \"playing\") {\n      _this.clip.pause();\n    } else if (_this.clip.runTimeInfo.state === \"paused\" || _this.clip.runTimeInfo.state === \"idle\" || _this.clip.runTimeInfo.state === \"transitional\" || _this.clip.runTimeInfo.state === \"armed\") {\n      _this.clip.play();\n    } //not working below this\n    else if (_this.clip.runTimeInfo.state === \"idle\") {\n        if (_this.clip.speed >= 0) {\n          _this.clip.play();\n\n          _this.settings.needsUpdate = true;\n        } else {\n          _this.createJourney(_this.clip, _this.settings.loopEndMillisecond - 1, {\n            before: \"pause\",\n            after: \"play\"\n          });\n\n          _this.settings.needsUpdate = true;\n        }\n      } else if (_this.clip.runTimeInfo.state === \"completed\") {\n        if (_this.clip.speed >= 0) {\n          _this.createJourney(_this.clip, 0, {\n            before: \"pause\",\n            after: \"play\"\n          });\n\n          _this.settings.needsUpdate = true;\n        } else {\n          _this.createJourney(_this.clip, _this.settings.loopEndMillisecond - 1, {\n            before: \"pause\",\n            after: \"play\"\n          });\n\n          _this.settings.needsUpdate = true;\n        }\n      }\n\n    return false;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtcGxheWVyL2Rpc3QvbGlzdGVuZXJzL3N0YXR1c0J0bi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1wbGF5ZXIvZGlzdC9saXN0ZW5lcnMvc3RhdHVzQnRuLmpzPzczYzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF90aGlzKSB7XG4gIF90aGlzLmVsZW1lbnRzLnN0YXR1c0J1dHRvbi5vbmNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIGNvbnNvbGUubG9nKF90aGlzLmNsaXApO1xuXG4gICAgaWYgKF90aGlzLmNsaXAucnVuVGltZUluZm8uc3RhdGUgPT09IFwicGxheWluZ1wiKSB7XG4gICAgICBfdGhpcy5jbGlwLnBhdXNlKCk7XG4gICAgfSBlbHNlIGlmIChfdGhpcy5jbGlwLnJ1blRpbWVJbmZvLnN0YXRlID09PSBcInBhdXNlZFwiIHx8IF90aGlzLmNsaXAucnVuVGltZUluZm8uc3RhdGUgPT09IFwiaWRsZVwiIHx8IF90aGlzLmNsaXAucnVuVGltZUluZm8uc3RhdGUgPT09IFwidHJhbnNpdGlvbmFsXCIgfHwgX3RoaXMuY2xpcC5ydW5UaW1lSW5mby5zdGF0ZSA9PT0gXCJhcm1lZFwiKSB7XG4gICAgICBfdGhpcy5jbGlwLnBsYXkoKTtcbiAgICB9IC8vbm90IHdvcmtpbmcgYmVsb3cgdGhpc1xuICAgIGVsc2UgaWYgKF90aGlzLmNsaXAucnVuVGltZUluZm8uc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICAgIGlmIChfdGhpcy5jbGlwLnNwZWVkID49IDApIHtcbiAgICAgICAgICBfdGhpcy5jbGlwLnBsYXkoKTtcblxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5jcmVhdGVKb3VybmV5KF90aGlzLmNsaXAsIF90aGlzLnNldHRpbmdzLmxvb3BFbmRNaWxsaXNlY29uZCAtIDEsIHtcbiAgICAgICAgICAgIGJlZm9yZTogXCJwYXVzZVwiLFxuICAgICAgICAgICAgYWZ0ZXI6IFwicGxheVwiXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoX3RoaXMuY2xpcC5ydW5UaW1lSW5mby5zdGF0ZSA9PT0gXCJjb21wbGV0ZWRcIikge1xuICAgICAgICBpZiAoX3RoaXMuY2xpcC5zcGVlZCA+PSAwKSB7XG4gICAgICAgICAgX3RoaXMuY3JlYXRlSm91cm5leShfdGhpcy5jbGlwLCAwLCB7XG4gICAgICAgICAgICBiZWZvcmU6IFwicGF1c2VcIixcbiAgICAgICAgICAgIGFmdGVyOiBcInBsYXlcIlxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLmNyZWF0ZUpvdXJuZXkoX3RoaXMuY2xpcCwgX3RoaXMuc2V0dGluZ3MubG9vcEVuZE1pbGxpc2Vjb25kIC0gMSwge1xuICAgICAgICAgICAgYmVmb3JlOiBcInBhdXNlXCIsXG4gICAgICAgICAgICBhZnRlcjogXCJwbGF5XCJcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/listeners/statusBtn.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex-player/dist/listeners/volume.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex-player/dist/listeners/volume.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ../helpers */ \"../node_modules/@kissmybutton/motorcortex-player/dist/helpers.js\"),\n    addListener = _require.addListener,\n    removeListener = _require.removeListener,\n    elid = _require.elid;\n\nvar svg = __webpack_require__(/*! ../html/svg */ \"../node_modules/@kissmybutton/motorcortex-player/dist/html/svg.js\");\n\nmodule.exports = function (_this) {\n  // let pe = false;\n  var volumeDrag = false;\n\n  _this.elements.volumeBtn.onclick = function () {\n    if (_this.settings.volumeMute) {\n      _this.elements.volumeBarActive.style.width = _this.settings.previousVolume * 100 + \"%\";\n\n      _this.clip.setVolume(_this.settings.previousVolume);\n\n      _this.settings.volumeMute = false;\n      var SVG = document.createElement(\"span\");\n      SVG.innerHTML = svg.volumeSVG;\n\n      _this.elements.volumeBtn.getElementsByTagName(\"svg\")[0].replaceWith(SVG);\n    } else {\n      _this.settings.volumeMute = true;\n      _this.elements.volumeBarActive.style.width = \"0%\";\n\n      _this.clip.setVolume(0);\n\n      var _SVG = document.createElement(\"span\");\n\n      _SVG.innerHTML = svg.volumeMuteSVG;\n\n      _this.elements.volumeBtn.getElementsByTagName(\"svg\")[0].replaceWith(_SVG);\n    }\n  };\n\n  var volumeOpen = false;\n\n  _this.elements.volumeBtn.onmouseover = function () {\n    volumeOpen = true;\n\n    _this.elements.volumeCursor.classList.add(\"\".concat(_this.name, \"-volume-cursor-transition\"));\n\n    _this.elements.volumeBar.classList.add(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.volumeBarHelper.classList.add(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.timeDisplay.classList.add(\"\".concat(_this.name, \"-time-width-transition\"));\n  };\n\n  elid(\"\".concat(_this.name, \"-left-controls\")).onmouseout = function () {\n    if (!volumeOpen || volumeDrag) {\n      return;\n    }\n\n    var e = event.toElement || event.relatedTarget || event.target;\n\n    if (isDescendant(elid(\"\".concat(_this.name, \"-left-controls\")), e) || e === elid(\"\".concat(_this.name, \"-left-controls\"))) {\n      return;\n    }\n\n    volumeOpen = false;\n\n    _this.elements.volumeCursor.classList.remove(\"\".concat(_this.name, \"-volume-cursor-transition\"));\n\n    _this.elements.volumeBar.classList.remove(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.volumeBarHelper.classList.remove(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.timeDisplay.classList.remove(\"\".concat(_this.name, \"-time-width-transition\"));\n  };\n\n  _this.listeners.onCursorMoveVolumeBar = function (e) {\n    e.preventDefault();\n    var clientX = e.clientX || ((e.touches || [])[0] || {}).clientX;\n\n    var viewportOffset = _this.elements.volumeBarHelper.getBoundingClientRect();\n\n    var positionX = clientX - viewportOffset.left;\n\n    if (positionX < 0) {\n      positionX = 0;\n    } else if (positionX > _this.elements.volumeBarHelper.offsetWidth) {\n      positionX = _this.elements.volumeBarHelper.offsetWidth;\n    }\n\n    _this.settings.volume = Number((positionX / _this.elements.volumeBarHelper.offsetWidth).toFixed(2));\n    _this.elements.volumeBarActive.style.width = _this.settings.volume * 100 + \"%\";\n\n    _this.clip.setVolume(_this.settings.volume);\n\n    if (_this.settings.volume > 0) {\n      _this.settings.volumeMute = false;\n      var SVG = document.createElement(\"span\");\n      SVG.innerHTML = svg.volumeSVG;\n\n      _this.elements.volumeBtn.getElementsByTagName(\"svg\")[0].replaceWith(SVG);\n    } else if (_this.settings.volume === 0) {\n      _this.settings.volumeMute = true;\n\n      var _SVG2 = document.createElement(\"span\");\n\n      _SVG2.innerHTML = svg.volumeMuteSVG;\n\n      _this.elements.volumeBtn.getElementsByTagName(\"svg\")[0].replaceWith(_SVG2);\n    }\n  };\n\n  _this.listeners.onMouseUpVolumeBar = function (e) {\n    volumeDrag = false; // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.elements.listenerHelper.style.pointerEvents = \"none\";\n    e.preventDefault();\n\n    if (_this.settings.volume > 0) {\n      _this.settings.previousVolume = _this.settings.volume;\n    }\n\n    removeListener(\"mouseup\", _this.listeners.onMouseUpVolumeBar, false);\n    removeListener(\"touchend\", _this.listeners.onMouseUpVolumeBar, false);\n    removeListener(\"mousemove\", _this.listeners.onCursorMoveVolumeBar, false);\n    removeListener(\"touchmove\", _this.listeners.onCursorMoveVolumeBar, false);\n  };\n\n  _this.listeners.onMouseDownVolumeBar = function (e) {\n    volumeDrag = true; // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\";\n    e.preventDefault();\n\n    _this.listeners.onCursorMoveVolumeBar(e);\n\n    addListener(\"mouseup\", _this.listeners.onMouseUpVolumeBar, false);\n    addListener(\"touchend\", _this.listeners.onMouseUpVolumeBar, false);\n    addListener(\"mousemove\", _this.listeners.onCursorMoveVolumeBar, false);\n    addListener(\"touchmove\", _this.listeners.onCursorMoveVolumeBar, false);\n  };\n\n  _this.elements.volumeBarHelper.addEventListener(\"mousedown\", _this.listeners.onMouseDownVolumeBar, false);\n\n  _this.elements.volumeCursor.addEventListener(\"mousedown\", _this.listeners.onMouseDownVolumeBar, false);\n\n  _this.elements.volumeBarHelper.addEventListener(\"touchstart\", _this.listeners.onMouseDownVolumeBar, {\n    passive: false\n  }, false);\n\n  _this.elements.volumeCursor.addEventListener(\"touchstart\", _this.listeners.onMouseDownVolumeBar, {\n    passive: false\n  }, false);\n};\n\nfunction isDescendant(parent, child) {\n  var node = child.parentNode;\n\n  while (node != null) {\n    if (node == parent) {\n      return true;\n    }\n\n    node = node.parentNode;\n  }\n\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex-player/dist/listeners/volume.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/motorcortex.umd.js":
/*!*************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/motorcortex.umd.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {\n   true ? factory(exports) :\n  undefined;\n}(this, (function (exports) { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get(target, property, receiver || target);\n  }\n\n  function set(target, property, value, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.set) {\n      set = Reflect.set;\n    } else {\n      set = function set(target, property, value, receiver) {\n        var base = _superPropBase(target, property);\n\n        var desc;\n\n        if (base) {\n          desc = Object.getOwnPropertyDescriptor(base, property);\n\n          if (desc.set) {\n            desc.set.call(receiver, value);\n            return true;\n          } else if (!desc.writable) {\n            return false;\n          }\n        }\n\n        desc = Object.getOwnPropertyDescriptor(receiver, property);\n\n        if (desc) {\n          if (!desc.writable) {\n            return false;\n          }\n\n          desc.value = value;\n          Object.defineProperty(receiver, property, desc);\n        } else {\n          _defineProperty(receiver, property, value);\n        }\n\n        return true;\n      };\n    }\n\n    return set(target, property, value, receiver);\n  }\n\n  function _set(target, property, value, receiver, isStrict) {\n    var s = set(target, property, value, receiver || target);\n\n    if (!s && isStrict) {\n      throw new Error('failed to set property');\n    }\n\n    return value;\n  }\n\n  function _toArray(arr) {\n    return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    }\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n\n  function _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n\n    if (prim !== undefined) {\n      var res = prim.call(input, hint || \"default\");\n      if (typeof res !== \"object\") return res;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n\n    return (hint === \"string\" ? String : Number)(input);\n  }\n\n  function _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n\n    return typeof key === \"symbol\" ? key : String(key);\n  }\n\n  function _decorate(decorators, factory, superClass, mixins) {\n    var api = _getDecoratorsApi();\n\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        api = mixins[i](api);\n      }\n    }\n\n    var r = factory(function initialize(O) {\n      api.initializeInstanceElements(O, decorated.elements);\n    }, superClass);\n    var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators);\n    api.initializeClassElements(r.F, decorated.elements);\n    return api.runClassFinishers(r.F, decorated.finishers);\n  }\n\n  function _getDecoratorsApi() {\n    _getDecoratorsApi = function () {\n      return api;\n    };\n\n    var api = {\n      elementsDefinitionOrder: [[\"method\"], [\"field\"]],\n      initializeInstanceElements: function (O, elements) {\n        [\"method\", \"field\"].forEach(function (kind) {\n          elements.forEach(function (element) {\n            if (element.kind === kind && element.placement === \"own\") {\n              this.defineClassElement(O, element);\n            }\n          }, this);\n        }, this);\n      },\n      initializeClassElements: function (F, elements) {\n        var proto = F.prototype;\n        [\"method\", \"field\"].forEach(function (kind) {\n          elements.forEach(function (element) {\n            var placement = element.placement;\n\n            if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) {\n              var receiver = placement === \"static\" ? F : proto;\n              this.defineClassElement(receiver, element);\n            }\n          }, this);\n        }, this);\n      },\n      defineClassElement: function (receiver, element) {\n        var descriptor = element.descriptor;\n\n        if (element.kind === \"field\") {\n          var initializer = element.initializer;\n          descriptor = {\n            enumerable: descriptor.enumerable,\n            writable: descriptor.writable,\n            configurable: descriptor.configurable,\n            value: initializer === void 0 ? void 0 : initializer.call(receiver)\n          };\n        }\n\n        Object.defineProperty(receiver, element.key, descriptor);\n      },\n      decorateClass: function (elements, decorators) {\n        var newElements = [];\n        var finishers = [];\n        var placements = {\n          static: [],\n          prototype: [],\n          own: []\n        };\n        elements.forEach(function (element) {\n          this.addElementPlacement(element, placements);\n        }, this);\n        elements.forEach(function (element) {\n          if (!_hasDecorators(element)) return newElements.push(element);\n          var elementFinishersExtras = this.decorateElement(element, placements);\n          newElements.push(elementFinishersExtras.element);\n          newElements.push.apply(newElements, elementFinishersExtras.extras);\n          finishers.push.apply(finishers, elementFinishersExtras.finishers);\n        }, this);\n\n        if (!decorators) {\n          return {\n            elements: newElements,\n            finishers: finishers\n          };\n        }\n\n        var result = this.decorateConstructor(newElements, decorators);\n        finishers.push.apply(finishers, result.finishers);\n        result.finishers = finishers;\n        return result;\n      },\n      addElementPlacement: function (element, placements, silent) {\n        var keys = placements[element.placement];\n\n        if (!silent && keys.indexOf(element.key) !== -1) {\n          throw new TypeError(\"Duplicated element (\" + element.key + \")\");\n        }\n\n        keys.push(element.key);\n      },\n      decorateElement: function (element, placements) {\n        var extras = [];\n        var finishers = [];\n\n        for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) {\n          var keys = placements[element.placement];\n          keys.splice(keys.indexOf(element.key), 1);\n          var elementObject = this.fromElementDescriptor(element);\n          var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject);\n          element = elementFinisherExtras.element;\n          this.addElementPlacement(element, placements);\n\n          if (elementFinisherExtras.finisher) {\n            finishers.push(elementFinisherExtras.finisher);\n          }\n\n          var newExtras = elementFinisherExtras.extras;\n\n          if (newExtras) {\n            for (var j = 0; j < newExtras.length; j++) {\n              this.addElementPlacement(newExtras[j], placements);\n            }\n\n            extras.push.apply(extras, newExtras);\n          }\n        }\n\n        return {\n          element: element,\n          finishers: finishers,\n          extras: extras\n        };\n      },\n      decorateConstructor: function (elements, decorators) {\n        var finishers = [];\n\n        for (var i = decorators.length - 1; i >= 0; i--) {\n          var obj = this.fromClassDescriptor(elements);\n          var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj);\n\n          if (elementsAndFinisher.finisher !== undefined) {\n            finishers.push(elementsAndFinisher.finisher);\n          }\n\n          if (elementsAndFinisher.elements !== undefined) {\n            elements = elementsAndFinisher.elements;\n\n            for (var j = 0; j < elements.length - 1; j++) {\n              for (var k = j + 1; k < elements.length; k++) {\n                if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) {\n                  throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\");\n                }\n              }\n            }\n          }\n        }\n\n        return {\n          elements: elements,\n          finishers: finishers\n        };\n      },\n      fromElementDescriptor: function (element) {\n        var obj = {\n          kind: element.kind,\n          key: element.key,\n          placement: element.placement,\n          descriptor: element.descriptor\n        };\n        var desc = {\n          value: \"Descriptor\",\n          configurable: true\n        };\n        Object.defineProperty(obj, Symbol.toStringTag, desc);\n        if (element.kind === \"field\") obj.initializer = element.initializer;\n        return obj;\n      },\n      toElementDescriptors: function (elementObjects) {\n        if (elementObjects === undefined) return;\n        return _toArray(elementObjects).map(function (elementObject) {\n          var element = this.toElementDescriptor(elementObject);\n          this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\");\n          this.disallowProperty(elementObject, \"extras\", \"An element descriptor\");\n          return element;\n        }, this);\n      },\n      toElementDescriptor: function (elementObject) {\n        var kind = String(elementObject.kind);\n\n        if (kind !== \"method\" && kind !== \"field\") {\n          throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"');\n        }\n\n        var key = _toPropertyKey(elementObject.key);\n\n        var placement = String(elementObject.placement);\n\n        if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") {\n          throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"');\n        }\n\n        var descriptor = elementObject.descriptor;\n        this.disallowProperty(elementObject, \"elements\", \"An element descriptor\");\n        var element = {\n          kind: kind,\n          key: key,\n          placement: placement,\n          descriptor: Object.assign({}, descriptor)\n        };\n\n        if (kind !== \"field\") {\n          this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\");\n        } else {\n          this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\");\n          this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\");\n          this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\");\n          element.initializer = elementObject.initializer;\n        }\n\n        return element;\n      },\n      toElementFinisherExtras: function (elementObject) {\n        var element = this.toElementDescriptor(elementObject);\n\n        var finisher = _optionalCallableProperty(elementObject, \"finisher\");\n\n        var extras = this.toElementDescriptors(elementObject.extras);\n        return {\n          element: element,\n          finisher: finisher,\n          extras: extras\n        };\n      },\n      fromClassDescriptor: function (elements) {\n        var obj = {\n          kind: \"class\",\n          elements: elements.map(this.fromElementDescriptor, this)\n        };\n        var desc = {\n          value: \"Descriptor\",\n          configurable: true\n        };\n        Object.defineProperty(obj, Symbol.toStringTag, desc);\n        return obj;\n      },\n      toClassDescriptor: function (obj) {\n        var kind = String(obj.kind);\n\n        if (kind !== \"class\") {\n          throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"');\n        }\n\n        this.disallowProperty(obj, \"key\", \"A class descriptor\");\n        this.disallowProperty(obj, \"placement\", \"A class descriptor\");\n        this.disallowProperty(obj, \"descriptor\", \"A class descriptor\");\n        this.disallowProperty(obj, \"initializer\", \"A class descriptor\");\n        this.disallowProperty(obj, \"extras\", \"A class descriptor\");\n\n        var finisher = _optionalCallableProperty(obj, \"finisher\");\n\n        var elements = this.toElementDescriptors(obj.elements);\n        return {\n          elements: elements,\n          finisher: finisher\n        };\n      },\n      runClassFinishers: function (constructor, finishers) {\n        for (var i = 0; i < finishers.length; i++) {\n          var newConstructor = (0, finishers[i])(constructor);\n\n          if (newConstructor !== undefined) {\n            if (typeof newConstructor !== \"function\") {\n              throw new TypeError(\"Finishers must return a constructor.\");\n            }\n\n            constructor = newConstructor;\n          }\n        }\n\n        return constructor;\n      },\n      disallowProperty: function (obj, name, objectType) {\n        if (obj[name] !== undefined) {\n          throw new TypeError(objectType + \" can't have a .\" + name + \" property.\");\n        }\n      }\n    };\n    return api;\n  }\n\n  function _createElementDescriptor(def) {\n    var key = _toPropertyKey(def.key);\n\n    var descriptor;\n\n    if (def.kind === \"method\") {\n      descriptor = {\n        value: def.value,\n        writable: true,\n        configurable: true,\n        enumerable: false\n      };\n    } else if (def.kind === \"get\") {\n      descriptor = {\n        get: def.value,\n        configurable: true,\n        enumerable: false\n      };\n    } else if (def.kind === \"set\") {\n      descriptor = {\n        set: def.value,\n        configurable: true,\n        enumerable: false\n      };\n    } else if (def.kind === \"field\") {\n      descriptor = {\n        configurable: true,\n        writable: true,\n        enumerable: true\n      };\n    }\n\n    var element = {\n      kind: def.kind === \"field\" ? \"field\" : \"method\",\n      key: key,\n      placement: def.static ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\",\n      descriptor: descriptor\n    };\n    if (def.decorators) element.decorators = def.decorators;\n    if (def.kind === \"field\") element.initializer = def.value;\n    return element;\n  }\n\n  function _coalesceGetterSetter(element, other) {\n    if (element.descriptor.get !== undefined) {\n      other.descriptor.get = element.descriptor.get;\n    } else {\n      other.descriptor.set = element.descriptor.set;\n    }\n  }\n\n  function _coalesceClassElements(elements) {\n    var newElements = [];\n\n    var isSameElement = function (other) {\n      return other.kind === \"method\" && other.key === element.key && other.placement === element.placement;\n    };\n\n    for (var i = 0; i < elements.length; i++) {\n      var element = elements[i];\n      var other;\n\n      if (element.kind === \"method\" && (other = newElements.find(isSameElement))) {\n        if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) {\n          if (_hasDecorators(element) || _hasDecorators(other)) {\n            throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\");\n          }\n\n          other.descriptor = element.descriptor;\n        } else {\n          if (_hasDecorators(element)) {\n            if (_hasDecorators(other)) {\n              throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\");\n            }\n\n            other.decorators = element.decorators;\n          }\n\n          _coalesceGetterSetter(element, other);\n        }\n      } else {\n        newElements.push(element);\n      }\n    }\n\n    return newElements;\n  }\n\n  function _hasDecorators(element) {\n    return element.decorators && element.decorators.length;\n  }\n\n  function _isDataDescriptor(desc) {\n    return desc !== undefined && !(desc.value === undefined && desc.writable === undefined);\n  }\n\n  function _optionalCallableProperty(obj, name) {\n    var value = obj[name];\n\n    if (value !== undefined && typeof value !== \"function\") {\n      throw new TypeError(\"Expected '\" + name + \"' to be a function\");\n    }\n\n    return value;\n  }\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  function createCommonjsModule(fn, module) {\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n  }\n\n  var index_min = createCommonjsModule(function (module, exports) {\n\n  function u() {\n    function t(t) {\n      this.opts = {\n        messages: x({}, w)\n      }, t && x(this.opts, t), this.messages = this.opts.messages, this.rules = {\n        any: b,\n        array: y,\n        boolean: g,\n        custom: v,\n        date: d,\n        email: m,\n        enum: h,\n        equal: p,\n        forbidden: c,\n        function: f,\n        multi: o,\n        number: l,\n        object: u,\n        string: s,\n        url: i,\n        uuid: a,\n        mac: r,\n        luhn: n\n      }, this.cache = new Map();\n    }\n\n    function e(t) {\n      return k || (k = S(), O = {\n        parser: \"babel\",\n        useTabs: !1,\n        printWidth: 120,\n        trailingComma: \"none\",\n        tabWidth: 4,\n        singleQuote: !1,\n        semi: !0,\n        bracketSpacing: !0\n      }, j = S(), _ = {\n        language: \"js\",\n        theme: j.fromJson({\n          keyword: [\"white\", \"bold\"],\n          built_in: \"magenta\",\n          literal: \"cyan\",\n          number: \"magenta\",\n          regexp: \"red\",\n          string: [\"yellow\", \"bold\"],\n          symbol: \"plain\",\n          class: \"blue\",\n          attr: \"plain\",\n          function: [\"white\", \"bold\"],\n          title: \"plain\",\n          params: \"green\",\n          comment: \"grey\"\n        })\n      }), t = k.format(t, O), j.highlight(t, _);\n    }\n\n    function n(t) {\n      return t = t.messages, {\n        source: '\\n\\t\\t\\tif (typeof value !== \"string\") {\\n\\t\\t\\t\\t' + this.makeError({\n          type: \"string\",\n          actual: \"value\",\n          messages: t\n        }) + '\\n\\t\\t\\t\\treturn value;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (typeof value !== \"string\")\\n\\t\\t\\t\\tvalue = String(value);\\n\\n\\t\\t\\tval = value.replace(/\\\\D+/g, \"\");\\n\\n\\t\\t\\tvar array = [0, 2, 4, 6, 8, 1, 3, 5, 7, 9];\\n\\t\\t\\tvar len = val ? val.length : 0,\\n\\t\\t\\t\\tbit = 1,\\n\\t\\t\\t\\tsum = 0;\\n\\t\\t\\twhile (len--) {\\n\\t\\t\\t\\tsum += !(bit ^= 1) ? parseInt(val[len], 10) : array[val[len]];\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!(sum % 10 === 0 && sum > 0)) {\\n\\t\\t\\t\\t' + this.makeError({\n          type: \"luhn\",\n          actual: \"value\",\n          messages: t\n        }) + \"\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn value;\\n\\t\\t\"\n      };\n    }\n\n    function r(t) {\n      return t = t.messages, {\n        source: '\\n\\t\\t\\tif (typeof value !== \"string\") {\\n\\t\\t\\t\\t' + this.makeError({\n          type: \"string\",\n          actual: \"value\",\n          messages: t\n        }) + \"\\n\\t\\t\\t\\treturn value;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar v = value.toLowerCase();\\n\\t\\t\\tif (!\" + P.toString() + \".test(v)) {\\n\\t\\t\\t\\t\" + this.makeError({\n          type: \"mac\",\n          actual: \"value\",\n          messages: t\n        }) + \"\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn value;\\n\\t\\t\"\n      };\n    }\n\n    function a(t) {\n      var e = t.schema;\n      t = t.messages;\n      var n = [];\n      return n.push('\\n\\t\\tif (typeof value !== \"string\") {\\n\\t\\t\\t' + this.makeError({\n        type: \"string\",\n        actual: \"value\",\n        messages: t\n      }) + \"\\n\\t\\t\\treturn value;\\n\\t\\t}\\n\\n\\t\\tvar val = value.toLowerCase();\\n\\t\\tif (!\" + I.toString() + \".test(val)) {\\n\\t\\t\\t\" + this.makeError({\n        type: \"uuid\",\n        actual: \"value\",\n        messages: t\n      }) + \"\\n\\t\\t\\treturn value;\\n\\t\\t}\\n\\n\\t\\tconst version = val.charAt(14) | 0;\\n\\t\"), e.version && n.push(\"\\n\\t\\t\\tif (\" + e.version + \" !== version) {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"uuidVersion\",\n        expected: e.version,\n        actual: \"version\",\n        messages: t\n      }) + \"\\n\\t\\t\\t\\treturn value;\\n\\t\\t\\t}\\n\\t\\t\"), n.push('\\n\\t\\tswitch (version) {\\n\\t\\tcase 1:\\n\\t\\tcase 2:\\n\\t\\t\\tbreak;\\n\\t\\tcase 3:\\n\\t\\tcase 4:\\n\\t\\tcase 5:\\n\\t\\t\\tif ([\"8\", \"9\", \"a\", \"b\"].indexOf(value.charAt(19)) === -1) {\\n\\t\\t\\t\\t' + this.makeError({\n        type: \"uuid\",\n        actual: \"value\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn value;\\n\\t\"), {\n        source: n.join(\"\\n\")\n      };\n    }\n\n    function i(t) {\n      t = t.messages;\n      var e = [];\n      return e.push('\\n\\t\\tif (typeof value !== \"string\") {\\n\\t\\t\\t' + this.makeError({\n        type: \"string\",\n        actual: \"value\",\n        messages: t\n      }) + \"\\n\\t\\t\\treturn value;\\n\\t\\t}\\n\\n\\t\\tif (!\" + R.toString() + \".test(value)) {\\n\\t\\t\\t\" + this.makeError({\n        type: \"url\",\n        actual: \"value\",\n        messages: t\n      }) + \"\\n\\t\\t}\\n\\n\\t\\treturn value;\\n\\t\"), {\n        source: e.join(\"\\n\")\n      };\n    }\n\n    function s(t) {\n      var e = t.schema;\n      t = t.messages;\n      var n = [],\n          r = !1;\n\n      if (!0 === e.convert && (r = !0, n.push('\\n\\t\\t\\tif (typeof value !== \"string\") {\\n\\t\\t\\t\\tvalue = String(value);\\n\\t\\t\\t}\\n\\t\\t')), n.push('\\n\\t\\tif (typeof value !== \"string\") {\\n\\t\\t\\t' + this.makeError({\n        type: \"string\",\n        actual: \"value\",\n        messages: t\n      }) + \"\\n\\t\\t\\treturn value;\\n\\t\\t}\\n\\n\\t\\tvar origValue = value;\\n\\t\"), e.trim && (r = !0, n.push(\"\\n\\t\\t\\tvalue = value.trim();\\n\\t\\t\")), e.trimLeft && (r = !0, n.push(\"\\n\\t\\t\\tvalue = value.trimLeft();\\n\\t\\t\")), e.trimRight && (r = !0, n.push(\"\\n\\t\\t\\tvalue = value.trimRight();\\n\\t\\t\")), e.padStart && (r = !0, n.push(\"\\n\\t\\t\\tvalue = value.padStart(\" + e.padStart + \", \" + JSON.stringify(null != e.padChar ? e.padChar : \" \") + \");\\n\\t\\t\")), e.padEnd && (r = !0, n.push(\"\\n\\t\\t\\tvalue = value.padEnd(\" + e.padEnd + \", \" + JSON.stringify(null != e.padChar ? e.padChar : \" \") + \");\\n\\t\\t\")), e.lowercase && (r = !0, n.push(\"\\n\\t\\t\\tvalue = value.toLowerCase();\\n\\t\\t\")), e.uppercase && (r = !0, n.push(\"\\n\\t\\t\\tvalue = value.toUpperCase();\\n\\t\\t\")), e.localeLowercase && (r = !0, n.push(\"\\n\\t\\t\\tvalue = value.toLocaleLowerCase();\\n\\t\\t\")), e.localeUppercase && (r = !0, n.push(\"\\n\\t\\t\\tvalue = value.toLocaleUpperCase();\\n\\t\\t\")), n.push(\"\\n\\t\\t\\tvar len = value.length;\\n\\t\"), !1 === e.empty && n.push(\"\\n\\t\\t\\tif (len === 0) {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"stringEmpty\",\n        actual: \"value\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), null != e.min && n.push(\"\\n\\t\\t\\tif (len < \" + e.min + \") {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"stringMin\",\n        expected: e.min,\n        actual: \"len\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), null != e.max && n.push(\"\\n\\t\\t\\tif (len > \" + e.max + \") {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"stringMax\",\n        expected: e.max,\n        actual: \"len\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), null != e.length && n.push(\"\\n\\t\\t\\tif (len !== \" + e.length + \") {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"stringLength\",\n        expected: e.length,\n        actual: \"len\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), null != e.pattern) {\n        var a = e.pattern;\n        \"string\" == typeof e.pattern && (a = new RegExp(e.pattern, e.patternFlags)), n.push(\"\\n\\t\\t\\tif (!\" + a.toString() + \".test(value))\\n\\t\\t\\t\\t\" + this.makeError({\n          type: \"stringPattern\",\n          expected: '\"' + a.toString().replace('\"', '\\\\\"') + '\"',\n          actual: \"origValue\",\n          messages: t\n        }) + \"\\n\\t\\t\");\n      }\n\n      return null != e.contains && n.push('\\n\\t\\t\\tif (value.indexOf(\"' + e.contains + '\") === -1) {\\n\\t\\t\\t\\t' + this.makeError({\n        type: \"stringContains\",\n        expected: '\"' + e.contains + '\"',\n        actual: \"origValue\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), null != e.enum && (a = JSON.stringify(e.enum), n.push(\"\\n\\t\\t\\tif (\" + a + \".indexOf(value) === -1) {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"stringEnum\",\n        expected: '\"' + e.enum.join(\", \") + '\"',\n        actual: \"origValue\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\")), !0 === e.numeric && n.push(\"\\n\\t\\t\\tif (!\" + V.toString() + \".test(value) ) {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"stringNumeric\",\n        actual: \"origValue\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), !0 === e.alpha && n.push(\"\\n\\t\\t\\tif(!\" + M.toString() + \".test(value)) {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"stringAlpha\",\n        actual: \"origValue\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), !0 === e.alphanum && n.push(\"\\n\\t\\t\\tif(!\" + q.toString() + \".test(value)) {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"stringAlphanum\",\n        actual: \"origValue\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), !0 === e.alphadash && n.push(\"\\n\\t\\t\\tif(!\" + F.toString() + \".test(value)) {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"stringAlphadash\",\n        actual: \"origValue\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), n.push(\"\\n\\t\\treturn value;\\n\\t\"), {\n        sanitized: r,\n        source: n.join(\"\\n\")\n      };\n    }\n\n    function u(t, e, n) {\n      var r = t.schema;\n      t = t.messages;\n      var a = [];\n      a.push('\\n\\t\\tif (typeof value !== \"object\" || value === null || Array.isArray(value)) {\\n\\t\\t\\t' + this.makeError({\n        type: \"object\",\n        actual: \"value\",\n        messages: t\n      }) + \"\\n\\t\\t\\treturn value;\\n\\t\\t}\\n\\t\");\n      var i = r.properties || r.props;\n\n      if (i) {\n        a.push(\"var parentObj = value;\"), a.push(\"var parentField = field;\");\n\n        for (var s = Object.keys(i), u = 0; u < s.length; u++) {\n          var l = s[u],\n              o = E(l),\n              f = A.test(o) ? \".\" + o : \"['\" + o + \"']\",\n              c = \"parentObj\" + f,\n              p = (e ? e + \".\" : \"\") + l;\n          a.push(\"\\n// Field: \" + E(p)), a.push('field = parentField ? parentField + \"' + f + '\" : \"' + o + '\";'), a.push(\"value = \" + c + \";\"), l = this.getRuleFromSchema(i[l]), a.push(this.compileRule(l, n, p, c + \" = context.fn[%%INDEX%%](value, field, parentObj, errors, context);\", c));\n        }\n\n        r.strict && (e = Object.keys(i), a.push(\"\\n\\t\\t\\t\\tfield = parentField;\\n\\t\\t\\t\\tvar invalidProps = [];\\n\\t\\t\\t\\tvar props = Object.keys(parentObj);\\n\\n\\t\\t\\t\\tfor (let i = 0; i < props.length; i++) {\\n\\t\\t\\t\\t\\tif (\" + JSON.stringify(e) + \".indexOf(props[i]) === -1) {\\n\\t\\t\\t\\t\\t\\tinvalidProps.push(props[i]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (invalidProps.length) {\\n\\t\\t\\t\"), \"remove\" == r.strict ? a.push(\"\\n\\t\\t\\t\\t\\tinvalidProps.forEach(function(field) {\\n\\t\\t\\t\\t\\t\\tdelete parentObj[field];\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\") : a.push(\"\\n\\t\\t\\t\\t\\t\" + this.makeError({\n          type: \"objectStrict\",\n          expected: '\"' + e.join(\", \") + '\"',\n          actual: \"invalidProps.join(', ')\",\n          messages: t\n        }) + \"\\n\\t\\t\\t\\t\"), a.push(\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\")), a.push(\"\\n\\t\\t\\treturn parentObj;\\n\\t\\t\");\n      } else a.push(\"\\n\\t\\t\\treturn value;\\n\\t\\t\");\n\n      return {\n        source: a.join(\"\\n\")\n      };\n    }\n\n    function l(t) {\n      var e = t.schema;\n      t = t.messages;\n      var n = [];\n      n.push(\"\\n\\t\\tvar origValue = value;\\n\\t\");\n      var r = !1;\n      return !0 === e.convert && (r = !0, n.push('\\n\\t\\t\\tif (typeof value !== \"number\") {\\n\\t\\t\\t\\tvalue = Number(value);\\n\\t\\t\\t}\\n\\t\\t')), n.push('\\n\\t\\tif (typeof value !== \"number\" || isNaN(value) || !isFinite(value)) {\\n\\t\\t\\t' + this.makeError({\n        type: \"number\",\n        actual: \"origValue\",\n        messages: t\n      }) + \"\\n\\t\\t\\treturn value;\\n\\t\\t}\\n\\t\"), null != e.min && n.push(\"\\n\\t\\t\\tif (value < \" + e.min + \") {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"numberMin\",\n        expected: e.min,\n        actual: \"origValue\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), null != e.max && n.push(\"\\n\\t\\t\\tif (value > \" + e.max + \") {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"numberMax\",\n        expected: e.max,\n        actual: \"origValue\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), null != e.equal && n.push(\"\\n\\t\\t\\tif (value !== \" + e.equal + \") {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"numberEqual\",\n        expected: e.equal,\n        actual: \"origValue\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), null != e.notEqual && n.push(\"\\n\\t\\t\\tif (value === \" + e.notEqual + \") {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"numberNotEqual\",\n        expected: e.notEqual,\n        actual: \"origValue\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), !0 === e.integer && n.push(\"\\n\\t\\t\\tif (value % 1 !== 0) {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"numberInteger\",\n        actual: \"origValue\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), !0 === e.positive && n.push(\"\\n\\t\\t\\tif (value <= 0) {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"numberPositive\",\n        actual: \"origValue\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), !0 === e.negative && n.push(\"\\n\\t\\t\\tif (value >= 0) {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"numberNegative\",\n        actual: \"origValue\",\n        messages: t\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), n.push(\"\\n\\t\\treturn value;\\n\\t\"), {\n        sanitized: r,\n        source: n.join(\"\\n\")\n      };\n    }\n\n    function o(t, e, n) {\n      t = t.schema;\n      var r = [];\n      r.push(\"\\n\\t\\tvar prevErrLen = errors.length;\\n\\t\\tvar errBefore;\\n\\t\\tvar hasValid = false;\\n\\t\\tvar newVal = value;\\n\\t\");\n\n      for (var a = 0; a < t.rules.length; a++) {\n        r.push(\"\\n\\t\\t\\tif (!hasValid) {\\n\\t\\t\\t\\terrBefore = errors.length;\\n\\t\\t\");\n        var i = this.getRuleFromSchema(t.rules[a]);\n        r.push(this.compileRule(i, n, e, \"var tmpVal = context.fn[%%INDEX%%](value, field, parent, errors, context);\", \"tmpVal\")), r.push(\"\\n\\t\\t\\t\\tif (errors.length == errBefore) {\\n\\t\\t\\t\\t\\thasValid = true;\\n\\t\\t\\t\\t\\tnewVal = tmpVal;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\");\n      }\n\n      return r.push(\"\\n\\t\\tif (hasValid) {\\n\\t\\t\\terrors.length = prevErrLen;\\n\\t\\t}\\n\\n\\t\\treturn newVal;\\n\\t\"), {\n        source: r.join(\"\\n\")\n      };\n    }\n\n    function f(t) {\n      return {\n        source: '\\n\\t\\t\\tif (typeof value !== \"function\")\\n\\t\\t\\t\\t' + this.makeError({\n          type: \"function\",\n          actual: \"value\",\n          messages: t.messages\n        }) + \"\\n\\n\\t\\t\\treturn value;\\n\\t\\t\"\n      };\n    }\n\n    function c(t) {\n      var e = t.schema;\n      t = t.messages;\n      var n = [];\n      return n.push(\"\\n\\t\\tif (value !== null && value !== undefined) {\\n\\t\"), e.remove ? n.push(\"\\n\\t\\t\\treturn undefined;\\n\\t\\t\") : n.push(\"\\n\\t\\t\\t\" + this.makeError({\n        type: \"forbidden\",\n        actual: \"value\",\n        messages: t\n      }) + \"\\n\\t\\t\"), n.push(\"\\n\\t\\t}\\n\\t\\treturn value;\\n\\t\"), {\n        source: n.join(\"\\n\")\n      };\n    }\n\n    function p(t) {\n      var e = t.schema;\n      t = t.messages;\n      var n = [];\n      return e.field ? (e.strict ? n.push('\\n\\t\\t\\t\\tif (value !== parent[\"' + e.field + '\"])\\n\\t\\t\\t') : n.push('\\n\\t\\t\\t\\tif (value != parent[\"' + e.field + '\"])\\n\\t\\t\\t'), n.push(\"\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"equalField\",\n        actual: \"value\",\n        expected: JSON.stringify(e.field),\n        messages: t\n      }) + \"\\n\\t\\t\")) : (e.strict ? n.push(\"\\n\\t\\t\\t\\tif (value !== \" + JSON.stringify(e.value) + \")\\n\\t\\t\\t\") : n.push(\"\\n\\t\\t\\t\\tif (value != \" + JSON.stringify(e.value) + \")\\n\\t\\t\\t\"), n.push(\"\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"equalValue\",\n        actual: \"value\",\n        expected: JSON.stringify(e.value),\n        messages: t\n      }) + \"\\n\\t\\t\")), n.push(\"\\n\\t\\treturn value;\\n\\t\"), {\n        source: n.join(\"\\n\")\n      };\n    }\n\n    function h(t) {\n      var e = t.schema;\n      return t = t.messages, {\n        source: \"\\n\\t\\t\\tif (\" + JSON.stringify(e.values || []) + \".indexOf(value) === -1)\\n\\t\\t\\t\\t\" + this.makeError({\n          type: \"enumValue\",\n          expected: '\"' + e.values.join(\", \") + '\"',\n          actual: \"value\",\n          messages: t\n        }) + \"\\n\\n\\t\\t\\treturn value;\\n\\t\\t\"\n      };\n    }\n\n    function m(t) {\n      var e = t.schema;\n      t = t.messages;\n      var n = [],\n          r = \"precise\" == e.mode ? N : T,\n          a = !1;\n      return n.push('\\n\\t\\tif (typeof value !== \"string\") {\\n\\t\\t\\t' + this.makeError({\n        type: \"string\",\n        actual: \"value\",\n        messages: t\n      }) + \"\\n\\t\\t\\treturn value;\\n\\t\\t}\\n\\t\"), e.normalize && (a = !0, n.push(\"\\n\\t\\t\\tvalue = value.trim().toLowerCase();\\n\\t\\t\")), n.push(\"\\n\\t\\tif (!\" + r.toString() + \".test(value))\\n\\t\\t\\t\" + this.makeError({\n        type: \"email\",\n        actual: \"value\",\n        messages: t\n      }) + \"\\n\\n\\t\\treturn value;\\n\\t\"), {\n        sanitized: a,\n        source: n.join(\"\\n\")\n      };\n    }\n\n    function d(t) {\n      var e = t.schema;\n      t = t.messages;\n      var n = [],\n          r = !1;\n      return n.push(\"\\n\\t\\tvar origValue = value;\\n\\t\"), !0 === e.convert && (r = !0, n.push(\"\\n\\t\\t\\tif (!(value instanceof Date)) {\\n\\t\\t\\t\\tvalue = new Date(value);\\n\\t\\t\\t}\\n\\t\\t\")), n.push(\"\\n\\t\\tif (!(value instanceof Date) || isNaN(value.getTime()))\\n\\t\\t\\t\" + this.makeError({\n        type: \"date\",\n        actual: \"origValue\",\n        messages: t\n      }) + \"\\n\\n\\t\\treturn value;\\n\\t\"), {\n        sanitized: r,\n        source: n.join(\"\\n\")\n      };\n    }\n\n    function v(t, e, n) {\n      var r = t.schema;\n      t = t.messages;\n      var a = [];\n      return \"function\" == typeof r.check && (n.customs[e] = {\n        schema: r,\n        messages: t\n      }, a.push('\\n\\t\\t\\tconst rule = context.customs[\"' + e + '\"];\\n\\t\\t\\tconst res = rule.schema.check.call(this, value, rule.schema, \"' + e + '\", parent, context);\\n\\t\\t\\tif (Array.isArray(res)) {\\n\\t\\t\\t\\tres.forEach(err => errors.push(Object.assign({ message: rule.messages[err.type], field }, err)));\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn value;\\n\\t\\t')), {\n        source: a.join(\"\\n\")\n      };\n    }\n\n    function g(t) {\n      var e = t.schema;\n      t = t.messages;\n      var n = [],\n          r = !1;\n      return n.push(\"\\n\\t\\tvar origValue = value;\\n\\t\"), !0 === e.convert && (r = !0, n.push('\\n\\t\\t\\tif (typeof value !== \"boolean\") {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\tvalue === 1\\n\\t\\t\\t\\t|| value === \"true\"\\n\\t\\t\\t\\t|| value === \"1\"\\n\\t\\t\\t\\t|| value === \"on\"\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tvalue = true;\\n\\t\\t\\t\\t} else if (\\n\\t\\t\\t\\tvalue === 0\\n\\t\\t\\t\\t|| value === \"false\"\\n\\t\\t\\t\\t|| value === \"0\"\\n\\t\\t\\t\\t|| value === \"off\"\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tvalue = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t')), n.push('\\n\\t\\tif (typeof value !== \"boolean\")\\n\\t\\t\\t' + this.makeError({\n        type: \"boolean\",\n        actual: \"origValue\",\n        messages: t\n      }) + \"\\n\\n\\t\\treturn value;\\n\\t\"), {\n        sanitized: r,\n        source: n.join(\"\\n\")\n      };\n    }\n\n    function y(t, e, n) {\n      var r = t.schema,\n          a = t.messages;\n\n      if ((t = []).push(\"\\n\\t\\tif (!Array.isArray(value)) {\\n\\t\\t\\t\" + this.makeError({\n        type: \"array\",\n        actual: \"value\",\n        messages: a\n      }) + \"\\n\\t\\t\\treturn value;\\n\\t\\t}\\n\\n\\t\\tvar len = value.length;\\n\\t\"), !1 === r.empty && t.push(\"\\n\\t\\t\\tif (len === 0) {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"arrayEmpty\",\n        actual: \"value\",\n        messages: a\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), null != r.min && t.push(\"\\n\\t\\t\\tif (len < \" + r.min + \") {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"arrayMin\",\n        expected: r.min,\n        actual: \"len\",\n        messages: a\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), null != r.max && t.push(\"\\n\\t\\t\\tif (len > \" + r.max + \") {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"arrayMax\",\n        expected: r.max,\n        actual: \"len\",\n        messages: a\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), null != r.length && t.push(\"\\n\\t\\t\\tif (len !== \" + r.length + \") {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"arrayLength\",\n        expected: r.length,\n        actual: \"len\",\n        messages: a\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), null != r.contains && t.push(\"\\n\\t\\t\\tif (value.indexOf(\" + JSON.stringify(r.contains) + \") === -1) {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"arrayContains\",\n        expected: JSON.stringify(r.contains),\n        actual: \"value\",\n        messages: a\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), !0 === r.unique && t.push(\"\\n\\t\\t\\tif(len > (new Set(value)).size) {\\n\\t\\t\\t\\t\" + this.makeError({\n        type: \"arrayUnique\",\n        expected: \"Array.from(new Set(value.filter((item, index) => value.indexOf(item) !== index)))\",\n        actual: \"value\",\n        messages: a\n      }) + \"\\n\\t\\t\\t}\\n\\t\\t\"), null != r.enum) {\n        var i = JSON.stringify(r.enum);\n        t.push(\"\\n\\t\\t\\tfor (var i = 0; i < value.length; i++) {\\n\\t\\t\\t\\tif (\" + i + \".indexOf(value[i]) === -1) {\\n\\t\\t\\t\\t\\t\" + this.makeError({\n          type: \"arrayEnum\",\n          expected: '\"' + r.enum.join(\", \") + '\"',\n          actual: \"value[i]\",\n          messages: a\n        }) + \"\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\");\n      }\n\n      return null != r.items && (t.push(\"\\n\\t\\t\\tvar arr = value;\\n\\t\\t\\tvar parentField = field;\\n\\t\\t\\tfor (var i = 0; i < arr.length; i++) {\\n\\t\\t\"), r = this.getRuleFromSchema(r.items), t.push(this.compileRule(r, n, e, 'arr[i] = context.fn[%%INDEX%%](arr[i], (parentField ? parentField : \"\") + \"[\" + i + \"]\", parent, errors, context);', \"arr[i]\")), t.push(\"\\n\\t\\t\\t}\\n\\t\\t\")), t.push(\"\\n\\t\\treturn value;\\n\\t\"), {\n        source: t.join(\"\\n\")\n      };\n    }\n\n    function b() {\n      return {};\n    }\n\n    function x(t, e) {\n      for (var n in e) \"object\" == typeof e[n] && null !== e[n] ? (t[n] = t[n] || {}, x(t[n], e[n])) : t[n] = e[n];\n\n      return t;\n    }\n\n    function E(t) {\n      return t.replace(C, function (t) {\n        switch (t) {\n          case '\"':\n          case \"'\":\n          case \"\\\\\":\n            return \"\\\\\" + t;\n\n          case \"\\n\":\n            return \"\\\\n\";\n\n          case \"\\r\":\n            return \"\\\\r\";\n\n          case \"\\u2028\":\n            return \"\\\\u2028\";\n\n          case \"\\u2029\":\n            return \"\\\\u2029\";\n        }\n      });\n    }\n\n    function S() {\n      throw Error(\"Dynamic requires are not currently supported by rollup-plugin-commonjs\");\n    }\n\n    var k,\n        O,\n        j,\n        _,\n        w = {\n      required: \"The '{field}' field is required.\",\n      string: \"The '{field}' field must be a string.\",\n      stringEmpty: \"The '{field}' field must not be empty.\",\n      stringMin: \"The '{field}' field length must be greater than or equal to {expected} characters long.\",\n      stringMax: \"The '{field}' field length must be less than or equal to {expected} characters long.\",\n      stringLength: \"The '{field}' field length must be {expected} characters long.\",\n      stringPattern: \"The '{field}' field fails to match the required pattern.\",\n      stringContains: \"The '{field}' field must contain the '{expected}' text.\",\n      stringEnum: \"The '{field}' field does not match any of the allowed values.\",\n      stringNumeric: \"The '{field}' field must be a numeric string.\",\n      stringAlpha: \"The '{field}' field must be an alphabetic string.\",\n      stringAlphanum: \"The '{field}' field must be an alphanumeric string.\",\n      stringAlphadash: \"The '{field}' field must be an alphadash string.\",\n      number: \"The '{field}' field must be a number.\",\n      numberMin: \"The '{field}' field must be greater than or equal to {expected}.\",\n      numberMax: \"The '{field}' field must be less than or equal to {expected}.\",\n      numberEqual: \"The '{field}' field must be equal to {expected}.\",\n      numberNotEqual: \"The '{field}' field can't be equal to {expected}.\",\n      numberInteger: \"The '{field}' field must be an integer.\",\n      numberPositive: \"The '{field}' field must be a positive number.\",\n      numberNegative: \"The '{field}' field must be a negative number.\",\n      array: \"The '{field}' field must be an array.\",\n      arrayEmpty: \"The '{field}' field must not be an empty array.\",\n      arrayMin: \"The '{field}' field must contain at least {expected} items.\",\n      arrayMax: \"The '{field}' field must contain less than or equal to {expected} items.\",\n      arrayLength: \"The '{field}' field must contain {expected} items.\",\n      arrayContains: \"The '{field}' field must contain the '{expected}' item.\",\n      arrayUnique: \"The '{actual}' value in '{field}' field does not unique the '{expected}' values.\",\n      arrayEnum: \"The '{actual}' value in '{field}' field does not match any of the '{expected}' values.\",\n      boolean: \"The '{field}' field must be a boolean.\",\n      date: \"The '{field}' field must be a Date.\",\n      dateMin: \"The '{field}' field must be greater than or equal to {expected}.\",\n      dateMax: \"The '{field}' field must be less than or equal to {expected}.\",\n      enumValue: \"The '{field}' field value '{expected}' does not match any of the allowed values.\",\n      equalValue: \"The '{field}' field value must be equal to '{expected}'.\",\n      equalField: \"The '{field}' field value must be equal to '{expected}' field value.\",\n      forbidden: \"The '{field}' field is forbidden.\",\n      function: \"The '{field}' field must be a function.\",\n      email: \"The '{field}' field must be a valid e-mail.\",\n      luhn: \"The '{field}' field must be a valid checksum luhn.\",\n      mac: \"The '{field}' field must be a valid MAC address.\",\n      object: \"The '{field}' must be an Object.\",\n      objectStrict: \"The object '{field}' contains forbidden keys: '{actual}'.\",\n      url: \"The '{field}' field must be a valid URL.\",\n      uuid: \"The '{field}' field must be a valid UUID.\",\n      uuidVersion: \"The '{field}' field must be a valid UUID version provided.\"\n    },\n        N = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n        T = /^\\S+@\\S+\\.\\S+$/,\n        A = /^[_$a-zA-Z][_$a-zA-Z0-9]*$/,\n        C = /[\"'\\\\\\n\\r\\u2028\\u2029]/g,\n        V = /^-?[0-9]\\d*(\\.\\d+)?$/,\n        M = /^[a-zA-Z]+$/,\n        q = /^[a-zA-Z0-9]+$/,\n        F = /^[a-zA-Z0-9_-]+$/,\n        R = /^https?:\\/\\/\\S+/,\n        I = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$/i,\n        P = /^((([a-f0-9][a-f0-9]+[-]){5}|([a-f0-9][a-f0-9]+[:]){5})([a-f0-9][a-f0-9])$)|(^([a-f0-9][a-f0-9][a-f0-9][a-f0-9]+[.]){2}([a-f0-9][a-f0-9][a-f0-9][a-f0-9]))$/i;\n\n    return t.prototype.validate = function (t, e) {\n      return this.compile(e)(t);\n    }, t.prototype.wrapRequiredCheckSourceCode = function (t, e, n) {\n      var r = [],\n          a = null != t.schema.default ? JSON.stringify(t.schema.default) : null;\n      return r.push(\"\\n\\t\\t\\tif (value === undefined || value === null) {\\n\\t\\t\"), !0 === t.schema.optional || \"forbidden\" == t.schema.type ? null != a && n ? r.push(n + \" = \" + a + \";\") : r.push(\"// Do nothing, it's an optional field\") : null != a && n ? r.push(n + \" = \" + a + \";\") : r.push(this.makeError({\n        type: \"required\",\n        actual: \"value\",\n        messages: t.messages\n      })), r.push(\"} else {\"), e && r.push(e), r.push(\"\\t\\t}\"), r.join(\"\\n\");\n    }, t.prototype.compile = function (t) {\n      if (null === t || \"object\" != typeof t) throw Error(\"Invalid schema.\");\n      var n = this,\n          r = {\n        index: 0,\n        rules: [],\n        fn: [],\n        customs: {}\n      };\n      if (this.cache.clear(), !0 !== t.$$root) if (Array.isArray(t)) t = this.getRuleFromSchema(t).schema;else {\n        var a = Object.assign({}, t);\n        t = {\n          type: \"object\",\n          strict: a.$$strict,\n          properties: a\n        }, delete a.$$strict;\n      }\n      a = [\"var errors = [];\", \"var field;\"], t = this.getRuleFromSchema(t), a.push(this.compileRule(t, r, null, \"context.fn[%%INDEX%%](value, field, null, errors, context);\", \"value\")), a.push(\"if (errors.length) {\"), a.push('\\n\\t\\t\\treturn errors.map(err => {\\n\\t\\t\\t\\tif (err.message)\\n\\t\\t\\t\\t\\terr.message = err.message\\n\\t\\t\\t\\t\\t\\t.replace(/\\\\{field\\\\}/g, err.field || \"\")\\n\\t\\t\\t\\t\\t\\t.replace(/\\\\{expected\\\\}/g, err.expected != null ? err.expected : \"\")\\n\\t\\t\\t\\t\\t\\t.replace(/\\\\{actual\\\\}/g, err.actual != null ? err.actual : \"\");\\n\\n\\t\\t\\t\\treturn err;\\n\\t\\t\\t});\\n\\t\\t'), a.push(\"}\"), a.push(\"return true;\"), t = a.join(\"\\n\");\n      var i = new Function(\"value\", \"context\", t);\n\n      if (this.opts.debug) {\n        var s = function (t) {\n          return t;\n        };\n\n        \"undefined\" == typeof window && (s = e), r.fn.forEach(function (t, e) {\n          return console.log(s(\"// Context.fn[\" + e + \"]\\n\" + t.toString()));\n        }), console.log(s(\"// Main check function\\n\" + i.toString()));\n      }\n\n      return this.cache.clear(), function (t) {\n        return r.data = t, i.call(n, t, r);\n      };\n    }, t.prototype.compileRule = function (t, e, n, r, a) {\n      var i = [],\n          s = this.cache.get(t.schema);\n      return s ? (t = s, t.cycle = !0, t.cycleStack = [], i.push(this.wrapRequiredCheckSourceCode(t, \"\\n\\t\\t\\t\\tvar rule = context.rules[\" + t.index + \"];\\n\\t\\t\\t\\tif (rule.cycleStack.indexOf(value) === -1) {\\n\\t\\t\\t\\t\\trule.cycleStack.push(value);\\n\\t\\t\\t\\t\\t\" + r.replace(\"%%INDEX%%\", t.index) + \"\\n\\t\\t\\t\\t\\trule.cycleStack.pop(value);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\", a))) : (this.cache.set(t.schema, t), t.index = e.index, e.rules[e.index] = t, e.index++, n = t.ruleFunction.call(this, t, n, e), n.source ? (n = new Function(\"value\", \"field\", \"parent\", \"errors\", \"context\", n.source), e.fn[t.index] = n, i.push(this.wrapRequiredCheckSourceCode(t, r.replace(\"%%INDEX%%\", t.index), a))) : i.push(this.wrapRequiredCheckSourceCode(t))), i.join(\"\\n\");\n    }, t.prototype.getRuleFromSchema = function (t) {\n      var e = this;\n\n      if (\"string\" == typeof t) {\n        var n = t.split(\"|\").map(function (t) {\n          return t.trim();\n        });\n        t = {\n          type: n[0]\n        }, n.slice(1).map(function (e) {\n          var n = e.indexOf(\":\");\n\n          if (-1 !== n) {\n            var r = e.substr(0, n).trim();\n            \"true\" === (e = e.substr(n + 1).trim()) || \"false\" === e ? e = \"true\" === e : Number.isNaN(Number(e)) || (e = Number(e)), t[r] = e;\n          } else e.startsWith(\"no-\") ? t[e.slice(3)] = !1 : t[e] = !0;\n        });\n      } else if (Array.isArray(t)) {\n        if (0 == t.length) throw Error(\"Invalid schema.\");\n        (t = {\n          type: \"multi\",\n          rules: t\n        }).rules.map(function (t) {\n          return e.getRuleFromSchema(t);\n        }).every(function (t) {\n          return 1 == t.schema.optional;\n        }) && (t.optional = !0);\n      }\n\n      if (!(n = this.rules[t.type])) throw Error(\"Invalid '\" + t.type + \"' type in validator schema.\");\n      return {\n        messages: Object.assign({}, this.messages, t.messages),\n        schema: t,\n        ruleFunction: n\n      };\n    }, t.prototype.makeError = function (t) {\n      var e = t.type,\n          n = t.field,\n          r = t.expected,\n          a = t.actual,\n          i = {\n        type: '\"' + e + '\"',\n        message: '\"' + t.messages[e] + '\"'\n      };\n      return i.field = n ? '\"' + n + '\"' : \"field\", r && (i.expected = r), a && (i.actual = a), \"errors.push({ \" + Object.keys(i).map(function (t) {\n        return t + \": \" + i[t];\n      }).join(\", \") + \" });\";\n    }, t.prototype.add = function (t, e) {\n      this.rules[t] = e;\n    }, t;\n  }\n\n  var f = f || {};\n  f.scope = {}, f.ASSUME_ES5 = !1, f.ASSUME_NO_NATIVE_MAP = !1, f.ASSUME_NO_NATIVE_SET = !1, f.defineProperty = f.ASSUME_ES5 || \"function\" == typeof Object.defineProperties ? Object.defineProperty : function (t, e, n) {\n    t != Array.prototype && t != Object.prototype && (t[e] = n.value);\n  }, f.getGlobal = function (t) {\n    return \"undefined\" != typeof window && window === t ? t : \"undefined\" != typeof commonjsGlobal && null != commonjsGlobal ? commonjsGlobal : t;\n  }, f.global = f.getGlobal(commonjsGlobal), f.SYMBOL_PREFIX = \"jscomp_symbol_\", f.initSymbol = function () {\n    f.initSymbol = function () {}, f.global.Symbol || (f.global.Symbol = f.Symbol);\n  }, f.Symbol = function () {\n    var t = 0;\n    return function (e) {\n      return f.SYMBOL_PREFIX + (e || \"\") + t++;\n    };\n  }(), f.initSymbolIterator = function () {\n    f.initSymbol();\n    var t = f.global.Symbol.iterator;\n    t || (t = f.global.Symbol.iterator = f.global.Symbol(\"iterator\")), \"function\" != typeof Array.prototype[t] && f.defineProperty(Array.prototype, t, {\n      configurable: !0,\n      writable: !0,\n      value: function () {\n        return f.arrayIterator(this);\n      }\n    }), f.initSymbolIterator = function () {};\n  }, f.arrayIterator = function (t) {\n    var e = 0;\n    return f.iteratorPrototype(function () {\n      return e < t.length ? {\n        done: !1,\n        value: t[e++]\n      } : {\n        done: !0\n      };\n    });\n  }, f.iteratorPrototype = function (t) {\n    return f.initSymbolIterator(), t = {\n      next: t\n    }, t[f.global.Symbol.iterator] = function () {\n      return this;\n    }, t;\n  }, f.iteratorFromArray = function (t, e) {\n    f.initSymbolIterator(), t instanceof String && (t += \"\");\n    var n = 0,\n        r = {\n      next: function () {\n        if (n < t.length) {\n          var a = n++;\n          return {\n            value: e(a, t[a]),\n            done: !1\n          };\n        }\n\n        return r.next = function () {\n          return {\n            done: !0,\n            value: void 0\n          };\n        }, r.next();\n      }\n    };\n    return r[Symbol.iterator] = function () {\n      return r;\n    }, r;\n  }, f.polyfill = function (t, e) {\n    if (e) {\n      var n = f.global;\n      t = t.split(\".\");\n\n      for (var r = 0; r < t.length - 1; r++) {\n        var a = t[r];\n        a in n || (n[a] = {}), n = n[a];\n      }\n\n      (e = e(r = n[t = t[t.length - 1]])) != r && null != e && f.defineProperty(n, t, {\n        configurable: !0,\n        writable: !0,\n        value: e\n      });\n    }\n  }, f.polyfill(\"Array.prototype.values\", function (t) {\n    return t || function () {\n      return f.iteratorFromArray(this, function (t, e) {\n        return e;\n      });\n    };\n  }, \"es8\", \"es3\"), f.polyfill(\"Array.prototype.keys\", function (t) {\n    return t || function () {\n      return f.iteratorFromArray(this, function (t) {\n        return t;\n      });\n    };\n  }, \"es6\", \"es3\"), f.checkEs6ConformanceViaProxy = function () {\n    try {\n      var t = {},\n          e = Object.create(new f.global.Proxy(t, {\n        get: function (n, r, a) {\n          return n == t && \"q\" == r && a == e;\n        }\n      }));\n      return !0 === e.q;\n    } catch (t) {\n      return !1;\n    }\n  }, f.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS = !1, f.ES6_CONFORMANCE = f.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS && f.checkEs6ConformanceViaProxy(), f.makeIterator = function (t) {\n    f.initSymbolIterator();\n    var e = t[Symbol.iterator];\n    return e ? e.call(t) : f.arrayIterator(t);\n  }, f.owns = function (t, e) {\n    return Object.prototype.hasOwnProperty.call(t, e);\n  }, f.polyfill(\"WeakMap\", function (t) {\n    function e(t) {\n      if (this.id_ = (i += Math.random() + 1).toString(), t) {\n        f.initSymbol(), f.initSymbolIterator(), t = f.makeIterator(t);\n\n        for (var e; !(e = t.next()).done;) e = e.value, this.set(e[0], e[1]);\n      }\n    }\n\n    function n(t) {\n      f.owns(t, a) || f.defineProperty(t, a, {\n        value: {}\n      });\n    }\n\n    function r(t) {\n      var e = Object[t];\n      e && (Object[t] = function (t) {\n        return n(t), e(t);\n      });\n    }\n\n    if (f.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\n      if (t && f.ES6_CONFORMANCE) return t;\n    } else if (function () {\n      if (!t || !Object.seal) return !1;\n\n      try {\n        var e = Object.seal({}),\n            n = Object.seal({}),\n            r = new t([[e, 2], [n, 3]]);\n        return 2 == r.get(e) && 3 == r.get(n) && (r.delete(e), r.set(n, 4), !r.has(e) && 4 == r.get(n));\n      } catch (t) {\n        return !1;\n      }\n    }()) return t;\n\n    var a = \"$jscomp_hidden_\" + Math.random();\n    r(\"freeze\"), r(\"preventExtensions\"), r(\"seal\");\n    var i = 0;\n    return e.prototype.set = function (t, e) {\n      if (n(t), !f.owns(t, a)) throw Error(\"WeakMap key fail: \" + t);\n      return t[a][this.id_] = e, this;\n    }, e.prototype.get = function (t) {\n      return f.owns(t, a) ? t[a][this.id_] : void 0;\n    }, e.prototype.has = function (t) {\n      return f.owns(t, a) && f.owns(t[a], this.id_);\n    }, e.prototype.delete = function (t) {\n      return !(!f.owns(t, a) || !f.owns(t[a], this.id_)) && delete t[a][this.id_];\n    }, e;\n  }, \"es6\", \"es3\"), f.MapEntry = function () {}, f.polyfill(\"Map\", function (t) {\n    function e() {\n      var t = {};\n      return t.previous = t.next = t.head = t;\n    }\n\n    function n(t, e) {\n      var n = t.head_;\n      return f.iteratorPrototype(function () {\n        if (n) {\n          for (; n.head != t.head_;) n = n.previous;\n\n          for (; n.next != n.head;) return n = n.next, {\n            done: !1,\n            value: e(n)\n          };\n\n          n = null;\n        }\n\n        return {\n          done: !0,\n          value: void 0\n        };\n      });\n    }\n\n    function r(t, e) {\n      var n = e && typeof e;\n      \"object\" == n || \"function\" == n ? i.has(e) ? n = i.get(e) : (n = \"\" + ++s, i.set(e, n)) : n = \"p_\" + e;\n      var r = t.data_[n];\n      if (r && f.owns(t.data_, n)) for (t = 0; t < r.length; t++) {\n        var a = r[t];\n        if (e !== e && a.key !== a.key || e === a.key) return {\n          id: n,\n          list: r,\n          index: t,\n          entry: a\n        };\n      }\n      return {\n        id: n,\n        list: r,\n        index: -1,\n        entry: void 0\n      };\n    }\n\n    function a(t) {\n      if (this.data_ = {}, this.head_ = e(), this.size = 0, t) {\n        t = f.makeIterator(t);\n\n        for (var n; !(n = t.next()).done;) n = n.value, this.set(n[0], n[1]);\n      }\n    }\n\n    if (f.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\n      if (t && f.ES6_CONFORMANCE) return t;\n    } else if (function () {\n      if (f.ASSUME_NO_NATIVE_MAP || !t || \"function\" != typeof t || !t.prototype.entries || \"function\" != typeof Object.seal) return !1;\n\n      try {\n        var e = Object.seal({\n          x: 4\n        }),\n            n = new t(f.makeIterator([[e, \"s\"]]));\n        if (\"s\" != n.get(e) || 1 != n.size || n.get({\n          x: 4\n        }) || n.set({\n          x: 4\n        }, \"t\") != n || 2 != n.size) return !1;\n        var r = n.entries(),\n            a = r.next();\n        return !a.done && a.value[0] == e && \"s\" == a.value[1] && !((a = r.next()).done || 4 != a.value[0].x || \"t\" != a.value[1] || !r.next().done);\n      } catch (t) {\n        return !1;\n      }\n    }()) return t;\n\n    f.initSymbol(), f.initSymbolIterator();\n    var i = new WeakMap();\n    a.prototype.set = function (t, e) {\n      var n = r(this, t);\n      return n.list || (n.list = this.data_[n.id] = []), n.entry ? n.entry.value = e : (n.entry = {\n        next: this.head_,\n        previous: this.head_.previous,\n        head: this.head_,\n        key: t,\n        value: e\n      }, n.list.push(n.entry), this.head_.previous.next = n.entry, this.head_.previous = n.entry, this.size++), this;\n    }, a.prototype.delete = function (t) {\n      return !(!(t = r(this, t)).entry || !t.list) && (t.list.splice(t.index, 1), t.list.length || delete this.data_[t.id], t.entry.previous.next = t.entry.next, t.entry.next.previous = t.entry.previous, t.entry.head = null, this.size--, !0);\n    }, a.prototype.clear = function () {\n      this.data_ = {}, this.head_ = this.head_.previous = e(), this.size = 0;\n    }, a.prototype.has = function (t) {\n      return !!r(this, t).entry;\n    }, a.prototype.get = function (t) {\n      return (t = r(this, t).entry) && t.value;\n    }, a.prototype.entries = function () {\n      return n(this, function (t) {\n        return [t.key, t.value];\n      });\n    }, a.prototype.keys = function () {\n      return n(this, function (t) {\n        return t.key;\n      });\n    }, a.prototype.values = function () {\n      return n(this, function (t) {\n        return t.value;\n      });\n    }, a.prototype.forEach = function (t, e) {\n      for (var n, r = this.entries(); !(n = r.next()).done;) n = n.value, t.call(e, n[1], n[0], this);\n    }, a.prototype[Symbol.iterator] = a.prototype.entries;\n    var s = 0;\n    return a;\n  }, \"es6\", \"es3\"), f.assign = \"function\" == typeof Object.assign ? Object.assign : function (t, e) {\n    for (var n = 1; n < arguments.length; n++) {\n      var r = arguments[n];\n      if (r) for (var a in r) f.owns(r, a) && (t[a] = r[a]);\n    }\n\n    return t;\n  }, f.polyfill(\"Object.assign\", function (t) {\n    return t || f.assign;\n  }, \"es6\", \"es3\"), f.polyfill(\"Number.isNaN\", function (t) {\n    return t || function (t) {\n      return \"number\" == typeof t && isNaN(t);\n    };\n  }, \"es6\", \"es3\"), f.checkStringArgs = function (t, e, n) {\n    if (null == t) throw new TypeError(\"The 'this' value for String.prototype.\" + n + \" must not be null or undefined\");\n    if (e instanceof RegExp) throw new TypeError(\"First argument to String.prototype.\" + n + \" must not be a regular expression\");\n    return t + \"\";\n  }, f.polyfill(\"String.prototype.startsWith\", function (t) {\n    return t || function (t, e) {\n      var n = f.checkStringArgs(this, t, \"startsWith\");\n      t += \"\";\n      var r = n.length,\n          a = t.length;\n      e = Math.max(0, Math.min(0 | e, n.length));\n\n      for (var i = 0; i < a && e < r;) if (n[e++] != t[i++]) return !1;\n\n      return i >= a;\n    };\n  }, \"es6\", \"es3\");\n   module.exports = u() ;\n  });\n\n  /*\n  known events:\n  - state-change / meta: the name of the new state\n  - attribute-rejection / meta: animationID, attributes\n  - animation-rejection / meta: animationID\n  - conflicts-on-edit\n  */\n  var logTypes = [{\n    key: 'info',\n    style: 'color: #666;',\n    level: 5\n  }, {\n    key: 'notice',\n    style: 'background: rgba(0, 0, 0, 0.8); color:white; padding:8px;',\n    level: 4\n  }, {\n    key: 'warning',\n    style: 'color: black; background: orange;',\n    level: 2\n  }, {\n    key: 'error',\n    style: 'color: black; background: red;',\n    level: 1\n  }];\n  var lanesMCIDattrsSeperator = '___';\n  var keyframe_sec_key = 'sec_';\n  var elements_data_attribute_name = 'data-motorcortex2-id';\n  var selfContainedContextHandler = 'closed';\n  var logLevel = 1;\n  var testMode = true;\n  var conf = {\n    keyframe_sec_key: keyframe_sec_key,\n    elements_data_attribute_name: elements_data_attribute_name,\n    selfContainedContextHandler: selfContainedContextHandler,\n    logLevel: logLevel,\n    testMode: testMode,\n    logTypes: logTypes\n  };\n\n  window.AudioContext = window.AudioContext || window.webkitAudioContext;\n  var audioContext = new window.AudioContext();\n  function isObject(test) {\n    return _typeof(test) === 'object';\n  }\n  function jsUcfirst(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n  /**\n   subdivision might be rounding the number to its:\n   - units (subdivision = 1)\n   - tenths (subdivision = 10)\n   - hundreds (subdivision = 100)\n   - thousands (subdivision = 1000)\n   @param {number} number\n   @param {number} subdivision\n   @returns {number} the rounded number\n   */\n\n  function roundNumberTo(number, subdivision) {\n    return Math.round(number / subdivision) * subdivision;\n  }\n  function getMCIDandAttrOutOfLaneKey(laneKey) {\n    var laneArray = laneKey.split(lanesMCIDattrsSeperator);\n    return {\n      mcid: laneArray[0],\n      attribute: laneArray[1]\n    };\n  }\n\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n  /**\n   * @returns {string} in the form \"1bc45f78-ab23-jl59\"\n   */\n\n\n  function getAnId() {\n    var underscore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var specialChar = underscore ? '_' : '-';\n    return s4() + s4() + specialChar + s4() + specialChar + s4();\n  }\n  function renderTemplate(templateString, templateVars) {\n    return new Function(\"return `\".concat(templateString, \"`;\")).call(templateVars); // eslint-disable-line no-new-func\n  }\n  function getLaneKey(mcid, attribute) {\n    return \"\".concat(mcid).concat(lanesMCIDattrsSeperator).concat(attribute);\n  }\n  /** @classdesc Helper maintains a number of helpful functions in a single point  */\n\n  var Helper =\n  /*#__PURE__*/\n  function () {\n    function Helper(configuration) {\n      _classCallCheck(this, Helper);\n\n      var logLevel = conf.logLevel;\n\n      if (configuration) {\n        if (Object.prototype.hasOwnProperty.call(configuration, 'logLevel')) {\n          logLevel = configuration.logLevel;\n        }\n      }\n\n      for (var i = 0; i < logTypes.length; i++) {\n        var logType = logTypes[i];\n\n        if (logLevel >= logType.level) {\n          {\n            this[logType.key] = window.console.log.bind(window.console, \"MotorCortex - \".concat(logType.key, \": \"));\n          }\n        } else this[logType.key] = function funct() {};\n      }\n\n      if (logLevel >= 3) {\n        this.log = window.console.log.bind(window.console, 'MotorCortex - ');\n      } else this.log = function funct() {};\n    }\n\n    _createClass(Helper, [{\n      key: \"validateProps\",\n      value: function validateProps(props, rules, constructor) {\n        var v = new index_min();\n        var validationResult = v.validate(props, rules);\n\n        if (validationResult.length > 0) {\n          var errorMessage = \"Error on plugin's \\\"\".concat(constructor.plugin_npm_name, \"\\\" \\\"\").concat(constructor.ClassName, \"\\\" instantiation. Errors (op props):\");\n\n          for (var i = 0; i < validationResult.length; i++) {\n            errorMessage += \"\\n - \".concat(validationResult[i].message, \". \").concat(validationResult[i].actual, \" provided\");\n          }\n\n          console.error(errorMessage); // eslint-disable-line no-console\n\n          return {\n            result: false,\n            errors: validationResult\n          };\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      key: \"getElementByMCID\",\n      value: function getElementByMCID(context, mcid) {\n        return context.rootElement.querySelectorAll(\"[\".concat(elements_data_attribute_name, \"=\\\"\").concat(mcid, \"\\\"]\"))[0];\n      }\n      /**\n       * systole / diastole of the projections\n       * @returns {array} - collection of objects with keys: {id, start, end, startDelta}\n       * */\n\n    }, {\n      key: \"systoleDiastoleProjections\",\n      value: function systoleDiastoleProjections(projections, durationFraction, anchorPoint) {\n        var alteredProjections = [];\n\n        for (var i = 0; i < projections.length; i++) {\n          var projectedIncident = projections[i];\n          var msInResizedPortion = projectedIncident.parentMillisecond - anchorPoint;\n\n          if (durationFraction !== 1) {\n            alteredProjections.push({\n              id: projectedIncident.incident.id,\n              start: msInResizedPortion * durationFraction + anchorPoint,\n              end: msInResizedPortion * durationFraction + anchorPoint + projectedIncident.incident.duration * durationFraction,\n              startDelta: msInResizedPortion * durationFraction + anchorPoint - projectedIncident.millisecond\n            });\n          }\n        }\n\n        return alteredProjections;\n      }\n    }]);\n\n    return Helper;\n  }();\n  var helper = new Helper();\n\n  var Channel =\n  /*#__PURE__*/\n  function () {\n    function Channel(props) {\n      _classCallCheck(this, Channel);\n\n      this.runTimeInfo = props.runTimeInfo;\n      this.context = props.context;\n      this.onInitialise();\n      this.getIncidentById = props.getIncidentById; // this.type = \"plain\";\n    }\n\n    _createClass(Channel, [{\n      key: \"onInitialise\",\n      value: function onInitialise() {}\n    }, {\n      key: \"_resize\",\n      value: function _resize() {\n        helper.log('Please overwite the _resize method of the Channel');\n      }\n      /**\n       * @param {array} incidents - A collection of Incidents in the form:\n       * {\n       *  millisecond\n       *  incident\n       *  id\n       * }\n       * @returns either:\n       *   {\n       *       result:true,\n       *       execute: // an array of functions that when executed it will add the Incidents on the Channels\n       *   }\n       *   or\n       *   {\n       *       result: false,\n       *       errors\n       *   }\n       */\n\n    }, {\n      key: \"addIncidents\",\n      value: function addIncidents(incidents) {\n        // first check the Incidents addition directly using the checkAddition method of the class\n        var result = this.checkAddition(incidents);\n\n        if (result.result === false) {\n          return {\n            result: false,\n            errors: result.errors\n          };\n        }\n\n        return {\n          result: true,\n          execute: result.execute\n        };\n      }\n      /**\n         * It initially checks if the edit is allowed and if it is it retuns an array of executable functions\n         * that apply the change\n         * @param {array} incidents - the list of the incidents to edit in an array format [object, object, ...]\n         * @param {int} millisecondsDelta - the milliseconds delta to apply to the incidents\n         * @returns {object} -\n         * either:\n         {\n            result: true,\n            execute: // array of functions to be executed in order to apply the edit\n         }\n         or\n         {\n             result: false,\n             errors: // an array including all the errors / conflicts found on edit\n         }\n        */\n\n    }, {\n      key: \"editIncidents\",\n      value: function editIncidents(incidents, millisecondsDelta) {\n        // first check the Incidents addition directly using the checkAddition method of the class\n        var result = this.checkEdit(incidents, millisecondsDelta);\n\n        if (result.result === false) {\n          return {\n            result: false,\n            errors: result.errors\n          };\n        }\n\n        return {\n          result: true,\n          execute: result.execute\n        };\n      }\n      /**\n         * Method to remove incidents\n         * @param {array} incidents - the ids of the incidents to remove in an array format\n         * @param {object} props\n         * @retuns {object} -\n         * either:\n         {\n            result: true,\n            execute: // array of functions to be executed in order to apply the edit\n         }\n         or\n         {\n             result: false,\n             errors: // an array including all the errors / conflicts found on edit\n         }\n        */\n\n    }, {\n      key: \"removeIncidents\",\n      value: function removeIncidents(incidents) {\n        var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        // first check the Incidents addition directly using the checkAddition method of the class\n        var result = this.checkDelete(incidents, props);\n\n        if (result.result === false) {\n          return {\n            result: false,\n            errors: result.errors\n          };\n        }\n\n        return {\n          result: true,\n          execute: result.execute\n        };\n      }\n      /**\n       * This method is invoked whenever a CASI (the owner of the Channel) enters\n       * the tree of another clip, so the scratch values of all first Incidents of\n       * each channel should be recalculated based on the context. All Channels\n       * that extend Channel can rewrite this method accordingly\n       * @param {string} contextId - The id of the context of the Clip Copy according to which\n       *      we are going to recalc the scratch values\n       * */\n      // eslint-disable-next-line no-unused-vars\n\n    }, {\n      key: \"recalcScratchValues\",\n      value: function recalcScratchValues(contextId) {}\n      /**\n         * On this method the user defines the specific rules that apply on the plugin itself and on the Incidents of the plugin itself\n         * The method should either return {result: true} or {result: false, errors:[{error-object}]}, where error-object has the structure:\n         *  {\n                incident: // reference to the Incident object that has bee discarded\n                error: // text\n            }\n        * @param {array} incidents - a colleciton of all incidents to be added on the form:\n        *\n            {\n                id\n                millisecond\n                incident\n            }\n        * @returns {object} -\n        * either:\n            {\n                result:true,\n                execute: // a function that when executed it will add the Incidents on the Channels\n            }\n            or\n            {\n                result: false,\n                errors\n            }\n        */\n      // eslint-disable-next-line no-unused-vars\n\n    }, {\n      key: \"checkAddition\",\n      value: function checkAddition(incidents) {\n        return {\n          result: true,\n          execute: function execute() {}\n        };\n      } // eslint-disable-next-line no-unused-vars\n\n    }, {\n      key: \"checkEdit\",\n      value: function checkEdit(incidentsArray, millisecondsDelta) {\n        return {\n          result: true,\n          execute: function execute() {}\n        };\n      } // eslint-disable-next-line no-unused-vars\n\n    }, {\n      key: \"checkDelete\",\n      value: function checkDelete(incidentIds) {\n        return {\n          result: true,\n          execute: function execute() {}\n        };\n      } // eslint-disable-next-line no-unused-vars\n\n    }, {\n      key: \"checkResizedIncidents\",\n      value: function checkResizedIncidents(incidents) {\n        return {\n          result: true,\n          execute: function execute() {}\n        };\n      }\n    }, {\n      key: \"moveTo\",\n      value: function moveTo(from, to, contextId) {} // eslint-disable-line no-unused-vars\n\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'plain';\n      }\n    }]);\n\n    return Channel;\n  }();\n\n  /**\n   * this method acts as a proxy to duration setter by taking a fraction and not\n   * an absolute number for the overall duration of the Leaf\n   * */\n  function systoleDiastole(payload) {\n    payload.descriptor.value = function systoleDiastoleFunct(durationFraction) {\n      this.duration = this.duration * durationFraction;\n    };\n  }\n\n  var _DIRECTIONS = {\n    _UP: 'up',\n    _DOWN: 'down'\n  };\n  var _BYPASS = 'native.tree.bypass';\n\n  var Leaf = _decorate(null, function (_initialize) {\n    var Leaf = function Leaf() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, Leaf);\n\n      _initialize(this);\n\n      // parentNode is a reference to the parent Node the Leaf is attached to (if any)\n      this.parentNode = null;\n      this.isNode = false;\n\n      if (Object.prototype.hasOwnProperty.call(props, 'id')) {\n        this.id = props.id;\n      } else {\n        this.id = getAnId();\n      }\n\n      this.props = props;\n    };\n\n    return {\n      F: Leaf,\n      d: [{\n        kind: \"get\",\n        key: \"delay\",\n        value: function delay() {\n          if (Object.prototype.hasOwnProperty.call(this.props, 'delay')) {\n            return this.props.delay;\n          }\n\n          return 0;\n        }\n      }, {\n        kind: \"set\",\n        key: \"delay\",\n        value: function delay(val) {\n          if (val !== 0) {\n            this.props.delay = val;\n          }\n        }\n      }, {\n        kind: \"get\",\n        key: \"hiatus\",\n        value: function hiatus() {\n          if (Object.prototype.hasOwnProperty.call(this.props, 'hiatus')) {\n            return this.props.hiatus;\n          }\n\n          return 0;\n        }\n      }, {\n        kind: \"set\",\n        key: \"hiatus\",\n        value: function hiatus(val) {\n          if (val !== 0) {\n            this.props.hiatus = val;\n          }\n        }\n      }, {\n        kind: \"get\",\n        key: \"repeats\",\n        value: function repeats() {\n          if (Object.prototype.hasOwnProperty.call(this.props, 'repeats')) {\n            return this.props.repeats;\n          }\n\n          return 1;\n        }\n      }, {\n        kind: \"set\",\n        key: \"repeats\",\n        value: function repeats(val) {\n          this.props.repeats = val;\n        }\n        /**\n         * the full duration of the Leaf taking in consideration all: delay, duration, hiatus and\n         * repeats factor\n         * */\n\n      }, {\n        kind: \"get\",\n        key: \"duration\",\n        value: function duration() {\n          return this.repeats * (this.delay + this.props.duration + this.hiatus);\n        }\n        /**\n         * the setter sets the overall duration of the Leaf by altering all\n         * delay, duration and hiatus properties of it\n         * */\n\n      }, {\n        kind: \"set\",\n        key: \"duration\",\n        value: function duration(milliseconds) {\n          var fraction = milliseconds / this.duration;\n          this.props.duration *= fraction;\n          this.hiatus *= fraction;\n          this.delay *= fraction;\n        }\n        /**\n         * setNewDuration method sets the new FULL duration as it derives from the\n         * delay, duration, hiatus and repeats factors\n         * */\n\n      }, {\n        kind: \"method\",\n        key: \"setNewDuration\",\n        value: function setNewDuration(newDuration) {\n          this.duration = newDuration;\n          this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n            selfExecute: false,\n            direction: _DIRECTIONS._UP\n          });\n        }\n      }, {\n        kind: \"method\",\n        decorators: [systoleDiastole],\n        key: \"systoleDiastole\",\n        value: function systoleDiastole() {}\n      }, {\n        kind: \"get\",\n        key: \"hasParent\",\n        value: function hasParent() {\n          if (this.parentNode === null) {\n            return false;\n          }\n\n          return true;\n        }\n      }, {\n        kind: \"method\",\n        key: \"attachToNode\",\n        value: function attachToNode(node) {\n          this.parentNode = node;\n        }\n      }, {\n        kind: \"method\",\n        key: \"detachFromParent\",\n        value: function detachFromParent() {\n          this.parentNode = null;\n        }\n        /**\n        @param {string} name - the name of the message\n        @param {object} payload - the payload of the message\n        @param {object} target - specifies the target of the message in a key-value pairs object\n        @param {object} options - in the form:\n        {\n            direction (either _UP or _DOWN)\n            selfExecute (either true which means the Leaf should try to handle the message itself or\n                false which means the Leaf should directly forward the message to its parent)\n        }\n        @returns The expected result of this method is on the form:\n        {\n            response: an object the structure of which depends on the name of the message\n                and maybe even on the payload\n            responder: a direct reference to the lead that actually responded\n            (only valid for direaction _DOWN) positionDelta: the position delta of the responder compared to the requester\n        }\n        * */\n\n      }, {\n        kind: \"method\",\n        key: \"putMessageOnPipe\",\n        value: function putMessageOnPipe(name, payload, target) {\n          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n          // default direction: _DOWN\n          if (!Object.prototype.hasOwnProperty.call(options, 'direction')) {\n            options.direction = _DIRECTIONS._DOWN;\n          } // default positionDelta = 0\n\n\n          if (options.direction === _DIRECTIONS._DOWN && !Object.prototype.hasOwnProperty.call(options, 'positionDelta')) {\n            options.positionDelta = 0;\n          }\n\n          if (options.selfExecute === true) {\n            // if the Leaf has a \"handle<name>\" method with the first letter of\n            // name in Capital it runs it\n            var handlingMethodName = \"handle\".concat(jsUcfirst(name));\n            var capable = typeof this[handlingMethodName] === 'function';\n\n            if (capable) {\n              var response = this[handlingMethodName](target, payload);\n\n              if (response !== _BYPASS) {\n                var result = {\n                  response: response,\n                  responder: this\n                };\n\n                if (options.direction === _DIRECTIONS._UP) {\n                  return result;\n                }\n\n                return [_objectSpread2({}, result, {\n                  positionDelta: options.positionDelta\n                })];\n              }\n            }\n          }\n\n          if (options.direction === _DIRECTIONS._UP) {\n            if (this.hasParent) {\n              return this.parentNode.putMessageOnPipe(name, payload, target, {\n                selfExecute: true,\n                direction: _DIRECTIONS._UP\n              });\n            } // if the message reaches the top of the tree without finding any liable target\n\n\n            return {\n              response: false,\n              responder: null\n            };\n          } // _CONST._DIRECTIONS._DOWN\n\n\n          return [];\n        }\n      }, {\n        kind: \"method\",\n        key: \"bypass\",\n        value: function bypass() {\n          return _BYPASS;\n        } // Postion on Pyramidion\n        // \"Pyramidion\" is the uppermost piece or capstone of an Egyptian pyramid.\n        // To us \"Pyramidion\" is the top Node of the Tree to which this Leaf belongs to\n        // and the following infrastructure implements it\n\n      }, {\n        kind: \"get\",\n        key: \"positionOnPyramidion\",\n        value: function positionOnPyramidion() {\n          return this.getPositionOnPyramidion();\n        }\n      }, {\n        kind: \"method\",\n        key: \"getPositionOnPyramidion\",\n        value: function getPositionOnPyramidion() {\n          var delta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n          if (!this.hasParent) {\n            return delta;\n          } else {\n            var result = this.putMessageOnPipe('getPositionOnPyramidion', {\n              delta: delta,\n              id: this.id\n            }, 'Parent', {\n              selfExecute: false,\n              direction: _DIRECTIONS._UP\n            });\n            return result.response;\n          }\n        }\n      }]\n    };\n  });\n\n  var _LEAFALREADYASSIGNED = 'Leaf has already been attached to another Node';\n  var _NEGATIVEPOSITIONNOTALLOWED = 'Negative positioning of childs on nodes is not allowed';\n  var _LEAFNOTFOUND = \"The Leaf with the requested id couldn't be found on the Tree\";\n\n  var Node = _decorate(null, function (_initialize, _Leaf) {\n    var Node =\n    /*#__PURE__*/\n    function (_Leaf2) {\n      _inherits(Node, _Leaf2);\n\n      function Node() {\n        var _this;\n\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, Node);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(Node).call(this, props));\n\n        _initialize(_assertThisInitialized(_this));\n\n        _this.isNode = true;\n        /**\n              The object holds the Incidents of the Scene on the format:\n              {\n                  <id>: {\n                        id // the id of the Incident object\n                        leaf // the incident object\n                        position // the position of the incident\n                  },\n                  ...\n              }\n               */\n\n        _this.children = {};\n        _this.calculatedDuration = 0;\n        return _this;\n      }\n\n      return Node;\n    }(_Leaf);\n\n    return {\n      F: Node,\n      d: [{\n        kind: \"get\",\n        key: \"duration\",\n        value: function duration() {\n          return this.calculatedDuration;\n        }\n      }, {\n        kind: \"set\",\n        key: \"duration\",\n        value: function duration(newDuration) {\n          var durationFraction = newDuration / this.duration;\n\n          if (this.props) {\n            if (Object.prototype.hasOwnProperty.call(this.props, 'duration')) {\n              this.props.duration = newDuration;\n            }\n          }\n\n          this.calculatedDuration = newDuration;\n\n          for (var childKey in this.children) {\n            var child = this.children[childKey];\n            this.editPosition(child.id, child.position * durationFraction, true);\n            child.leaf.systoleDiastole(durationFraction);\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"setNewDuration\",\n        value: function setNewDuration(newDuration) {\n          this.duration = newDuration;\n          this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n            selfExecute: false,\n            direction: _DIRECTIONS._UP\n          });\n        }\n      }, {\n        kind: \"method\",\n        key: \"_calculateDuration\",\n        value: function _calculateDuration() {\n          var duration = 0;\n\n          for (var childKey in this.children) {\n            var child = this.children[childKey];\n\n            if (child.position + child.leaf.duration > duration) {\n              duration = child.position + child.leaf.duration;\n            }\n          }\n\n          if (duration === this.calculatedDuration) {\n            return false;\n          }\n\n          if (this.props) {\n            if (Object.prototype.hasOwnProperty.call(this.props, 'duration')) {\n              this.props.duration = duration;\n            }\n          }\n\n          this.calculatedDuration = duration;\n          return true;\n        }\n      }, {\n        kind: \"method\",\n        decorators: [systoleDiastole],\n        key: \"systoleDiastole\",\n        value: function systoleDiastole() {} // eslint-disable-next-line no-unused-vars\n\n      }, {\n        kind: \"method\",\n        key: \"handleRecalcDuration\",\n        value: function handleRecalcDuration(target, payload) {\n          if (this._calculateDuration()) {\n            return this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n              selfExecute: false,\n              direction: _DIRECTIONS._UP\n            });\n          }\n\n          return true;\n        }\n      }, {\n        kind: \"method\",\n        key: \"getLeafById\",\n        value: function getLeafById(id) {\n          var onlyDirectChild = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n          if (Object.prototype.hasOwnProperty.call(this.children, id)) {\n            return this.children[id].leaf;\n          }\n\n          if (onlyDirectChild === false) {\n            for (var child in this.children) {\n              var childLeaf = this.children[child].leaf;\n\n              if (childLeaf.isNode) {\n                var leaf = childLeaf.getLeafById(id);\n\n                if (leaf != null) {\n                  return leaf;\n                }\n              }\n            }\n          } else {\n            return null;\n          }\n\n          return null;\n        }\n      }, {\n        kind: \"method\",\n        key: \"getLeafPosition\",\n        value: function getLeafPosition(id) {\n          if (Object.prototype.hasOwnProperty.call(this.children, id)) {\n            return this.children[id].position;\n          }\n\n          var res = this.putMessageOnPipe('getLeafPosition', {\n            id: id\n          }, 'Groups', {\n            selfExecute: false,\n            direction: _DIRECTIONS._DOWN\n          });\n\n          if (res.length > 0) {\n            return res[0].positionDelta + res[0].response;\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"handleGetLeafPosition\",\n        value: function handleGetLeafPosition(target, payload) {\n          return this.getLeafPosition(payload.id);\n        }\n      }, {\n        kind: \"method\",\n        key: \"checkAddition\",\n        value: function checkAddition(leaf, position) {\n          if (leaf.hasParent) {\n            return {\n              result: false,\n              reason: _LEAFALREADYASSIGNED\n            };\n          }\n\n          if (position < 0) {\n            return {\n              result: false,\n              reason: _NEGATIVEPOSITIONNOTALLOWED\n            };\n          }\n\n          return {\n            result: true\n          };\n        }\n      }, {\n        kind: \"method\",\n        key: \"addChild\",\n        value: function addChild(leaf, position) {\n          // this hasParent check occurs here as an extra security check so it\n          // gets executed regardless if the user wants to perform checks or not\n          if (leaf.hasParent) {\n            return {\n              result: false,\n              reason: _LEAFALREADYASSIGNED\n            };\n          }\n\n          this.children[leaf.id] = {\n            id: leaf.id,\n            leaf: leaf,\n            position: position\n          };\n          leaf.attachToNode(this);\n          this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n            selfExecute: true,\n            direction: _DIRECTIONS._UP\n          });\n          return {\n            result: true\n          };\n        }\n      }, {\n        kind: \"method\",\n        key: \"checkRemoveChild\",\n        value: function checkRemoveChild(id) {\n          if (!Object.prototype.hasOwnProperty.call(this.children, id)) {\n            return {\n              result: false,\n              reason: _LEAFNOTFOUND\n            };\n          }\n\n          return {\n            result: true\n          };\n        }\n      }, {\n        kind: \"method\",\n        key: \"removeChild\",\n        value: function removeChild(id) {\n          this.children[id].leaf.detachFromParent();\n          delete this.children[id];\n          this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n            selfExecute: true,\n            direction: _DIRECTIONS._UP\n          });\n          return {\n            result: true\n          };\n        }\n      }, {\n        kind: \"method\",\n        key: \"checkEditPosition\",\n        value: function checkEditPosition(id, position) {\n          if (position < 0) {\n            return {\n              result: false,\n              reason: _NEGATIVEPOSITIONNOTALLOWED\n            };\n          }\n\n          if (!Object.prototype.hasOwnProperty.call(this.children, id)) {\n            return {\n              result: false,\n              reason: _LEAFNOTFOUND\n            };\n          }\n\n          return {\n            result: true\n          };\n        }\n      }, {\n        kind: \"method\",\n        key: \"editPosition\",\n        value: function editPosition(id, position) {\n          var bypassRecalcDuration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n          if (Object.prototype.hasOwnProperty.call(this.children, id)) {\n            this.children[id].position = position;\n\n            if (bypassRecalcDuration === false) {\n              this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n                selfExecute: true,\n                direction: _DIRECTIONS._UP\n              });\n            }\n\n            return {\n              result: true\n            };\n          }\n        }\n        /**\n          The expected result of this method depends on the direction of the message\n          The direction might either be _UP or _DOWN.\n          In the case of _UP the expected result is identical as on Leaf:\n          {\n              response: an object the structure of which depends on the name of the message\n                  and maybe even on the payload\n              responder: a direct reference to the lead that actually responded\n          }\n          In the case of _DOWN though, where multiple Leafs might be eligible in the tree\n          for handling the message the result is on the form:\n          [\n              {\n                  response: an object the structure of which depends on the name of the message\n                      and maybe even on the payload\n                  responder: a direct reference to the lead that actually responded\n                  positionDelta: the position delta of the responder compared to the requester\n              }\n          ]\n          */\n\n      }, {\n        kind: \"method\",\n        key: \"putMessageOnPipe\",\n        value: function putMessageOnPipe(name, payload, target) {\n          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n          // default direction: _DOWN\n          if (!Object.prototype.hasOwnProperty.call(options, 'direction')) {\n            options.direction = _DIRECTIONS._DOWN;\n          } // default positionDelta = 0\n\n\n          if (options.direction === _DIRECTIONS._DOWN && !Object.prototype.hasOwnProperty.call(options, 'positionDelta')) {\n            options.positionDelta = 0;\n          }\n\n          if (options.direction === _DIRECTIONS._UP) {\n            // if the direction is up\n            return _get(_getPrototypeOf(Node.prototype), \"putMessageOnPipe\", this).call(this, name, payload, target, options); // act exactly as any other Leaf\n          }\n\n          var result = _get(_getPrototypeOf(Node.prototype), \"putMessageOnPipe\", this).call(this, name, payload, target, options);\n\n          if (result.length > 0) {\n            return result;\n          }\n\n          for (var child in this.children) {\n            var leaf = this.children[child].leaf;\n\n            var newOptions = _objectSpread2({}, options, {\n              selfExecute: true,\n              positionDelta: options.positionDelta + this.children[child].position\n            });\n\n            result = result.concat(leaf.putMessageOnPipe(name, payload, target, newOptions));\n          }\n\n          return result;\n        }\n      }, {\n        kind: \"method\",\n        key: \"handleGetPositionOnPyramidion\",\n        value: function handleGetPositionOnPyramidion(target, payload) {\n          var delta = payload.delta + this.getLeafPosition(payload.id);\n          return this.getPositionOnPyramidion(delta);\n        }\n      }]\n    };\n  }, Leaf);\n\n  function block(pld) {\n    pld.descriptor.value = function blockfunct(description) {\n      if (this.blockID === undefined) {\n        this.blockID = getAnId();\n      }\n\n      this.DescriptiveIncident.putMessageOnPipe('setBlock', {\n        id: this.blockID,\n        description: description,\n        incidentId: this.DescriptiveIncident.id,\n        realIncidentId: this.id\n      }, 'rootClip', {\n        selfExecute: true,\n        direction: _DIRECTIONS._UP\n      });\n    };\n  }\n\n  function handleResize(pld) {\n    pld.descriptor.value = function handleResizeFunct(target) {\n      // eslint-disable-line no-unused-vars\n      if (this.id === target) {\n        return this;\n      }\n\n      return this.bypass();\n    };\n  }\n\n  function unblock(pld) {\n    pld.descriptor.value = function unblockFunct() {\n      // eslint-disable-line no-unused-vars\n      this.DescriptiveIncident.putMessageOnPipe('unBlock', {\n        id: this.blockID\n      }, 'rootClip', {\n        selfExecute: true,\n        direction: _DIRECTIONS._UP\n      });\n    };\n  }\n\n  var Group = _decorate(null, function (_initialize, _Node) {\n    var Group =\n    /*#__PURE__*/\n    function (_Node2) {\n      _inherits(Group, _Node2);\n\n      function Group(attrs, props) {\n        var _this;\n\n        _classCallCheck(this, Group);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(Group).call(this, props));\n\n        _initialize(_assertThisInitialized(_this));\n\n        _this.mc_plugin_npm_name = 'motor-cortex-js';\n        _this.plugin_channel_class = Channel;\n        _this.hasIncidents = true;\n\n        _this.onGroupInitialise();\n\n        _this.calculatedDuration = 0;\n        return _this;\n      }\n\n      return Group;\n    }(_Node);\n\n    return {\n      F: Group,\n      d: [{\n        kind: \"method\",\n        key: \"onGroupInitialise\",\n        value: function onGroupInitialise() {// called when group gets initialised\n        }\n      }, {\n        kind: \"method\",\n        key: \"handleAddIncident\",\n        value: function handleAddIncident(target, payload) {\n          if (this.id === target) {\n            var incidentFromDescription = payload.incidentFromDescription;\n            var theIncident = incidentFromDescription(payload.incident, payload.contextData, payload.audio); // in the case that an audio clip tries to process an non-audio incident or\n            // a non-audio incident tries to process an audio incident the result from incidentFromDescription is null\n            // in such a case there should be no candidate return, so this.bypass()\n\n            if (theIncident === null) {\n              return this.bypass();\n            }\n\n            return theIncident;\n          }\n\n          return this.bypass();\n        }\n      }, {\n        kind: \"method\",\n        key: \"handleMoveIncident\",\n        value: function handleMoveIncident(target, payload) {\n          if (this.id === target) {\n            var res = this.getLeafById(payload.incidentId, true);\n\n            if (res === null) {\n              return this.bypass();\n            }\n\n            return res;\n          }\n\n          return this.bypass();\n        }\n      }, {\n        kind: \"method\",\n        key: \"handleRemoveIncident\",\n        value: function handleRemoveIncident(target, payload) {\n          if (this.id === target) {\n            var res = this.getLeafById(payload.incidentId, true);\n\n            if (res === null) {\n              return this.bypass();\n            }\n\n            return res;\n          }\n\n          return this.bypass();\n        }\n      }, {\n        kind: \"method\",\n        decorators: [handleResize],\n        key: \"handleResize\",\n        value: function handleResize() {}\n      }, {\n        kind: \"method\",\n        key: \"removeChild\",\n        value: function removeChild(id) {\n          this.children[id].leaf.lastWish();\n\n          _get(_getPrototypeOf(Group.prototype), \"removeChild\", this).call(this, id);\n        }\n        /**\n         * Returns an object that has the key of the npm plugin name the Channel of which manages the specific Incident\n         * With the same logic all Incidents that belong to this Group as categorised by plugin / channel on the same object\n         */\n\n      }, {\n        kind: \"method\",\n        key: \"getIncidentsByChannel\",\n        value: function getIncidentsByChannel() {\n          var adjustMillisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n          var parentMillisecond = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n          // initially it only puts itself onthe incidentsByPlugin array, exactly as the plain Incidents do\n          var incidentsByPlugin = {};\n          incidentsByPlugin['motor-cortex-js'] = [{\n            millisecond: adjustMillisecond,\n            parentMillisecond: parentMillisecond,\n            incident: this,\n            id: this.id\n          }]; // proceed to gather the contained incidents as well\n\n          for (var childId in this.children) {\n            var child = this.children[childId];\n            var incidentsToAdd = child.leaf.getIncidentsByChannel(adjustMillisecond + child.position, adjustMillisecond);\n\n            for (var key in incidentsToAdd) {\n              if (Object.prototype.hasOwnProperty.call(incidentsByPlugin, key)) {\n                incidentsByPlugin[key] = incidentsByPlugin[key].concat(incidentsToAdd[key]);\n              } else {\n                incidentsByPlugin[key] = incidentsToAdd[key];\n              }\n            }\n          }\n\n          return incidentsByPlugin;\n        }\n      }, {\n        kind: \"method\",\n        key: \"lastWish\",\n        value: function lastWish() {\n          for (var childId in this.children) {\n            this.children[childId].leaf.lastWish();\n          }\n        }\n      }, {\n        kind: \"method\",\n        decorators: [block],\n        key: \"setBlock\",\n        value: function setBlock() {}\n      }, {\n        kind: \"method\",\n        decorators: [unblock],\n        key: \"unblock\",\n        value: function unblock() {}\n      }]\n    };\n  }, Node);\n\n  var lodash_filter = createCommonjsModule(function (module, exports) {\n  /**\n   * Lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n   * Copyright JS Foundation and other contributors <https://js.foundation/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n  /** Error message constants. */\n\n  var FUNC_ERROR_TEXT = 'Expected a function';\n  /** Used to stand-in for `undefined` hash values. */\n\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n  /** Used as the maximum memoize cache size. */\n\n  var MAX_MEMOIZE_SIZE = 500;\n  /** Used to compose bitmasks for value comparisons. */\n\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n  /** Used as references for various `Number` constants. */\n\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991;\n  /** `Object#toString` result references. */\n\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]';\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n  /** Used to match property names within property paths. */\n\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n  /** Used to match backslashes in property paths. */\n\n  var reEscapeChar = /\\\\(\\\\)?/g;\n  /** Used to detect host constructors (Safari). */\n\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n  /** Used to detect unsigned integer values. */\n\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n  /** Used to identify `toStringTag` values of typed arrays. */\n\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n  /** Detect free variable `global` from Node.js. */\n\n  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n  /** Detect free variable `self`. */\n\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n  /** Used as a reference to the global object. */\n\n  var root = freeGlobal || freeSelf || Function('return this')();\n  /** Detect free variable `exports`. */\n\n  var freeExports =  exports && !exports.nodeType && exports;\n  /** Detect free variable `module`. */\n\n  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n  /** Detect the popular CommonJS extension `module.exports`. */\n\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n  /** Detect free variable `process` from Node.js. */\n\n  var freeProcess = moduleExports && freeGlobal.process;\n  /** Used to access faster Node.js helpers. */\n\n  var nodeUtil = function () {\n    try {\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }();\n  /* Node.js helper references. */\n\n\n  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n\n\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n\n    return result;\n  }\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n\n\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n\n    return array;\n  }\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n\n\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n\n\n  function baseProperty(key) {\n    return function (object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n\n\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n\n    return result;\n  }\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n\n\n  function baseUnary(func) {\n    return function (value) {\n      return func(value);\n    };\n  }\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n\n\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n\n\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n    map.forEach(function (value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n\n\n  function overArg(func, transform) {\n    return function (arg) {\n      return func(transform(arg));\n    };\n  }\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n\n\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n    set.forEach(function (value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n  /** Used for built-in method references. */\n\n\n  var arrayProto = Array.prototype,\n      funcProto = Function.prototype,\n      objectProto = Object.prototype;\n  /** Used to detect overreaching core-js shims. */\n\n  var coreJsData = root['__core-js_shared__'];\n  /** Used to resolve the decompiled source of functions. */\n\n  var funcToString = funcProto.toString;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty = objectProto.hasOwnProperty;\n  /** Used to detect methods masquerading as native. */\n\n  var maskSrcKey = function () {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n    return uid ? 'Symbol(src)_1.' + uid : '';\n  }();\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n\n\n  var nativeObjectToString = objectProto.toString;\n  /** Used to detect if a method is native. */\n\n  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&').replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');\n  /** Built-in value references. */\n\n  var Buffer = moduleExports ? root.Buffer : undefined,\n      Symbol = root.Symbol,\n      Uint8Array = root.Uint8Array,\n      propertyIsEnumerable = objectProto.propertyIsEnumerable,\n      splice = arrayProto.splice,\n      symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n  var nativeGetSymbols = Object.getOwnPropertySymbols,\n      nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n      nativeKeys = overArg(Object.keys, Object);\n  /* Built-in method references that are verified to be native. */\n\n  var DataView = getNative(root, 'DataView'),\n      Map = getNative(root, 'Map'),\n      Promise = getNative(root, 'Promise'),\n      Set = getNative(root, 'Set'),\n      WeakMap = getNative(root, 'WeakMap'),\n      nativeCreate = getNative(Object, 'create');\n  /** Used to detect maps, sets, and weakmaps. */\n\n  var dataViewCtorString = toSource(DataView),\n      mapCtorString = toSource(Map),\n      promiseCtorString = toSource(Promise),\n      setCtorString = toSource(Set),\n      weakMapCtorString = toSource(WeakMap);\n  /** Used to convert symbols to primitives and strings. */\n\n  var symbolProto = Symbol ? Symbol.prototype : undefined,\n      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n      symbolToString = symbolProto ? symbolProto.toString : undefined;\n  /**\n   * Creates a hash object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function Hash(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the hash.\n   *\n   * @private\n   * @name clear\n   * @memberOf Hash\n   */\n\n\n  function hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n    this.size = 0;\n  }\n  /**\n   * Removes `key` and its value from the hash.\n   *\n   * @private\n   * @name delete\n   * @memberOf Hash\n   * @param {Object} hash The hash to modify.\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key];\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n  /**\n   * Gets the hash value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Hash\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function hashGet(key) {\n    var data = this.__data__;\n\n    if (nativeCreate) {\n      var result = data[key];\n      return result === HASH_UNDEFINED ? undefined : result;\n    }\n\n    return hasOwnProperty.call(data, key) ? data[key] : undefined;\n  }\n  /**\n   * Checks if a hash value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Hash\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n  }\n  /**\n   * Sets the hash `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Hash\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the hash instance.\n   */\n\n\n  function hashSet(key, value) {\n    var data = this.__data__;\n    this.size += this.has(key) ? 0 : 1;\n    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;\n    return this;\n  } // Add methods to `Hash`.\n\n\n  Hash.prototype.clear = hashClear;\n  Hash.prototype['delete'] = hashDelete;\n  Hash.prototype.get = hashGet;\n  Hash.prototype.has = hashHas;\n  Hash.prototype.set = hashSet;\n  /**\n   * Creates an list cache object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function ListCache(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the list cache.\n   *\n   * @private\n   * @name clear\n   * @memberOf ListCache\n   */\n\n\n  function listCacheClear() {\n    this.__data__ = [];\n    this.size = 0;\n  }\n  /**\n   * Removes `key` and its value from the list cache.\n   *\n   * @private\n   * @name delete\n   * @memberOf ListCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function listCacheDelete(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      return false;\n    }\n\n    var lastIndex = data.length - 1;\n\n    if (index == lastIndex) {\n      data.pop();\n    } else {\n      splice.call(data, index, 1);\n    }\n\n    --this.size;\n    return true;\n  }\n  /**\n   * Gets the list cache value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf ListCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function listCacheGet(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n    return index < 0 ? undefined : data[index][1];\n  }\n  /**\n   * Checks if a list cache value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf ListCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n  }\n  /**\n   * Sets the list cache `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf ListCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the list cache instance.\n   */\n\n\n  function listCacheSet(key, value) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      ++this.size;\n      data.push([key, value]);\n    } else {\n      data[index][1] = value;\n    }\n\n    return this;\n  } // Add methods to `ListCache`.\n\n\n  ListCache.prototype.clear = listCacheClear;\n  ListCache.prototype['delete'] = listCacheDelete;\n  ListCache.prototype.get = listCacheGet;\n  ListCache.prototype.has = listCacheHas;\n  ListCache.prototype.set = listCacheSet;\n  /**\n   * Creates a map cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function MapCache(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the map.\n   *\n   * @private\n   * @name clear\n   * @memberOf MapCache\n   */\n\n\n  function mapCacheClear() {\n    this.size = 0;\n    this.__data__ = {\n      'hash': new Hash(),\n      'map': new (Map || ListCache)(),\n      'string': new Hash()\n    };\n  }\n  /**\n   * Removes `key` and its value from the map.\n   *\n   * @private\n   * @name delete\n   * @memberOf MapCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function mapCacheDelete(key) {\n    var result = getMapData(this, key)['delete'](key);\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n  /**\n   * Gets the map value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf MapCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n  }\n  /**\n   * Checks if a map value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf MapCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n  }\n  /**\n   * Sets the map `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf MapCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the map cache instance.\n   */\n\n\n  function mapCacheSet(key, value) {\n    var data = getMapData(this, key),\n        size = data.size;\n    data.set(key, value);\n    this.size += data.size == size ? 0 : 1;\n    return this;\n  } // Add methods to `MapCache`.\n\n\n  MapCache.prototype.clear = mapCacheClear;\n  MapCache.prototype['delete'] = mapCacheDelete;\n  MapCache.prototype.get = mapCacheGet;\n  MapCache.prototype.has = mapCacheHas;\n  MapCache.prototype.set = mapCacheSet;\n  /**\n   *\n   * Creates an array cache object to store unique values.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [values] The values to cache.\n   */\n\n  function SetCache(values) {\n    var index = -1,\n        length = values == null ? 0 : values.length;\n    this.__data__ = new MapCache();\n\n    while (++index < length) {\n      this.add(values[index]);\n    }\n  }\n  /**\n   * Adds `value` to the array cache.\n   *\n   * @private\n   * @name add\n   * @memberOf SetCache\n   * @alias push\n   * @param {*} value The value to cache.\n   * @returns {Object} Returns the cache instance.\n   */\n\n\n  function setCacheAdd(value) {\n    this.__data__.set(value, HASH_UNDEFINED);\n\n    return this;\n  }\n  /**\n   * Checks if `value` is in the array cache.\n   *\n   * @private\n   * @name has\n   * @memberOf SetCache\n   * @param {*} value The value to search for.\n   * @returns {number} Returns `true` if `value` is found, else `false`.\n   */\n\n\n  function setCacheHas(value) {\n    return this.__data__.has(value);\n  } // Add methods to `SetCache`.\n\n\n  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n  SetCache.prototype.has = setCacheHas;\n  /**\n   * Creates a stack cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function Stack(entries) {\n    var data = this.__data__ = new ListCache(entries);\n    this.size = data.size;\n  }\n  /**\n   * Removes all key-value entries from the stack.\n   *\n   * @private\n   * @name clear\n   * @memberOf Stack\n   */\n\n\n  function stackClear() {\n    this.__data__ = new ListCache();\n    this.size = 0;\n  }\n  /**\n   * Removes `key` and its value from the stack.\n   *\n   * @private\n   * @name delete\n   * @memberOf Stack\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function stackDelete(key) {\n    var data = this.__data__,\n        result = data['delete'](key);\n    this.size = data.size;\n    return result;\n  }\n  /**\n   * Gets the stack value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Stack\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function stackGet(key) {\n    return this.__data__.get(key);\n  }\n  /**\n   * Checks if a stack value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Stack\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function stackHas(key) {\n    return this.__data__.has(key);\n  }\n  /**\n   * Sets the stack `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Stack\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the stack cache instance.\n   */\n\n\n  function stackSet(key, value) {\n    var data = this.__data__;\n\n    if (data instanceof ListCache) {\n      var pairs = data.__data__;\n\n      if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n        pairs.push([key, value]);\n        this.size = ++data.size;\n        return this;\n      }\n\n      data = this.__data__ = new MapCache(pairs);\n    }\n\n    data.set(key, value);\n    this.size = data.size;\n    return this;\n  } // Add methods to `Stack`.\n\n\n  Stack.prototype.clear = stackClear;\n  Stack.prototype['delete'] = stackDelete;\n  Stack.prototype.get = stackGet;\n  Stack.prototype.has = stackHas;\n  Stack.prototype.set = stackSet;\n  /**\n   * Creates an array of the enumerable property names of the array-like `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @param {boolean} inherited Specify returning inherited property names.\n   * @returns {Array} Returns the array of property names.\n   */\n\n  function arrayLikeKeys(value, inherited) {\n    var isArr = isArray(value),\n        isArg = !isArr && isArguments(value),\n        isBuff = !isArr && !isArg && isBuffer(value),\n        isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n        skipIndexes = isArr || isArg || isBuff || isType,\n        result = skipIndexes ? baseTimes(value.length, String) : [],\n        length = result.length;\n\n    for (var key in value) {\n      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.\n      key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.\n      isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.\n      isIndex(key, length)))) {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Gets the index at which the `key` is found in `array` of key-value pairs.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} key The key to search for.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n\n\n  function assocIndexOf(array, key) {\n    var length = array.length;\n\n    while (length--) {\n      if (eq(array[length][0], key)) {\n        return length;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * The base implementation of `_.forEach` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array|Object} Returns `collection`.\n   */\n\n\n  var baseEach = createBaseEach(baseForOwn);\n  /**\n   * The base implementation of `_.filter` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n\n  function baseFilter(collection, predicate) {\n    var result = [];\n    baseEach(collection, function (value, index, collection) {\n      if (predicate(value, index, collection)) {\n        result.push(value);\n      }\n    });\n    return result;\n  }\n  /**\n   * The base implementation of `baseForOwn` which iterates over `object`\n   * properties returned by `keysFunc` and invokes `iteratee` for each property.\n   * Iteratee functions may exit iteration early by explicitly returning `false`.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @returns {Object} Returns `object`.\n   */\n\n\n  var baseFor = createBaseFor();\n  /**\n   * The base implementation of `_.forOwn` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Object} Returns `object`.\n   */\n\n  function baseForOwn(object, iteratee) {\n    return object && baseFor(object, iteratee, keys);\n  }\n  /**\n   * The base implementation of `_.get` without support for default values.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path of the property to get.\n   * @returns {*} Returns the resolved value.\n   */\n\n\n  function baseGet(object, path) {\n    path = castPath(path, object);\n    var index = 0,\n        length = path.length;\n\n    while (object != null && index < length) {\n      object = object[toKey(path[index++])];\n    }\n\n    return index && index == length ? object : undefined;\n  }\n  /**\n   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n   * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n   * symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @param {Function} symbolsFunc The function to get the symbols of `object`.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n\n\n  function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object);\n    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n  }\n  /**\n   * The base implementation of `getTag` without fallbacks for buggy environments.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n\n\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === undefined ? undefinedTag : nullTag;\n    }\n\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n  }\n  /**\n   * The base implementation of `_.hasIn` without support for deep paths.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {Array|string} key The key to check.\n   * @returns {boolean} Returns `true` if `key` exists, else `false`.\n   */\n\n\n  function baseHasIn(object, key) {\n    return object != null && key in Object(object);\n  }\n  /**\n   * The base implementation of `_.isArguments`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   */\n\n\n  function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag;\n  }\n  /**\n   * The base implementation of `_.isEqual` which supports partial comparisons\n   * and tracks traversed objects.\n   *\n   * @private\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @param {boolean} bitmask The bitmask flags.\n   *  1 - Unordered comparison\n   *  2 - Partial comparison\n   * @param {Function} [customizer] The function to customize comparisons.\n   * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   */\n\n\n  function baseIsEqual(value, other, bitmask, customizer, stack) {\n    if (value === other) {\n      return true;\n    }\n\n    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {\n      return value !== value && other !== other;\n    }\n\n    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n  }\n  /**\n   * A specialized version of `baseIsEqual` for arrays and objects which performs\n   * deep comparisons and tracks traversed objects enabling objects with circular\n   * references to be compared.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n\n\n  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n    var objIsArr = isArray(object),\n        othIsArr = isArray(other),\n        objTag = objIsArr ? arrayTag : getTag(object),\n        othTag = othIsArr ? arrayTag : getTag(other);\n    objTag = objTag == argsTag ? objectTag : objTag;\n    othTag = othTag == argsTag ? objectTag : othTag;\n    var objIsObj = objTag == objectTag,\n        othIsObj = othTag == objectTag,\n        isSameTag = objTag == othTag;\n\n    if (isSameTag && isBuffer(object)) {\n      if (!isBuffer(other)) {\n        return false;\n      }\n\n      objIsArr = true;\n      objIsObj = false;\n    }\n\n    if (isSameTag && !objIsObj) {\n      stack || (stack = new Stack());\n      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n    }\n\n    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n      if (objIsWrapped || othIsWrapped) {\n        var objUnwrapped = objIsWrapped ? object.value() : object,\n            othUnwrapped = othIsWrapped ? other.value() : other;\n        stack || (stack = new Stack());\n        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n      }\n    }\n\n    if (!isSameTag) {\n      return false;\n    }\n\n    stack || (stack = new Stack());\n    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n  }\n  /**\n   * The base implementation of `_.isMatch` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The object to inspect.\n   * @param {Object} source The object of property values to match.\n   * @param {Array} matchData The property names, values, and compare flags to match.\n   * @param {Function} [customizer] The function to customize comparisons.\n   * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n   */\n\n\n  function baseIsMatch(object, source, matchData, customizer) {\n    var index = matchData.length,\n        length = index,\n        noCustomizer = !customizer;\n\n    if (object == null) {\n      return !length;\n    }\n\n    object = Object(object);\n\n    while (index--) {\n      var data = matchData[index];\n\n      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {\n        return false;\n      }\n    }\n\n    while (++index < length) {\n      data = matchData[index];\n      var key = data[0],\n          objValue = object[key],\n          srcValue = data[1];\n\n      if (noCustomizer && data[2]) {\n        if (objValue === undefined && !(key in object)) {\n          return false;\n        }\n      } else {\n        var stack = new Stack();\n\n        if (customizer) {\n          var result = customizer(objValue, srcValue, key, object, source, stack);\n        }\n\n        if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * The base implementation of `_.isNative` without bad shim checks.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function,\n   *  else `false`.\n   */\n\n\n  function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n      return false;\n    }\n\n    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n  }\n  /**\n   * The base implementation of `_.isTypedArray` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   */\n\n\n  function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n  }\n  /**\n   * The base implementation of `_.iteratee`.\n   *\n   * @private\n   * @param {*} [value=_.identity] The value to convert to an iteratee.\n   * @returns {Function} Returns the iteratee.\n   */\n\n\n  function baseIteratee(value) {\n    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n    if (typeof value == 'function') {\n      return value;\n    }\n\n    if (value == null) {\n      return identity;\n    }\n\n    if (typeof value == 'object') {\n      return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);\n    }\n\n    return property(value);\n  }\n  /**\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n\n\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys(object);\n    }\n\n    var result = [];\n\n    for (var key in Object(object)) {\n      if (hasOwnProperty.call(object, key) && key != 'constructor') {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * The base implementation of `_.matches` which doesn't clone `source`.\n   *\n   * @private\n   * @param {Object} source The object of property values to match.\n   * @returns {Function} Returns the new spec function.\n   */\n\n\n  function baseMatches(source) {\n    var matchData = getMatchData(source);\n\n    if (matchData.length == 1 && matchData[0][2]) {\n      return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n    }\n\n    return function (object) {\n      return object === source || baseIsMatch(object, source, matchData);\n    };\n  }\n  /**\n   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n   *\n   * @private\n   * @param {string} path The path of the property to get.\n   * @param {*} srcValue The value to match.\n   * @returns {Function} Returns the new spec function.\n   */\n\n\n  function baseMatchesProperty(path, srcValue) {\n    if (isKey(path) && isStrictComparable(srcValue)) {\n      return matchesStrictComparable(toKey(path), srcValue);\n    }\n\n    return function (object) {\n      var objValue = get(object, path);\n      return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n    };\n  }\n  /**\n   * A specialized version of `baseProperty` which supports deep paths.\n   *\n   * @private\n   * @param {Array|string} path The path of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n\n\n  function basePropertyDeep(path) {\n    return function (object) {\n      return baseGet(object, path);\n    };\n  }\n  /**\n   * The base implementation of `_.toString` which doesn't convert nullish\n   * values to empty strings.\n   *\n   * @private\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   */\n\n\n  function baseToString(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == 'string') {\n      return value;\n    }\n\n    if (isArray(value)) {\n      // Recursively convert values (susceptible to call stack limits).\n      return arrayMap(value, baseToString) + '';\n    }\n\n    if (isSymbol(value)) {\n      return symbolToString ? symbolToString.call(value) : '';\n    }\n\n    var result = value + '';\n    return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n  }\n  /**\n   * Casts `value` to a path array if it's not one.\n   *\n   * @private\n   * @param {*} value The value to inspect.\n   * @param {Object} [object] The object to query keys on.\n   * @returns {Array} Returns the cast property path array.\n   */\n\n\n  function castPath(value, object) {\n    if (isArray(value)) {\n      return value;\n    }\n\n    return isKey(value, object) ? [value] : stringToPath(toString(value));\n  }\n  /**\n   * Creates a `baseEach` or `baseEachRight` function.\n   *\n   * @private\n   * @param {Function} eachFunc The function to iterate over a collection.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Function} Returns the new base function.\n   */\n\n\n  function createBaseEach(eachFunc, fromRight) {\n    return function (collection, iteratee) {\n      if (collection == null) {\n        return collection;\n      }\n\n      if (!isArrayLike(collection)) {\n        return eachFunc(collection, iteratee);\n      }\n\n      var length = collection.length,\n          index = fromRight ? length : -1,\n          iterable = Object(collection);\n\n      while (fromRight ? index-- : ++index < length) {\n        if (iteratee(iterable[index], index, iterable) === false) {\n          break;\n        }\n      }\n\n      return collection;\n    };\n  }\n  /**\n   * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n   *\n   * @private\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Function} Returns the new base function.\n   */\n\n\n  function createBaseFor(fromRight) {\n    return function (object, iteratee, keysFunc) {\n      var index = -1,\n          iterable = Object(object),\n          props = keysFunc(object),\n          length = props.length;\n\n      while (length--) {\n        var key = props[fromRight ? length : ++index];\n\n        if (iteratee(iterable[key], key, iterable) === false) {\n          break;\n        }\n      }\n\n      return object;\n    };\n  }\n  /**\n   * A specialized version of `baseIsEqualDeep` for arrays with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Array} array The array to compare.\n   * @param {Array} other The other array to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `array` and `other` objects.\n   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n   */\n\n\n  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n        arrLength = array.length,\n        othLength = other.length;\n\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n      return false;\n    } // Assume cyclic values are equal.\n\n\n    var stacked = stack.get(array);\n\n    if (stacked && stack.get(other)) {\n      return stacked == other;\n    }\n\n    var index = -1,\n        result = true,\n        seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;\n    stack.set(array, other);\n    stack.set(other, array); // Ignore non-index properties.\n\n    while (++index < arrLength) {\n      var arrValue = array[index],\n          othValue = other[index];\n\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n      }\n\n      if (compared !== undefined) {\n        if (compared) {\n          continue;\n        }\n\n        result = false;\n        break;\n      } // Recursively compare arrays (susceptible to call stack limits).\n\n\n      if (seen) {\n        if (!arraySome(other, function (othValue, othIndex) {\n          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n            return seen.push(othIndex);\n          }\n        })) {\n          result = false;\n          break;\n        }\n      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n        result = false;\n        break;\n      }\n    }\n\n    stack['delete'](array);\n    stack['delete'](other);\n    return result;\n  }\n  /**\n   * A specialized version of `baseIsEqualDeep` for comparing objects of\n   * the same `toStringTag`.\n   *\n   * **Note:** This function only supports comparing values with tags of\n   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {string} tag The `toStringTag` of the objects to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n\n\n  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n    switch (tag) {\n      case dataViewTag:\n        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n          return false;\n        }\n\n        object = object.buffer;\n        other = other.buffer;\n\n      case arrayBufferTag:\n        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n          return false;\n        }\n\n        return true;\n\n      case boolTag:\n      case dateTag:\n      case numberTag:\n        // Coerce booleans to `1` or `0` and dates to milliseconds.\n        // Invalid dates are coerced to `NaN`.\n        return eq(+object, +other);\n\n      case errorTag:\n        return object.name == other.name && object.message == other.message;\n\n      case regexpTag:\n      case stringTag:\n        // Coerce regexes to strings and treat strings, primitives and objects,\n        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n        // for more details.\n        return object == other + '';\n\n      case mapTag:\n        var convert = mapToArray;\n\n      case setTag:\n        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n        convert || (convert = setToArray);\n\n        if (object.size != other.size && !isPartial) {\n          return false;\n        } // Assume cyclic values are equal.\n\n\n        var stacked = stack.get(object);\n\n        if (stacked) {\n          return stacked == other;\n        }\n\n        bitmask |= COMPARE_UNORDERED_FLAG; // Recursively compare objects (susceptible to call stack limits).\n\n        stack.set(object, other);\n        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n        stack['delete'](object);\n        return result;\n\n      case symbolTag:\n        if (symbolValueOf) {\n          return symbolValueOf.call(object) == symbolValueOf.call(other);\n        }\n\n    }\n\n    return false;\n  }\n  /**\n   * A specialized version of `baseIsEqualDeep` for objects with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n\n\n  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n        objProps = getAllKeys(object),\n        objLength = objProps.length,\n        othProps = getAllKeys(other),\n        othLength = othProps.length;\n\n    if (objLength != othLength && !isPartial) {\n      return false;\n    }\n\n    var index = objLength;\n\n    while (index--) {\n      var key = objProps[index];\n\n      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n        return false;\n      }\n    } // Assume cyclic values are equal.\n\n\n    var stacked = stack.get(object);\n\n    if (stacked && stack.get(other)) {\n      return stacked == other;\n    }\n\n    var result = true;\n    stack.set(object, other);\n    stack.set(other, object);\n    var skipCtor = isPartial;\n\n    while (++index < objLength) {\n      key = objProps[index];\n      var objValue = object[key],\n          othValue = other[key];\n\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n      } // Recursively compare objects (susceptible to call stack limits).\n\n\n      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n        result = false;\n        break;\n      }\n\n      skipCtor || (skipCtor = key == 'constructor');\n    }\n\n    if (result && !skipCtor) {\n      var objCtor = object.constructor,\n          othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.\n\n      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n        result = false;\n      }\n    }\n\n    stack['delete'](object);\n    stack['delete'](other);\n    return result;\n  }\n  /**\n   * Creates an array of own enumerable property names and symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n\n\n  function getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols);\n  }\n  /**\n   * Gets the data for `map`.\n   *\n   * @private\n   * @param {Object} map The map to query.\n   * @param {string} key The reference key.\n   * @returns {*} Returns the map data.\n   */\n\n\n  function getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;\n  }\n  /**\n   * Gets the property names, values, and compare flags of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the match data of `object`.\n   */\n\n\n  function getMatchData(object) {\n    var result = keys(object),\n        length = result.length;\n\n    while (length--) {\n      var key = result[length],\n          value = object[key];\n      result[length] = [key, value, isStrictComparable(value)];\n    }\n\n    return result;\n  }\n  /**\n   * Gets the native function at `key` of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the method to get.\n   * @returns {*} Returns the function if it's native, else `undefined`.\n   */\n\n\n  function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n  }\n  /**\n   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the raw `toStringTag`.\n   */\n\n\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag),\n        tag = value[symToStringTag];\n\n    try {\n      value[symToStringTag] = undefined;\n      var unmasked = true;\n    } catch (e) {}\n\n    var result = nativeObjectToString.call(value);\n\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag] = tag;\n      } else {\n        delete value[symToStringTag];\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Creates an array of the own enumerable symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of symbols.\n   */\n\n\n  var getSymbols = !nativeGetSymbols ? stubArray : function (object) {\n    if (object == null) {\n      return [];\n    }\n\n    object = Object(object);\n    return arrayFilter(nativeGetSymbols(object), function (symbol) {\n      return propertyIsEnumerable.call(object, symbol);\n    });\n  };\n  /**\n   * Gets the `toStringTag` of `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n\n  var getTag = baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n\n  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {\n    getTag = function (value) {\n      var result = baseGetTag(value),\n          Ctor = result == objectTag ? value.constructor : undefined,\n          ctorString = Ctor ? toSource(Ctor) : '';\n\n      if (ctorString) {\n        switch (ctorString) {\n          case dataViewCtorString:\n            return dataViewTag;\n\n          case mapCtorString:\n            return mapTag;\n\n          case promiseCtorString:\n            return promiseTag;\n\n          case setCtorString:\n            return setTag;\n\n          case weakMapCtorString:\n            return weakMapTag;\n        }\n      }\n\n      return result;\n    };\n  }\n  /**\n   * Checks if `path` exists on `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path to check.\n   * @param {Function} hasFunc The function to check properties.\n   * @returns {boolean} Returns `true` if `path` exists, else `false`.\n   */\n\n\n  function hasPath(object, path, hasFunc) {\n    path = castPath(path, object);\n    var index = -1,\n        length = path.length,\n        result = false;\n\n    while (++index < length) {\n      var key = toKey(path[index]);\n\n      if (!(result = object != null && hasFunc(object, key))) {\n        break;\n      }\n\n      object = object[key];\n    }\n\n    if (result || ++index != length) {\n      return result;\n    }\n\n    length = object == null ? 0 : object.length;\n    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));\n  }\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n\n\n  function isIndex(value, length) {\n    var type = typeof value;\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n  }\n  /**\n   * Checks if `value` is a property name and not a property path.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {Object} [object] The object to query keys on.\n   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n   */\n\n\n  function isKey(value, object) {\n    if (isArray(value)) {\n      return false;\n    }\n\n    var type = typeof value;\n\n    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {\n      return true;\n    }\n\n    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);\n  }\n  /**\n   * Checks if `value` is suitable for use as unique object key.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n   */\n\n\n  function isKeyable(value) {\n    var type = typeof value;\n    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;\n  }\n  /**\n   * Checks if `func` has its source masked.\n   *\n   * @private\n   * @param {Function} func The function to check.\n   * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n   */\n\n\n  function isMasked(func) {\n    return !!maskSrcKey && maskSrcKey in func;\n  }\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n\n\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;\n    return value === proto;\n  }\n  /**\n   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` if suitable for strict\n   *  equality comparisons, else `false`.\n   */\n\n\n  function isStrictComparable(value) {\n    return value === value && !isObject(value);\n  }\n  /**\n   * A specialized version of `matchesProperty` for source values suitable\n   * for strict equality comparisons, i.e. `===`.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @param {*} srcValue The value to match.\n   * @returns {Function} Returns the new spec function.\n   */\n\n\n  function matchesStrictComparable(key, srcValue) {\n    return function (object) {\n      if (object == null) {\n        return false;\n      }\n\n      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));\n    };\n  }\n  /**\n   * A specialized version of `_.memoize` which clears the memoized function's\n   * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n   *\n   * @private\n   * @param {Function} func The function to have its output memoized.\n   * @returns {Function} Returns the new memoized function.\n   */\n\n\n  function memoizeCapped(func) {\n    var result = memoize(func, function (key) {\n      if (cache.size === MAX_MEMOIZE_SIZE) {\n        cache.clear();\n      }\n\n      return key;\n    });\n    var cache = result.cache;\n    return result;\n  }\n  /**\n   * Converts `value` to a string using `Object.prototype.toString`.\n   *\n   * @private\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   */\n\n\n  function objectToString(value) {\n    return nativeObjectToString.call(value);\n  }\n  /**\n   * Converts `string` to a property path array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the property path array.\n   */\n\n\n  var stringToPath = memoizeCapped(function (string) {\n    var result = [];\n\n    if (string.charCodeAt(0) === 46\n    /* . */\n    ) {\n        result.push('');\n      }\n\n    string.replace(rePropName, function (match, number, quote, subString) {\n      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);\n    });\n    return result;\n  });\n  /**\n   * Converts `value` to a string key if it's not a string or symbol.\n   *\n   * @private\n   * @param {*} value The value to inspect.\n   * @returns {string|symbol} Returns the key.\n   */\n\n  function toKey(value) {\n    if (typeof value == 'string' || isSymbol(value)) {\n      return value;\n    }\n\n    var result = value + '';\n    return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n  }\n  /**\n   * Converts `func` to its source code.\n   *\n   * @private\n   * @param {Function} func The function to convert.\n   * @returns {string} Returns the source code.\n   */\n\n\n  function toSource(func) {\n    if (func != null) {\n      try {\n        return funcToString.call(func);\n      } catch (e) {}\n\n      try {\n        return func + '';\n      } catch (e) {}\n    }\n\n    return '';\n  }\n  /**\n   * Iterates over elements of `collection`, returning an array of all elements\n   * `predicate` returns truthy for. The predicate is invoked with three\n   * arguments: (value, index|key, collection).\n   *\n   * **Note:** Unlike `_.remove`, this method returns a new array.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [predicate=_.identity] The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   * @see _.reject\n   * @example\n   *\n   * var users = [\n   *   { 'user': 'barney', 'age': 36, 'active': true },\n   *   { 'user': 'fred',   'age': 40, 'active': false }\n   * ];\n   *\n   * _.filter(users, function(o) { return !o.active; });\n   * // => objects for ['fred']\n   *\n   * // The `_.matches` iteratee shorthand.\n   * _.filter(users, { 'age': 36, 'active': true });\n   * // => objects for ['barney']\n   *\n   * // The `_.matchesProperty` iteratee shorthand.\n   * _.filter(users, ['active', false]);\n   * // => objects for ['fred']\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.filter(users, 'active');\n   * // => objects for ['barney']\n   */\n\n\n  function filter(collection, predicate) {\n    var func = isArray(collection) ? arrayFilter : baseFilter;\n    return func(collection, baseIteratee(predicate));\n  }\n  /**\n   * Creates a function that memoizes the result of `func`. If `resolver` is\n   * provided, it determines the cache key for storing the result based on the\n   * arguments provided to the memoized function. By default, the first argument\n   * provided to the memoized function is used as the map cache key. The `func`\n   * is invoked with the `this` binding of the memoized function.\n   *\n   * **Note:** The cache is exposed as the `cache` property on the memoized\n   * function. Its creation may be customized by replacing the `_.memoize.Cache`\n   * constructor with one whose instances implement the\n   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n   * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to have its output memoized.\n   * @param {Function} [resolver] The function to resolve the cache key.\n   * @returns {Function} Returns the new memoized function.\n   * @example\n   *\n   * var object = { 'a': 1, 'b': 2 };\n   * var other = { 'c': 3, 'd': 4 };\n   *\n   * var values = _.memoize(_.values);\n   * values(object);\n   * // => [1, 2]\n   *\n   * values(other);\n   * // => [3, 4]\n   *\n   * object.a = 2;\n   * values(object);\n   * // => [1, 2]\n   *\n   * // Modify the result cache.\n   * values.cache.set(object, ['a', 'b']);\n   * values(object);\n   * // => ['a', 'b']\n   *\n   * // Replace `_.memoize.Cache`.\n   * _.memoize.Cache = WeakMap;\n   */\n\n\n  function memoize(func, resolver) {\n    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n\n    var memoized = function () {\n      var args = arguments,\n          key = resolver ? resolver.apply(this, args) : args[0],\n          cache = memoized.cache;\n\n      if (cache.has(key)) {\n        return cache.get(key);\n      }\n\n      var result = func.apply(this, args);\n      memoized.cache = cache.set(key, result) || cache;\n      return result;\n    };\n\n    memoized.cache = new (memoize.Cache || MapCache)();\n    return memoized;\n  } // Expose `MapCache`.\n\n\n  memoize.Cache = MapCache;\n  /**\n   * Performs a\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * comparison between two values to determine if they are equivalent.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   * var other = { 'a': 1 };\n   *\n   * _.eq(object, object);\n   * // => true\n   *\n   * _.eq(object, other);\n   * // => false\n   *\n   * _.eq('a', 'a');\n   * // => true\n   *\n   * _.eq('a', Object('a'));\n   * // => false\n   *\n   * _.eq(NaN, NaN);\n   * // => true\n   */\n\n  function eq(value, other) {\n    return value === other || value !== value && other !== other;\n  }\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n\n\n  var isArguments = baseIsArguments(function () {\n    return arguments;\n  }()) ? baseIsArguments : function (value) {\n    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');\n  };\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n\n  var isArray = Array.isArray;\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  }\n  /**\n   * Checks if `value` is a buffer.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n   * @example\n   *\n   * _.isBuffer(new Buffer(2));\n   * // => true\n   *\n   * _.isBuffer(new Uint8Array(2));\n   * // => false\n   */\n\n\n  var isBuffer = nativeIsBuffer || stubFalse;\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n\n  function isFunction(value) {\n    if (!isObject(value)) {\n      return false;\n    } // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n\n\n    var tag = baseGetTag(value);\n    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n  }\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n\n\n  function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n\n\n  function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == 'object' || type == 'function');\n  }\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n\n\n  function isObjectLike(value) {\n    return value != null && typeof value == 'object';\n  }\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n\n\n  function isSymbol(value) {\n    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;\n  }\n  /**\n   * Checks if `value` is classified as a typed array.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   * @example\n   *\n   * _.isTypedArray(new Uint8Array);\n   * // => true\n   *\n   * _.isTypedArray([]);\n   * // => false\n   */\n\n\n  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n  /**\n   * Converts `value` to a string. An empty string is returned for `null`\n   * and `undefined` values. The sign of `-0` is preserved.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   * @example\n   *\n   * _.toString(null);\n   * // => ''\n   *\n   * _.toString(-0);\n   * // => '-0'\n   *\n   * _.toString([1, 2, 3]);\n   * // => '1,2,3'\n   */\n\n  function toString(value) {\n    return value == null ? '' : baseToString(value);\n  }\n  /**\n   * Gets the value at `path` of `object`. If the resolved value is\n   * `undefined`, the `defaultValue` is returned in its place.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.7.0\n   * @category Object\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path of the property to get.\n   * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n   * @returns {*} Returns the resolved value.\n   * @example\n   *\n   * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n   *\n   * _.get(object, 'a[0].b.c');\n   * // => 3\n   *\n   * _.get(object, ['a', '0', 'b', 'c']);\n   * // => 3\n   *\n   * _.get(object, 'a.b.c', 'default');\n   * // => 'default'\n   */\n\n\n  function get(object, path, defaultValue) {\n    var result = object == null ? undefined : baseGet(object, path);\n    return result === undefined ? defaultValue : result;\n  }\n  /**\n   * Checks if `path` is a direct or inherited property of `object`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Object\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path to check.\n   * @returns {boolean} Returns `true` if `path` exists, else `false`.\n   * @example\n   *\n   * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n   *\n   * _.hasIn(object, 'a');\n   * // => true\n   *\n   * _.hasIn(object, 'a.b');\n   * // => true\n   *\n   * _.hasIn(object, ['a', 'b']);\n   * // => true\n   *\n   * _.hasIn(object, 'b');\n   * // => false\n   */\n\n\n  function hasIn(object, path) {\n    return object != null && hasPath(object, path, baseHasIn);\n  }\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n\n\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n  }\n  /**\n   * This method returns the first argument it receives.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Util\n   * @param {*} value Any value.\n   * @returns {*} Returns `value`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   *\n   * console.log(_.identity(object) === object);\n   * // => true\n   */\n\n\n  function identity(value) {\n    return value;\n  }\n  /**\n   * Creates a function that returns the value at `path` of a given object.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Util\n   * @param {Array|string} path The path of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   * @example\n   *\n   * var objects = [\n   *   { 'a': { 'b': 2 } },\n   *   { 'a': { 'b': 1 } }\n   * ];\n   *\n   * _.map(objects, _.property('a.b'));\n   * // => [2, 1]\n   *\n   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n   * // => [1, 2]\n   */\n\n\n  function property(path) {\n    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n  }\n  /**\n   * This method returns a new empty array.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {Array} Returns the new empty array.\n   * @example\n   *\n   * var arrays = _.times(2, _.stubArray);\n   *\n   * console.log(arrays);\n   * // => [[], []]\n   *\n   * console.log(arrays[0] === arrays[1]);\n   * // => false\n   */\n\n\n  function stubArray() {\n    return [];\n  }\n  /**\n   * This method returns `false`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {boolean} Returns `false`.\n   * @example\n   *\n   * _.times(2, _.stubFalse);\n   * // => [false, false]\n   */\n\n\n  function stubFalse() {\n    return false;\n  }\n\n  module.exports = filter;\n  });\n\n  var lodash_sortby = createCommonjsModule(function (module, exports) {\n  /**\n   * Lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n   * Copyright JS Foundation and other contributors <https://js.foundation/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n  /** Error message constants. */\n\n  var FUNC_ERROR_TEXT = 'Expected a function';\n  /** Used to stand-in for `undefined` hash values. */\n\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n  /** Used as the maximum memoize cache size. */\n\n  var MAX_MEMOIZE_SIZE = 500;\n  /** Used to compose bitmasks for value comparisons. */\n\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n  /** Used as references for various `Number` constants. */\n\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991;\n  /** `Object#toString` result references. */\n\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]';\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n  /** Used to match property names within property paths. */\n\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n  /** Used to match backslashes in property paths. */\n\n  var reEscapeChar = /\\\\(\\\\)?/g;\n  /** Used to detect host constructors (Safari). */\n\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n  /** Used to detect unsigned integer values. */\n\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n  /** Used to identify `toStringTag` values of typed arrays. */\n\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n  /** Detect free variable `global` from Node.js. */\n\n  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n  /** Detect free variable `self`. */\n\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n  /** Used as a reference to the global object. */\n\n  var root = freeGlobal || freeSelf || Function('return this')();\n  /** Detect free variable `exports`. */\n\n  var freeExports =  exports && !exports.nodeType && exports;\n  /** Detect free variable `module`. */\n\n  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n  /** Detect the popular CommonJS extension `module.exports`. */\n\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n  /** Detect free variable `process` from Node.js. */\n\n  var freeProcess = moduleExports && freeGlobal.process;\n  /** Used to access faster Node.js helpers. */\n\n  var nodeUtil = function () {\n    try {\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }();\n  /* Node.js helper references. */\n\n\n  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0:\n        return func.call(thisArg);\n\n      case 1:\n        return func.call(thisArg, args[0]);\n\n      case 2:\n        return func.call(thisArg, args[0], args[1]);\n\n      case 3:\n        return func.call(thisArg, args[0], args[1], args[2]);\n    }\n\n    return func.apply(thisArg, args);\n  }\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n\n\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n\n\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n\n    return result;\n  }\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n\n\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n\n    return array;\n  }\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n\n\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n\n\n  function baseProperty(key) {\n    return function (object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n\n\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n    array.sort(comparer);\n\n    while (length--) {\n      array[length] = array[length].value;\n    }\n\n    return array;\n  }\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n\n\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n\n    return result;\n  }\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n\n\n  function baseUnary(func) {\n    return function (value) {\n      return func(value);\n    };\n  }\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n\n\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n\n\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n    map.forEach(function (value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n\n\n  function overArg(func, transform) {\n    return function (arg) {\n      return func(transform(arg));\n    };\n  }\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n\n\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n    set.forEach(function (value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n  /** Used for built-in method references. */\n\n\n  var arrayProto = Array.prototype,\n      funcProto = Function.prototype,\n      objectProto = Object.prototype;\n  /** Used to detect overreaching core-js shims. */\n\n  var coreJsData = root['__core-js_shared__'];\n  /** Used to resolve the decompiled source of functions. */\n\n  var funcToString = funcProto.toString;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty = objectProto.hasOwnProperty;\n  /** Used to detect methods masquerading as native. */\n\n  var maskSrcKey = function () {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n    return uid ? 'Symbol(src)_1.' + uid : '';\n  }();\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n\n\n  var nativeObjectToString = objectProto.toString;\n  /** Used to detect if a method is native. */\n\n  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&').replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');\n  /** Built-in value references. */\n\n  var Buffer = moduleExports ? root.Buffer : undefined,\n      Symbol = root.Symbol,\n      Uint8Array = root.Uint8Array,\n      propertyIsEnumerable = objectProto.propertyIsEnumerable,\n      splice = arrayProto.splice,\n      spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n      symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n  var defineProperty = function () {\n    try {\n      var func = getNative(Object, 'defineProperty');\n      func({}, '', {});\n      return func;\n    } catch (e) {}\n  }();\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n\n  var nativeGetSymbols = Object.getOwnPropertySymbols,\n      nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n      nativeKeys = overArg(Object.keys, Object),\n      nativeMax = Math.max,\n      nativeNow = Date.now;\n  /* Built-in method references that are verified to be native. */\n\n  var DataView = getNative(root, 'DataView'),\n      Map = getNative(root, 'Map'),\n      Promise = getNative(root, 'Promise'),\n      Set = getNative(root, 'Set'),\n      WeakMap = getNative(root, 'WeakMap'),\n      nativeCreate = getNative(Object, 'create');\n  /** Used to detect maps, sets, and weakmaps. */\n\n  var dataViewCtorString = toSource(DataView),\n      mapCtorString = toSource(Map),\n      promiseCtorString = toSource(Promise),\n      setCtorString = toSource(Set),\n      weakMapCtorString = toSource(WeakMap);\n  /** Used to convert symbols to primitives and strings. */\n\n  var symbolProto = Symbol ? Symbol.prototype : undefined,\n      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n      symbolToString = symbolProto ? symbolProto.toString : undefined;\n  /**\n   * Creates a hash object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function Hash(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the hash.\n   *\n   * @private\n   * @name clear\n   * @memberOf Hash\n   */\n\n\n  function hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n    this.size = 0;\n  }\n  /**\n   * Removes `key` and its value from the hash.\n   *\n   * @private\n   * @name delete\n   * @memberOf Hash\n   * @param {Object} hash The hash to modify.\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key];\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n  /**\n   * Gets the hash value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Hash\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function hashGet(key) {\n    var data = this.__data__;\n\n    if (nativeCreate) {\n      var result = data[key];\n      return result === HASH_UNDEFINED ? undefined : result;\n    }\n\n    return hasOwnProperty.call(data, key) ? data[key] : undefined;\n  }\n  /**\n   * Checks if a hash value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Hash\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n  }\n  /**\n   * Sets the hash `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Hash\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the hash instance.\n   */\n\n\n  function hashSet(key, value) {\n    var data = this.__data__;\n    this.size += this.has(key) ? 0 : 1;\n    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;\n    return this;\n  } // Add methods to `Hash`.\n\n\n  Hash.prototype.clear = hashClear;\n  Hash.prototype['delete'] = hashDelete;\n  Hash.prototype.get = hashGet;\n  Hash.prototype.has = hashHas;\n  Hash.prototype.set = hashSet;\n  /**\n   * Creates an list cache object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function ListCache(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the list cache.\n   *\n   * @private\n   * @name clear\n   * @memberOf ListCache\n   */\n\n\n  function listCacheClear() {\n    this.__data__ = [];\n    this.size = 0;\n  }\n  /**\n   * Removes `key` and its value from the list cache.\n   *\n   * @private\n   * @name delete\n   * @memberOf ListCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function listCacheDelete(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      return false;\n    }\n\n    var lastIndex = data.length - 1;\n\n    if (index == lastIndex) {\n      data.pop();\n    } else {\n      splice.call(data, index, 1);\n    }\n\n    --this.size;\n    return true;\n  }\n  /**\n   * Gets the list cache value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf ListCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function listCacheGet(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n    return index < 0 ? undefined : data[index][1];\n  }\n  /**\n   * Checks if a list cache value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf ListCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n  }\n  /**\n   * Sets the list cache `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf ListCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the list cache instance.\n   */\n\n\n  function listCacheSet(key, value) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      ++this.size;\n      data.push([key, value]);\n    } else {\n      data[index][1] = value;\n    }\n\n    return this;\n  } // Add methods to `ListCache`.\n\n\n  ListCache.prototype.clear = listCacheClear;\n  ListCache.prototype['delete'] = listCacheDelete;\n  ListCache.prototype.get = listCacheGet;\n  ListCache.prototype.has = listCacheHas;\n  ListCache.prototype.set = listCacheSet;\n  /**\n   * Creates a map cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function MapCache(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the map.\n   *\n   * @private\n   * @name clear\n   * @memberOf MapCache\n   */\n\n\n  function mapCacheClear() {\n    this.size = 0;\n    this.__data__ = {\n      'hash': new Hash(),\n      'map': new (Map || ListCache)(),\n      'string': new Hash()\n    };\n  }\n  /**\n   * Removes `key` and its value from the map.\n   *\n   * @private\n   * @name delete\n   * @memberOf MapCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function mapCacheDelete(key) {\n    var result = getMapData(this, key)['delete'](key);\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n  /**\n   * Gets the map value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf MapCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n  }\n  /**\n   * Checks if a map value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf MapCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n  }\n  /**\n   * Sets the map `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf MapCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the map cache instance.\n   */\n\n\n  function mapCacheSet(key, value) {\n    var data = getMapData(this, key),\n        size = data.size;\n    data.set(key, value);\n    this.size += data.size == size ? 0 : 1;\n    return this;\n  } // Add methods to `MapCache`.\n\n\n  MapCache.prototype.clear = mapCacheClear;\n  MapCache.prototype['delete'] = mapCacheDelete;\n  MapCache.prototype.get = mapCacheGet;\n  MapCache.prototype.has = mapCacheHas;\n  MapCache.prototype.set = mapCacheSet;\n  /**\n   *\n   * Creates an array cache object to store unique values.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [values] The values to cache.\n   */\n\n  function SetCache(values) {\n    var index = -1,\n        length = values == null ? 0 : values.length;\n    this.__data__ = new MapCache();\n\n    while (++index < length) {\n      this.add(values[index]);\n    }\n  }\n  /**\n   * Adds `value` to the array cache.\n   *\n   * @private\n   * @name add\n   * @memberOf SetCache\n   * @alias push\n   * @param {*} value The value to cache.\n   * @returns {Object} Returns the cache instance.\n   */\n\n\n  function setCacheAdd(value) {\n    this.__data__.set(value, HASH_UNDEFINED);\n\n    return this;\n  }\n  /**\n   * Checks if `value` is in the array cache.\n   *\n   * @private\n   * @name has\n   * @memberOf SetCache\n   * @param {*} value The value to search for.\n   * @returns {number} Returns `true` if `value` is found, else `false`.\n   */\n\n\n  function setCacheHas(value) {\n    return this.__data__.has(value);\n  } // Add methods to `SetCache`.\n\n\n  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n  SetCache.prototype.has = setCacheHas;\n  /**\n   * Creates a stack cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function Stack(entries) {\n    var data = this.__data__ = new ListCache(entries);\n    this.size = data.size;\n  }\n  /**\n   * Removes all key-value entries from the stack.\n   *\n   * @private\n   * @name clear\n   * @memberOf Stack\n   */\n\n\n  function stackClear() {\n    this.__data__ = new ListCache();\n    this.size = 0;\n  }\n  /**\n   * Removes `key` and its value from the stack.\n   *\n   * @private\n   * @name delete\n   * @memberOf Stack\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function stackDelete(key) {\n    var data = this.__data__,\n        result = data['delete'](key);\n    this.size = data.size;\n    return result;\n  }\n  /**\n   * Gets the stack value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Stack\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function stackGet(key) {\n    return this.__data__.get(key);\n  }\n  /**\n   * Checks if a stack value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Stack\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function stackHas(key) {\n    return this.__data__.has(key);\n  }\n  /**\n   * Sets the stack `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Stack\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the stack cache instance.\n   */\n\n\n  function stackSet(key, value) {\n    var data = this.__data__;\n\n    if (data instanceof ListCache) {\n      var pairs = data.__data__;\n\n      if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n        pairs.push([key, value]);\n        this.size = ++data.size;\n        return this;\n      }\n\n      data = this.__data__ = new MapCache(pairs);\n    }\n\n    data.set(key, value);\n    this.size = data.size;\n    return this;\n  } // Add methods to `Stack`.\n\n\n  Stack.prototype.clear = stackClear;\n  Stack.prototype['delete'] = stackDelete;\n  Stack.prototype.get = stackGet;\n  Stack.prototype.has = stackHas;\n  Stack.prototype.set = stackSet;\n  /**\n   * Creates an array of the enumerable property names of the array-like `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @param {boolean} inherited Specify returning inherited property names.\n   * @returns {Array} Returns the array of property names.\n   */\n\n  function arrayLikeKeys(value, inherited) {\n    var isArr = isArray(value),\n        isArg = !isArr && isArguments(value),\n        isBuff = !isArr && !isArg && isBuffer(value),\n        isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n        skipIndexes = isArr || isArg || isBuff || isType,\n        result = skipIndexes ? baseTimes(value.length, String) : [],\n        length = result.length;\n\n    for (var key in value) {\n      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.\n      key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.\n      isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.\n      isIndex(key, length)))) {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Gets the index at which the `key` is found in `array` of key-value pairs.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} key The key to search for.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n\n\n  function assocIndexOf(array, key) {\n    var length = array.length;\n\n    while (length--) {\n      if (eq(array[length][0], key)) {\n        return length;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * The base implementation of `_.forEach` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array|Object} Returns `collection`.\n   */\n\n\n  var baseEach = createBaseEach(baseForOwn);\n  /**\n   * The base implementation of `_.flatten` with support for restricting flattening.\n   *\n   * @private\n   * @param {Array} array The array to flatten.\n   * @param {number} depth The maximum recursion depth.\n   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n   * @param {Array} [result=[]] The initial result value.\n   * @returns {Array} Returns the new flattened array.\n   */\n\n  function baseFlatten(array, depth, predicate, isStrict, result) {\n    var index = -1,\n        length = array.length;\n    predicate || (predicate = isFlattenable);\n    result || (result = []);\n\n    while (++index < length) {\n      var value = array[index];\n\n      if (depth > 0 && predicate(value)) {\n        if (depth > 1) {\n          // Recursively flatten arrays (susceptible to call stack limits).\n          baseFlatten(value, depth - 1, predicate, isStrict, result);\n        } else {\n          arrayPush(result, value);\n        }\n      } else if (!isStrict) {\n        result[result.length] = value;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * The base implementation of `baseForOwn` which iterates over `object`\n   * properties returned by `keysFunc` and invokes `iteratee` for each property.\n   * Iteratee functions may exit iteration early by explicitly returning `false`.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @returns {Object} Returns `object`.\n   */\n\n\n  var baseFor = createBaseFor();\n  /**\n   * The base implementation of `_.forOwn` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Object} Returns `object`.\n   */\n\n  function baseForOwn(object, iteratee) {\n    return object && baseFor(object, iteratee, keys);\n  }\n  /**\n   * The base implementation of `_.get` without support for default values.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path of the property to get.\n   * @returns {*} Returns the resolved value.\n   */\n\n\n  function baseGet(object, path) {\n    path = castPath(path, object);\n    var index = 0,\n        length = path.length;\n\n    while (object != null && index < length) {\n      object = object[toKey(path[index++])];\n    }\n\n    return index && index == length ? object : undefined;\n  }\n  /**\n   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n   * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n   * symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @param {Function} symbolsFunc The function to get the symbols of `object`.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n\n\n  function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object);\n    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n  }\n  /**\n   * The base implementation of `getTag` without fallbacks for buggy environments.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n\n\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === undefined ? undefinedTag : nullTag;\n    }\n\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n  }\n  /**\n   * The base implementation of `_.hasIn` without support for deep paths.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {Array|string} key The key to check.\n   * @returns {boolean} Returns `true` if `key` exists, else `false`.\n   */\n\n\n  function baseHasIn(object, key) {\n    return object != null && key in Object(object);\n  }\n  /**\n   * The base implementation of `_.isArguments`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   */\n\n\n  function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag;\n  }\n  /**\n   * The base implementation of `_.isEqual` which supports partial comparisons\n   * and tracks traversed objects.\n   *\n   * @private\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @param {boolean} bitmask The bitmask flags.\n   *  1 - Unordered comparison\n   *  2 - Partial comparison\n   * @param {Function} [customizer] The function to customize comparisons.\n   * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   */\n\n\n  function baseIsEqual(value, other, bitmask, customizer, stack) {\n    if (value === other) {\n      return true;\n    }\n\n    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {\n      return value !== value && other !== other;\n    }\n\n    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n  }\n  /**\n   * A specialized version of `baseIsEqual` for arrays and objects which performs\n   * deep comparisons and tracks traversed objects enabling objects with circular\n   * references to be compared.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n\n\n  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n    var objIsArr = isArray(object),\n        othIsArr = isArray(other),\n        objTag = objIsArr ? arrayTag : getTag(object),\n        othTag = othIsArr ? arrayTag : getTag(other);\n    objTag = objTag == argsTag ? objectTag : objTag;\n    othTag = othTag == argsTag ? objectTag : othTag;\n    var objIsObj = objTag == objectTag,\n        othIsObj = othTag == objectTag,\n        isSameTag = objTag == othTag;\n\n    if (isSameTag && isBuffer(object)) {\n      if (!isBuffer(other)) {\n        return false;\n      }\n\n      objIsArr = true;\n      objIsObj = false;\n    }\n\n    if (isSameTag && !objIsObj) {\n      stack || (stack = new Stack());\n      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n    }\n\n    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n      if (objIsWrapped || othIsWrapped) {\n        var objUnwrapped = objIsWrapped ? object.value() : object,\n            othUnwrapped = othIsWrapped ? other.value() : other;\n        stack || (stack = new Stack());\n        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n      }\n    }\n\n    if (!isSameTag) {\n      return false;\n    }\n\n    stack || (stack = new Stack());\n    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n  }\n  /**\n   * The base implementation of `_.isMatch` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The object to inspect.\n   * @param {Object} source The object of property values to match.\n   * @param {Array} matchData The property names, values, and compare flags to match.\n   * @param {Function} [customizer] The function to customize comparisons.\n   * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n   */\n\n\n  function baseIsMatch(object, source, matchData, customizer) {\n    var index = matchData.length,\n        length = index,\n        noCustomizer = !customizer;\n\n    if (object == null) {\n      return !length;\n    }\n\n    object = Object(object);\n\n    while (index--) {\n      var data = matchData[index];\n\n      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {\n        return false;\n      }\n    }\n\n    while (++index < length) {\n      data = matchData[index];\n      var key = data[0],\n          objValue = object[key],\n          srcValue = data[1];\n\n      if (noCustomizer && data[2]) {\n        if (objValue === undefined && !(key in object)) {\n          return false;\n        }\n      } else {\n        var stack = new Stack();\n\n        if (customizer) {\n          var result = customizer(objValue, srcValue, key, object, source, stack);\n        }\n\n        if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * The base implementation of `_.isNative` without bad shim checks.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function,\n   *  else `false`.\n   */\n\n\n  function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n      return false;\n    }\n\n    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n  }\n  /**\n   * The base implementation of `_.isTypedArray` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   */\n\n\n  function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n  }\n  /**\n   * The base implementation of `_.iteratee`.\n   *\n   * @private\n   * @param {*} [value=_.identity] The value to convert to an iteratee.\n   * @returns {Function} Returns the iteratee.\n   */\n\n\n  function baseIteratee(value) {\n    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n    if (typeof value == 'function') {\n      return value;\n    }\n\n    if (value == null) {\n      return identity;\n    }\n\n    if (typeof value == 'object') {\n      return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);\n    }\n\n    return property(value);\n  }\n  /**\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n\n\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys(object);\n    }\n\n    var result = [];\n\n    for (var key in Object(object)) {\n      if (hasOwnProperty.call(object, key) && key != 'constructor') {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * The base implementation of `_.map` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n\n\n  function baseMap(collection, iteratee) {\n    var index = -1,\n        result = isArrayLike(collection) ? Array(collection.length) : [];\n    baseEach(collection, function (value, key, collection) {\n      result[++index] = iteratee(value, key, collection);\n    });\n    return result;\n  }\n  /**\n   * The base implementation of `_.matches` which doesn't clone `source`.\n   *\n   * @private\n   * @param {Object} source The object of property values to match.\n   * @returns {Function} Returns the new spec function.\n   */\n\n\n  function baseMatches(source) {\n    var matchData = getMatchData(source);\n\n    if (matchData.length == 1 && matchData[0][2]) {\n      return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n    }\n\n    return function (object) {\n      return object === source || baseIsMatch(object, source, matchData);\n    };\n  }\n  /**\n   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n   *\n   * @private\n   * @param {string} path The path of the property to get.\n   * @param {*} srcValue The value to match.\n   * @returns {Function} Returns the new spec function.\n   */\n\n\n  function baseMatchesProperty(path, srcValue) {\n    if (isKey(path) && isStrictComparable(srcValue)) {\n      return matchesStrictComparable(toKey(path), srcValue);\n    }\n\n    return function (object) {\n      var objValue = get(object, path);\n      return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n    };\n  }\n  /**\n   * The base implementation of `_.orderBy` without param guards.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n   * @param {string[]} orders The sort orders of `iteratees`.\n   * @returns {Array} Returns the new sorted array.\n   */\n\n\n  function baseOrderBy(collection, iteratees, orders) {\n    var index = -1;\n    iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));\n    var result = baseMap(collection, function (value, key, collection) {\n      var criteria = arrayMap(iteratees, function (iteratee) {\n        return iteratee(value);\n      });\n      return {\n        'criteria': criteria,\n        'index': ++index,\n        'value': value\n      };\n    });\n    return baseSortBy(result, function (object, other) {\n      return compareMultiple(object, other, orders);\n    });\n  }\n  /**\n   * A specialized version of `baseProperty` which supports deep paths.\n   *\n   * @private\n   * @param {Array|string} path The path of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n\n\n  function basePropertyDeep(path) {\n    return function (object) {\n      return baseGet(object, path);\n    };\n  }\n  /**\n   * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n   *\n   * @private\n   * @param {Function} func The function to apply a rest parameter to.\n   * @param {number} [start=func.length-1] The start position of the rest parameter.\n   * @returns {Function} Returns the new function.\n   */\n\n\n  function baseRest(func, start) {\n    return setToString(overRest(func, start, identity), func + '');\n  }\n  /**\n   * The base implementation of `setToString` without support for hot loop shorting.\n   *\n   * @private\n   * @param {Function} func The function to modify.\n   * @param {Function} string The `toString` result.\n   * @returns {Function} Returns `func`.\n   */\n\n\n  var baseSetToString = !defineProperty ? identity : function (func, string) {\n    return defineProperty(func, 'toString', {\n      'configurable': true,\n      'enumerable': false,\n      'value': constant(string),\n      'writable': true\n    });\n  };\n  /**\n   * The base implementation of `_.toString` which doesn't convert nullish\n   * values to empty strings.\n   *\n   * @private\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   */\n\n  function baseToString(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == 'string') {\n      return value;\n    }\n\n    if (isArray(value)) {\n      // Recursively convert values (susceptible to call stack limits).\n      return arrayMap(value, baseToString) + '';\n    }\n\n    if (isSymbol(value)) {\n      return symbolToString ? symbolToString.call(value) : '';\n    }\n\n    var result = value + '';\n    return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n  }\n  /**\n   * Casts `value` to a path array if it's not one.\n   *\n   * @private\n   * @param {*} value The value to inspect.\n   * @param {Object} [object] The object to query keys on.\n   * @returns {Array} Returns the cast property path array.\n   */\n\n\n  function castPath(value, object) {\n    if (isArray(value)) {\n      return value;\n    }\n\n    return isKey(value, object) ? [value] : stringToPath(toString(value));\n  }\n  /**\n   * Compares values to sort them in ascending order.\n   *\n   * @private\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {number} Returns the sort order indicator for `value`.\n   */\n\n\n  function compareAscending(value, other) {\n    if (value !== other) {\n      var valIsDefined = value !== undefined,\n          valIsNull = value === null,\n          valIsReflexive = value === value,\n          valIsSymbol = isSymbol(value);\n      var othIsDefined = other !== undefined,\n          othIsNull = other === null,\n          othIsReflexive = other === other,\n          othIsSymbol = isSymbol(other);\n\n      if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {\n        return 1;\n      }\n\n      if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {\n        return -1;\n      }\n    }\n\n    return 0;\n  }\n  /**\n   * Used by `_.orderBy` to compare multiple properties of a value to another\n   * and stable sort them.\n   *\n   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n   * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n   * of corresponding values.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {boolean[]|string[]} orders The order to sort by for each property.\n   * @returns {number} Returns the sort order indicator for `object`.\n   */\n\n\n  function compareMultiple(object, other, orders) {\n    var index = -1,\n        objCriteria = object.criteria,\n        othCriteria = other.criteria,\n        length = objCriteria.length,\n        ordersLength = orders.length;\n\n    while (++index < length) {\n      var result = compareAscending(objCriteria[index], othCriteria[index]);\n\n      if (result) {\n        if (index >= ordersLength) {\n          return result;\n        }\n\n        var order = orders[index];\n        return result * (order == 'desc' ? -1 : 1);\n      }\n    } // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n    // that causes it, under certain circumstances, to provide the same value for\n    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n    // for more details.\n    //\n    // This also ensures a stable sort in V8 and other engines.\n    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n\n\n    return object.index - other.index;\n  }\n  /**\n   * Creates a `baseEach` or `baseEachRight` function.\n   *\n   * @private\n   * @param {Function} eachFunc The function to iterate over a collection.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Function} Returns the new base function.\n   */\n\n\n  function createBaseEach(eachFunc, fromRight) {\n    return function (collection, iteratee) {\n      if (collection == null) {\n        return collection;\n      }\n\n      if (!isArrayLike(collection)) {\n        return eachFunc(collection, iteratee);\n      }\n\n      var length = collection.length,\n          index = fromRight ? length : -1,\n          iterable = Object(collection);\n\n      while (fromRight ? index-- : ++index < length) {\n        if (iteratee(iterable[index], index, iterable) === false) {\n          break;\n        }\n      }\n\n      return collection;\n    };\n  }\n  /**\n   * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n   *\n   * @private\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Function} Returns the new base function.\n   */\n\n\n  function createBaseFor(fromRight) {\n    return function (object, iteratee, keysFunc) {\n      var index = -1,\n          iterable = Object(object),\n          props = keysFunc(object),\n          length = props.length;\n\n      while (length--) {\n        var key = props[fromRight ? length : ++index];\n\n        if (iteratee(iterable[key], key, iterable) === false) {\n          break;\n        }\n      }\n\n      return object;\n    };\n  }\n  /**\n   * A specialized version of `baseIsEqualDeep` for arrays with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Array} array The array to compare.\n   * @param {Array} other The other array to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `array` and `other` objects.\n   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n   */\n\n\n  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n        arrLength = array.length,\n        othLength = other.length;\n\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n      return false;\n    } // Assume cyclic values are equal.\n\n\n    var stacked = stack.get(array);\n\n    if (stacked && stack.get(other)) {\n      return stacked == other;\n    }\n\n    var index = -1,\n        result = true,\n        seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;\n    stack.set(array, other);\n    stack.set(other, array); // Ignore non-index properties.\n\n    while (++index < arrLength) {\n      var arrValue = array[index],\n          othValue = other[index];\n\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n      }\n\n      if (compared !== undefined) {\n        if (compared) {\n          continue;\n        }\n\n        result = false;\n        break;\n      } // Recursively compare arrays (susceptible to call stack limits).\n\n\n      if (seen) {\n        if (!arraySome(other, function (othValue, othIndex) {\n          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n            return seen.push(othIndex);\n          }\n        })) {\n          result = false;\n          break;\n        }\n      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n        result = false;\n        break;\n      }\n    }\n\n    stack['delete'](array);\n    stack['delete'](other);\n    return result;\n  }\n  /**\n   * A specialized version of `baseIsEqualDeep` for comparing objects of\n   * the same `toStringTag`.\n   *\n   * **Note:** This function only supports comparing values with tags of\n   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {string} tag The `toStringTag` of the objects to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n\n\n  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n    switch (tag) {\n      case dataViewTag:\n        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n          return false;\n        }\n\n        object = object.buffer;\n        other = other.buffer;\n\n      case arrayBufferTag:\n        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n          return false;\n        }\n\n        return true;\n\n      case boolTag:\n      case dateTag:\n      case numberTag:\n        // Coerce booleans to `1` or `0` and dates to milliseconds.\n        // Invalid dates are coerced to `NaN`.\n        return eq(+object, +other);\n\n      case errorTag:\n        return object.name == other.name && object.message == other.message;\n\n      case regexpTag:\n      case stringTag:\n        // Coerce regexes to strings and treat strings, primitives and objects,\n        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n        // for more details.\n        return object == other + '';\n\n      case mapTag:\n        var convert = mapToArray;\n\n      case setTag:\n        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n        convert || (convert = setToArray);\n\n        if (object.size != other.size && !isPartial) {\n          return false;\n        } // Assume cyclic values are equal.\n\n\n        var stacked = stack.get(object);\n\n        if (stacked) {\n          return stacked == other;\n        }\n\n        bitmask |= COMPARE_UNORDERED_FLAG; // Recursively compare objects (susceptible to call stack limits).\n\n        stack.set(object, other);\n        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n        stack['delete'](object);\n        return result;\n\n      case symbolTag:\n        if (symbolValueOf) {\n          return symbolValueOf.call(object) == symbolValueOf.call(other);\n        }\n\n    }\n\n    return false;\n  }\n  /**\n   * A specialized version of `baseIsEqualDeep` for objects with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n\n\n  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n        objProps = getAllKeys(object),\n        objLength = objProps.length,\n        othProps = getAllKeys(other),\n        othLength = othProps.length;\n\n    if (objLength != othLength && !isPartial) {\n      return false;\n    }\n\n    var index = objLength;\n\n    while (index--) {\n      var key = objProps[index];\n\n      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n        return false;\n      }\n    } // Assume cyclic values are equal.\n\n\n    var stacked = stack.get(object);\n\n    if (stacked && stack.get(other)) {\n      return stacked == other;\n    }\n\n    var result = true;\n    stack.set(object, other);\n    stack.set(other, object);\n    var skipCtor = isPartial;\n\n    while (++index < objLength) {\n      key = objProps[index];\n      var objValue = object[key],\n          othValue = other[key];\n\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n      } // Recursively compare objects (susceptible to call stack limits).\n\n\n      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n        result = false;\n        break;\n      }\n\n      skipCtor || (skipCtor = key == 'constructor');\n    }\n\n    if (result && !skipCtor) {\n      var objCtor = object.constructor,\n          othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.\n\n      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n        result = false;\n      }\n    }\n\n    stack['delete'](object);\n    stack['delete'](other);\n    return result;\n  }\n  /**\n   * Creates an array of own enumerable property names and symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n\n\n  function getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols);\n  }\n  /**\n   * Gets the data for `map`.\n   *\n   * @private\n   * @param {Object} map The map to query.\n   * @param {string} key The reference key.\n   * @returns {*} Returns the map data.\n   */\n\n\n  function getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;\n  }\n  /**\n   * Gets the property names, values, and compare flags of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the match data of `object`.\n   */\n\n\n  function getMatchData(object) {\n    var result = keys(object),\n        length = result.length;\n\n    while (length--) {\n      var key = result[length],\n          value = object[key];\n      result[length] = [key, value, isStrictComparable(value)];\n    }\n\n    return result;\n  }\n  /**\n   * Gets the native function at `key` of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the method to get.\n   * @returns {*} Returns the function if it's native, else `undefined`.\n   */\n\n\n  function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n  }\n  /**\n   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the raw `toStringTag`.\n   */\n\n\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag),\n        tag = value[symToStringTag];\n\n    try {\n      value[symToStringTag] = undefined;\n      var unmasked = true;\n    } catch (e) {}\n\n    var result = nativeObjectToString.call(value);\n\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag] = tag;\n      } else {\n        delete value[symToStringTag];\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Creates an array of the own enumerable symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of symbols.\n   */\n\n\n  var getSymbols = !nativeGetSymbols ? stubArray : function (object) {\n    if (object == null) {\n      return [];\n    }\n\n    object = Object(object);\n    return arrayFilter(nativeGetSymbols(object), function (symbol) {\n      return propertyIsEnumerable.call(object, symbol);\n    });\n  };\n  /**\n   * Gets the `toStringTag` of `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n\n  var getTag = baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n\n  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {\n    getTag = function (value) {\n      var result = baseGetTag(value),\n          Ctor = result == objectTag ? value.constructor : undefined,\n          ctorString = Ctor ? toSource(Ctor) : '';\n\n      if (ctorString) {\n        switch (ctorString) {\n          case dataViewCtorString:\n            return dataViewTag;\n\n          case mapCtorString:\n            return mapTag;\n\n          case promiseCtorString:\n            return promiseTag;\n\n          case setCtorString:\n            return setTag;\n\n          case weakMapCtorString:\n            return weakMapTag;\n        }\n      }\n\n      return result;\n    };\n  }\n  /**\n   * Checks if `path` exists on `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path to check.\n   * @param {Function} hasFunc The function to check properties.\n   * @returns {boolean} Returns `true` if `path` exists, else `false`.\n   */\n\n\n  function hasPath(object, path, hasFunc) {\n    path = castPath(path, object);\n    var index = -1,\n        length = path.length,\n        result = false;\n\n    while (++index < length) {\n      var key = toKey(path[index]);\n\n      if (!(result = object != null && hasFunc(object, key))) {\n        break;\n      }\n\n      object = object[key];\n    }\n\n    if (result || ++index != length) {\n      return result;\n    }\n\n    length = object == null ? 0 : object.length;\n    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));\n  }\n  /**\n   * Checks if `value` is a flattenable `arguments` object or array.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n   */\n\n\n  function isFlattenable(value) {\n    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);\n  }\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n\n\n  function isIndex(value, length) {\n    var type = typeof value;\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n  }\n  /**\n   * Checks if the given arguments are from an iteratee call.\n   *\n   * @private\n   * @param {*} value The potential iteratee value argument.\n   * @param {*} index The potential iteratee index or key argument.\n   * @param {*} object The potential iteratee object argument.\n   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n   *  else `false`.\n   */\n\n\n  function isIterateeCall(value, index, object) {\n    if (!isObject(object)) {\n      return false;\n    }\n\n    var type = typeof index;\n\n    if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {\n      return eq(object[index], value);\n    }\n\n    return false;\n  }\n  /**\n   * Checks if `value` is a property name and not a property path.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {Object} [object] The object to query keys on.\n   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n   */\n\n\n  function isKey(value, object) {\n    if (isArray(value)) {\n      return false;\n    }\n\n    var type = typeof value;\n\n    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {\n      return true;\n    }\n\n    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);\n  }\n  /**\n   * Checks if `value` is suitable for use as unique object key.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n   */\n\n\n  function isKeyable(value) {\n    var type = typeof value;\n    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;\n  }\n  /**\n   * Checks if `func` has its source masked.\n   *\n   * @private\n   * @param {Function} func The function to check.\n   * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n   */\n\n\n  function isMasked(func) {\n    return !!maskSrcKey && maskSrcKey in func;\n  }\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n\n\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;\n    return value === proto;\n  }\n  /**\n   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` if suitable for strict\n   *  equality comparisons, else `false`.\n   */\n\n\n  function isStrictComparable(value) {\n    return value === value && !isObject(value);\n  }\n  /**\n   * A specialized version of `matchesProperty` for source values suitable\n   * for strict equality comparisons, i.e. `===`.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @param {*} srcValue The value to match.\n   * @returns {Function} Returns the new spec function.\n   */\n\n\n  function matchesStrictComparable(key, srcValue) {\n    return function (object) {\n      if (object == null) {\n        return false;\n      }\n\n      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));\n    };\n  }\n  /**\n   * A specialized version of `_.memoize` which clears the memoized function's\n   * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n   *\n   * @private\n   * @param {Function} func The function to have its output memoized.\n   * @returns {Function} Returns the new memoized function.\n   */\n\n\n  function memoizeCapped(func) {\n    var result = memoize(func, function (key) {\n      if (cache.size === MAX_MEMOIZE_SIZE) {\n        cache.clear();\n      }\n\n      return key;\n    });\n    var cache = result.cache;\n    return result;\n  }\n  /**\n   * Converts `value` to a string using `Object.prototype.toString`.\n   *\n   * @private\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   */\n\n\n  function objectToString(value) {\n    return nativeObjectToString.call(value);\n  }\n  /**\n   * A specialized version of `baseRest` which transforms the rest array.\n   *\n   * @private\n   * @param {Function} func The function to apply a rest parameter to.\n   * @param {number} [start=func.length-1] The start position of the rest parameter.\n   * @param {Function} transform The rest array transform.\n   * @returns {Function} Returns the new function.\n   */\n\n\n  function overRest(func, start, transform) {\n    start = nativeMax(start === undefined ? func.length - 1 : start, 0);\n    return function () {\n      var args = arguments,\n          index = -1,\n          length = nativeMax(args.length - start, 0),\n          array = Array(length);\n\n      while (++index < length) {\n        array[index] = args[start + index];\n      }\n\n      index = -1;\n      var otherArgs = Array(start + 1);\n\n      while (++index < start) {\n        otherArgs[index] = args[index];\n      }\n\n      otherArgs[start] = transform(array);\n      return apply(func, this, otherArgs);\n    };\n  }\n  /**\n   * Sets the `toString` method of `func` to return `string`.\n   *\n   * @private\n   * @param {Function} func The function to modify.\n   * @param {Function} string The `toString` result.\n   * @returns {Function} Returns `func`.\n   */\n\n\n  var setToString = shortOut(baseSetToString);\n  /**\n   * Creates a function that'll short out and invoke `identity` instead\n   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n   * milliseconds.\n   *\n   * @private\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new shortable function.\n   */\n\n  function shortOut(func) {\n    var count = 0,\n        lastCalled = 0;\n    return function () {\n      var stamp = nativeNow(),\n          remaining = HOT_SPAN - (stamp - lastCalled);\n      lastCalled = stamp;\n\n      if (remaining > 0) {\n        if (++count >= HOT_COUNT) {\n          return arguments[0];\n        }\n      } else {\n        count = 0;\n      }\n\n      return func.apply(undefined, arguments);\n    };\n  }\n  /**\n   * Converts `string` to a property path array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the property path array.\n   */\n\n\n  var stringToPath = memoizeCapped(function (string) {\n    var result = [];\n\n    if (string.charCodeAt(0) === 46\n    /* . */\n    ) {\n        result.push('');\n      }\n\n    string.replace(rePropName, function (match, number, quote, subString) {\n      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);\n    });\n    return result;\n  });\n  /**\n   * Converts `value` to a string key if it's not a string or symbol.\n   *\n   * @private\n   * @param {*} value The value to inspect.\n   * @returns {string|symbol} Returns the key.\n   */\n\n  function toKey(value) {\n    if (typeof value == 'string' || isSymbol(value)) {\n      return value;\n    }\n\n    var result = value + '';\n    return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n  }\n  /**\n   * Converts `func` to its source code.\n   *\n   * @private\n   * @param {Function} func The function to convert.\n   * @returns {string} Returns the source code.\n   */\n\n\n  function toSource(func) {\n    if (func != null) {\n      try {\n        return funcToString.call(func);\n      } catch (e) {}\n\n      try {\n        return func + '';\n      } catch (e) {}\n    }\n\n    return '';\n  }\n  /**\n   * Creates an array of elements, sorted in ascending order by the results of\n   * running each element in a collection thru each iteratee. This method\n   * performs a stable sort, that is, it preserves the original sort order of\n   * equal elements. The iteratees are invoked with one argument: (value).\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {...(Function|Function[])} [iteratees=[_.identity]]\n   *  The iteratees to sort by.\n   * @returns {Array} Returns the new sorted array.\n   * @example\n   *\n   * var users = [\n   *   { 'user': 'fred',   'age': 48 },\n   *   { 'user': 'barney', 'age': 36 },\n   *   { 'user': 'fred',   'age': 40 },\n   *   { 'user': 'barney', 'age': 34 }\n   * ];\n   *\n   * _.sortBy(users, [function(o) { return o.user; }]);\n   * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n   *\n   * _.sortBy(users, ['user', 'age']);\n   * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n   */\n\n\n  var sortBy = baseRest(function (collection, iteratees) {\n    if (collection == null) {\n      return [];\n    }\n\n    var length = iteratees.length;\n\n    if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n      iteratees = [];\n    } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n      iteratees = [iteratees[0]];\n    }\n\n    return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n  });\n  /**\n   * Creates a function that memoizes the result of `func`. If `resolver` is\n   * provided, it determines the cache key for storing the result based on the\n   * arguments provided to the memoized function. By default, the first argument\n   * provided to the memoized function is used as the map cache key. The `func`\n   * is invoked with the `this` binding of the memoized function.\n   *\n   * **Note:** The cache is exposed as the `cache` property on the memoized\n   * function. Its creation may be customized by replacing the `_.memoize.Cache`\n   * constructor with one whose instances implement the\n   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n   * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to have its output memoized.\n   * @param {Function} [resolver] The function to resolve the cache key.\n   * @returns {Function} Returns the new memoized function.\n   * @example\n   *\n   * var object = { 'a': 1, 'b': 2 };\n   * var other = { 'c': 3, 'd': 4 };\n   *\n   * var values = _.memoize(_.values);\n   * values(object);\n   * // => [1, 2]\n   *\n   * values(other);\n   * // => [3, 4]\n   *\n   * object.a = 2;\n   * values(object);\n   * // => [1, 2]\n   *\n   * // Modify the result cache.\n   * values.cache.set(object, ['a', 'b']);\n   * values(object);\n   * // => ['a', 'b']\n   *\n   * // Replace `_.memoize.Cache`.\n   * _.memoize.Cache = WeakMap;\n   */\n\n  function memoize(func, resolver) {\n    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n\n    var memoized = function () {\n      var args = arguments,\n          key = resolver ? resolver.apply(this, args) : args[0],\n          cache = memoized.cache;\n\n      if (cache.has(key)) {\n        return cache.get(key);\n      }\n\n      var result = func.apply(this, args);\n      memoized.cache = cache.set(key, result) || cache;\n      return result;\n    };\n\n    memoized.cache = new (memoize.Cache || MapCache)();\n    return memoized;\n  } // Expose `MapCache`.\n\n\n  memoize.Cache = MapCache;\n  /**\n   * Performs a\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * comparison between two values to determine if they are equivalent.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   * var other = { 'a': 1 };\n   *\n   * _.eq(object, object);\n   * // => true\n   *\n   * _.eq(object, other);\n   * // => false\n   *\n   * _.eq('a', 'a');\n   * // => true\n   *\n   * _.eq('a', Object('a'));\n   * // => false\n   *\n   * _.eq(NaN, NaN);\n   * // => true\n   */\n\n  function eq(value, other) {\n    return value === other || value !== value && other !== other;\n  }\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n\n\n  var isArguments = baseIsArguments(function () {\n    return arguments;\n  }()) ? baseIsArguments : function (value) {\n    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');\n  };\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n\n  var isArray = Array.isArray;\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  }\n  /**\n   * Checks if `value` is a buffer.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n   * @example\n   *\n   * _.isBuffer(new Buffer(2));\n   * // => true\n   *\n   * _.isBuffer(new Uint8Array(2));\n   * // => false\n   */\n\n\n  var isBuffer = nativeIsBuffer || stubFalse;\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n\n  function isFunction(value) {\n    if (!isObject(value)) {\n      return false;\n    } // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n\n\n    var tag = baseGetTag(value);\n    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n  }\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n\n\n  function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n\n\n  function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == 'object' || type == 'function');\n  }\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n\n\n  function isObjectLike(value) {\n    return value != null && typeof value == 'object';\n  }\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n\n\n  function isSymbol(value) {\n    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;\n  }\n  /**\n   * Checks if `value` is classified as a typed array.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   * @example\n   *\n   * _.isTypedArray(new Uint8Array);\n   * // => true\n   *\n   * _.isTypedArray([]);\n   * // => false\n   */\n\n\n  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n  /**\n   * Converts `value` to a string. An empty string is returned for `null`\n   * and `undefined` values. The sign of `-0` is preserved.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   * @example\n   *\n   * _.toString(null);\n   * // => ''\n   *\n   * _.toString(-0);\n   * // => '-0'\n   *\n   * _.toString([1, 2, 3]);\n   * // => '1,2,3'\n   */\n\n  function toString(value) {\n    return value == null ? '' : baseToString(value);\n  }\n  /**\n   * Gets the value at `path` of `object`. If the resolved value is\n   * `undefined`, the `defaultValue` is returned in its place.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.7.0\n   * @category Object\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path of the property to get.\n   * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n   * @returns {*} Returns the resolved value.\n   * @example\n   *\n   * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n   *\n   * _.get(object, 'a[0].b.c');\n   * // => 3\n   *\n   * _.get(object, ['a', '0', 'b', 'c']);\n   * // => 3\n   *\n   * _.get(object, 'a.b.c', 'default');\n   * // => 'default'\n   */\n\n\n  function get(object, path, defaultValue) {\n    var result = object == null ? undefined : baseGet(object, path);\n    return result === undefined ? defaultValue : result;\n  }\n  /**\n   * Checks if `path` is a direct or inherited property of `object`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Object\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path to check.\n   * @returns {boolean} Returns `true` if `path` exists, else `false`.\n   * @example\n   *\n   * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n   *\n   * _.hasIn(object, 'a');\n   * // => true\n   *\n   * _.hasIn(object, 'a.b');\n   * // => true\n   *\n   * _.hasIn(object, ['a', 'b']);\n   * // => true\n   *\n   * _.hasIn(object, 'b');\n   * // => false\n   */\n\n\n  function hasIn(object, path) {\n    return object != null && hasPath(object, path, baseHasIn);\n  }\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n\n\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n  }\n  /**\n   * Creates a function that returns `value`.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Util\n   * @param {*} value The value to return from the new function.\n   * @returns {Function} Returns the new constant function.\n   * @example\n   *\n   * var objects = _.times(2, _.constant({ 'a': 1 }));\n   *\n   * console.log(objects);\n   * // => [{ 'a': 1 }, { 'a': 1 }]\n   *\n   * console.log(objects[0] === objects[1]);\n   * // => true\n   */\n\n\n  function constant(value) {\n    return function () {\n      return value;\n    };\n  }\n  /**\n   * This method returns the first argument it receives.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Util\n   * @param {*} value Any value.\n   * @returns {*} Returns `value`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   *\n   * console.log(_.identity(object) === object);\n   * // => true\n   */\n\n\n  function identity(value) {\n    return value;\n  }\n  /**\n   * Creates a function that returns the value at `path` of a given object.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Util\n   * @param {Array|string} path The path of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   * @example\n   *\n   * var objects = [\n   *   { 'a': { 'b': 2 } },\n   *   { 'a': { 'b': 1 } }\n   * ];\n   *\n   * _.map(objects, _.property('a.b'));\n   * // => [2, 1]\n   *\n   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n   * // => [1, 2]\n   */\n\n\n  function property(path) {\n    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n  }\n  /**\n   * This method returns a new empty array.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {Array} Returns the new empty array.\n   * @example\n   *\n   * var arrays = _.times(2, _.stubArray);\n   *\n   * console.log(arrays);\n   * // => [[], []]\n   *\n   * console.log(arrays[0] === arrays[1]);\n   * // => false\n   */\n\n\n  function stubArray() {\n    return [];\n  }\n  /**\n   * This method returns `false`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {boolean} Returns `false`.\n   * @example\n   *\n   * _.times(2, _.stubFalse);\n   * // => [false, false]\n   */\n\n\n  function stubFalse() {\n    return false;\n  }\n\n  module.exports = sortBy;\n  });\n\n  var ClipChannel =\n  /*#__PURE__*/\n  function (_Channel) {\n    _inherits(ClipChannel, _Channel);\n\n    function ClipChannel() {\n      _classCallCheck(this, ClipChannel);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(ClipChannel).apply(this, arguments));\n    }\n\n    _createClass(ClipChannel, [{\n      key: \"onInitialise\",\n\n      /*\n        this.incidents is a collection of {incident, id, millisecond} objects always kept in order\n            from lower to higher millisecond\n        this.incidetnsById is an index of the incidents kept by id (this.incidents[incident-id] = Incident)\n        */\n      value: function onInitialise() {\n        this.incidents = [];\n        this.incidentsById = {};\n      }\n    }, {\n      key: \"_incidentById\",\n      value: function _incidentById(id) {\n        return this.incidentsById[id];\n      }\n    }, {\n      key: \"_resize\",\n      value: function _resize(durationFraction) {\n        for (var i = 0; i < this.incidents.length; i++) {\n          this.incidents[i].millisecond = this.incidents[i].millisecond * durationFraction;\n        }\n      }\n      /**\n        * @param {array} incidents - a colleciton of all incidents to be added on the form:\n        *\n            {\n                id\n                millisecond\n                incident\n            }\n        * @returns {object} -\n        * either:\n            {\n                result:true,\n                execute: // a function that when executed it will add the Incidents on the Channels\n            }\n            or\n            {\n                result: false,\n                errors\n            }\n        */\n\n    }, {\n      key: \"checkAddition\",\n      value: function checkAddition(incidents) {\n        var errors = [];\n        var candidateIncidentsById = {};\n        var incidentsToConcat = [];\n\n        for (var i = 0; i < incidents.length; i++) {\n          candidateIncidentsById[incidents[i].id] = incidents[i].incident;\n          incidentsToConcat.push({\n            id: incidents[i].id,\n            millisecond: incidents[i].millisecond\n          });\n\n          if (Object.prototype.hasOwnProperty.call(this.incidentsById, incidents[i].id)) {\n            helper.error(\"Incident with the id \".concat(incidents[i].id, \" already exists. Addition is rejected.\"));\n            errors.push({\n              type: 'Already existing id',\n              meta: {\n                id: incidents[i].id\n              }\n            });\n          }\n        }\n\n        if (errors.length > 0) {\n          return {\n            result: false,\n            errors: errors\n          };\n        }\n\n        var that = this;\n\n        var exec = function execFunct() {\n          that.incidentsById = Object.assign(that.incidentsById, candidateIncidentsById);\n          that.incidents = that.incidents.concat(incidentsToConcat);\n          that.incidents = lodash_sortby(that.incidents, [function (laneItem) {\n            return laneItem.millisecond;\n          }]);\n\n          for (var _i = 0; _i < incidents.length; _i++) {\n            that._incidentById(incidents[_i].id)._onGetContextOnce(that.context);\n          }\n        };\n\n        return {\n          result: true,\n          execute: exec\n        };\n      }\n      /**\n        @param {array} incidentsArray - A collection of the Incidetns to get edited in the form:\n        {\n            id\n            millisecond\n            incident\n        }\n        @param {int} millisecondsDelta- the delta of the star point of the provided incidents\n        */\n\n    }, {\n      key: \"checkEdit\",\n      value: function checkEdit(incidentsArray, millisecondsDelta) {\n        var that = this;\n\n        var exec = function execFunct() {\n          for (var i = 0; i < incidentsArray.length; i++) {\n            for (var j = 0; j < that.incidents.length; j++) {\n              if (that.incidents[j].id === incidentsArray[i].id) {\n                that.incidents[j].millisecond += millisecondsDelta;\n                break;\n              }\n            }\n          }\n\n          that.incidents = lodash_sortby(that.incidents, [function (laneItem) {\n            return laneItem.millisecond;\n          }]);\n        };\n\n        return {\n          result: true,\n          execute: exec\n        };\n      }\n    }, {\n      key: \"checkDelete\",\n      value: function checkDelete(incidentsArray) {\n        var that = this;\n        var incidentIds = [];\n\n        for (var i = 0; i < incidentsArray.length; i++) {\n          incidentIds.push(incidentsArray[i].id);\n        }\n\n        var exec = function execFunct() {\n          var newIncidents = lodash_filter(that.incidents, function (incident) {\n            return incidentIds.indexOf(incident.id) === -1;\n          });\n\n          that.incidents = newIncidents;\n\n          for (var _i2 = 0; _i2 < incidentIds.length; _i2++) {\n            delete that.incidentsById[incidentIds[_i2]];\n          }\n        };\n\n        return {\n          result: true,\n          execute: exec\n        };\n      }\n      /**\n       * @param {array} incidents - [{id, start, end, startDelta}]\n       */\n\n    }, {\n      key: \"checkResizedIncidents\",\n      value: function checkResizedIncidents(incidents) {\n        var that = this;\n\n        var exec = function execFunct() {\n          for (var i = 0; i < incidents.length; i++) {\n            for (var j = 0; j < that.incidents.length; j++) {\n              if (that.incidents[j].id === incidents[i].id) {\n                that.incidents[j].millisecond += incidents[i].startDelta;\n                break;\n              }\n            }\n          }\n\n          that.incidents = lodash_sortby(that.incidents, [function (laneItem) {\n            return laneItem.millisecond;\n          }]);\n        };\n\n        return {\n          result: true,\n          execute: exec\n        };\n      }\n      /**\n         @param {int} from - the millisecond to start from\n         @param {int} to - the millisecond to go to\n         @param {string} contextId - the context id to move\n         @param {boolean} forceReset - set to true when we want full flash\n         */\n\n    }, {\n      key: \"moveTo\",\n      value: function moveTo(from, to, contextId) {\n        var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n        if (forceReset === true) {\n          // incidents: [{id, millisecond}, {}, {}...]\n          for (var i = 0; i < this.incidents.length; i++) {\n            var laneItem = this.incidents[i];\n\n            var incident = this._incidentById(laneItem.id);\n\n            if (to < laneItem.millisecond) {\n              incident.onProgress(0, 0, contextId, true);\n            } else if (to > laneItem.millisecond + incident.duration) {\n              incident.onProgress(1, incident.duration, contextId, true);\n            } else {\n              incident.onProgress((to - laneItem.millisecond) / incident.duration, to - laneItem.millisecond, contextId, true);\n            }\n          }\n        } else {\n          var that = this;\n          var participatingItems;\n\n          if (to > from) {\n            participatingItems = lodash_filter(this.incidents, function (laneItem) {\n              return (// it ends after from and before to millisecond\n                // or it ends after the target millisecond but also starts before it\n                laneItem.millisecond + that._incidentById(laneItem.id).duration >= from && laneItem.millisecond + that._incidentById(laneItem.id).duration <= to || that._incidentById(laneItem.id).duration + laneItem.millisecond >= to && laneItem.millisecond <= to\n              );\n            });\n          } else {\n            participatingItems = lodash_filter(this.incidents, function (laneItem) {\n              return (// it ends after from and before to millisecond\n                // or it ends after the target millisecond but also starts before it\n                laneItem.millisecond + that._incidentById(laneItem.id).duration >= to && laneItem.millisecond + that._incidentById(laneItem.id).duration <= from || that._incidentById(laneItem.id).duration + laneItem.millisecond >= from && laneItem.millisecond <= from\n              );\n            });\n          }\n\n          for (var _i3 = 0; _i3 < participatingItems.length; _i3++) {\n            var _laneItem = participatingItems[_i3];\n\n            var contextAwareClipIncident = this._incidentById(_laneItem.id); // onProgress(fraction, milliseconds, contextId, forceReset = false) {\n\n\n            var overcameEnd = (to - _laneItem.millisecond) / contextAwareClipIncident.duration >= 1;\n            var fraction = overcameEnd ? 1 : (to - _laneItem.millisecond) / contextAwareClipIncident.duration;\n            var millisecond = overcameEnd ? contextAwareClipIncident.duration : to - _laneItem.millisecond;\n            contextAwareClipIncident.onProgress(fraction, millisecond, contextId, false);\n          }\n        } // this.runTimeInfo.currentMillisecond = to;\n\n      }\n    }]);\n\n    return ClipChannel;\n  }(Channel);\n\n  /**\n   * https://github.com/gre/bezier-easing\n   * BezierEasing - use bezier curve for transition easing function\n   * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n   */\n  // These values are established by empiricism with tests (tradeoff: performance VS precision)\n  var NEWTON_ITERATIONS = 4;\n  var NEWTON_MIN_SLOPE = 0.001;\n  var SUBDIVISION_PRECISION = 0.0000001;\n  var SUBDIVISION_MAX_ITERATIONS = 10;\n  var kSplineTableSize = 11;\n  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n  var float32ArraySupported = typeof Float32Array === 'function';\n\n  function A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n\n  function B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n\n  function C(aA1) {\n    return 3.0 * aA1;\n  } // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n\n\n  function calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  } // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n\n\n  function getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function binarySubdivide(aX, aA, aB, mX1, mX2) {\n    var currentX,\n        currentT,\n        i = 0;\n\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n    return currentT;\n  }\n\n  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n      var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n\n      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n\n    return aGuessT;\n  }\n\n  function LinearEasing(x) {\n    return x;\n  }\n\n  var src = function bezier(mX1, mY1, mX2, mY2) {\n    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n      throw new Error('bezier x values must be in [0, 1] range');\n    }\n\n    if (mX1 === mY1 && mX2 === mY2) {\n      return LinearEasing;\n    } // Precompute samples table\n\n\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n\n    function getTForX(aX) {\n      var intervalStart = 0.0;\n      var currentSample = 1;\n      var lastSample = kSplineTableSize - 1;\n\n      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n        intervalStart += kSampleStepSize;\n      }\n\n      --currentSample; // Interpolate to provide an initial guess for t\n\n      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n      var guessForT = intervalStart + dist * kSampleStepSize;\n      var initialSlope = getSlope(guessForT, mX1, mX2);\n\n      if (initialSlope >= NEWTON_MIN_SLOPE) {\n        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n      } else if (initialSlope === 0.0) {\n        return guessForT;\n      } else {\n        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n      }\n    }\n\n    return function BezierEasing(x) {\n      // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n      if (x === 0) {\n        return 0;\n      }\n\n      if (x === 1) {\n        return 1;\n      }\n\n      return calcBezier(getTForX(x), mY1, mY2);\n    };\n  };\n\n  function getIncidentsByChannel(pld) {\n    pld.descriptor.value = function getIncidentsByChannelFunct() {\n      var adjustMillisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var parentMillisecond = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var incidentsByPlugin = {};\n      incidentsByPlugin[this.mc_plugin_npm_name] = [{\n        millisecond: adjustMillisecond,\n        parentMillisecond: parentMillisecond,\n        incident: this,\n        id: this.id\n      }];\n      return incidentsByPlugin;\n    };\n  }\n\n  /*\n  dna:\n  - originalId\n  - context\n  */\n\n  var MonoIncident = _decorate(null, function (_initialize) {\n    var MonoIncident = function MonoIncident() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var dna = arguments.length > 2 ? arguments[2] : undefined;\n\n      _classCallCheck(this, MonoIncident);\n\n      _initialize(this);\n\n      // super(props);\n      this.attrs = attrs;\n      this.props = props;\n      this.dna = dna;\n      this.context = dna.context;\n      this.mcid = dna.mcid;\n      this.id = props.id || getAnId();\n      this.modelId = props.modelId; // this parameter is initialised to false. Once the onGetContext method gets invoked this parameter\n      // is set to true so we prevent multiple executions of the onGetContext method\n\n      this.gotContext = false;\n      /*\n          these are the default values that define channeling for the default Incidents. These values get ovewriden through\n          the loadPlugin method of MC with the values found on the main.js file of the plugin\n          */\n\n      this.plugin_channel_class = Channel;\n      this.mc_plugin_npm_name = 'motor-cortex-js';\n\n      if (Object.prototype.hasOwnProperty.call(props, 'plugin_channel_class')) {\n        this.plugin_channel_class = props.plugin_channel_class;\n      }\n\n      if (Object.prototype.hasOwnProperty.call(props, 'mc_plugin_npm_name')) {\n        this.mc_plugin_npm_name = props.mc_plugin_npm_name;\n      }\n\n      this.hasIncidents = false;\n      /*\n          initialValues is an object holding the automatically computed initial values of the animatedAttrs\n          (if any). The initialValues are calculated by the AttributesChannel (only Incidents belonging to\n          an AttributesChannel have initialValues).\n          The keys set of this object is identical to the object attrs.animatedAttrs\n          The only thing the generic AttributesChannel can't calculate is the initial value of an animated attr\n          of a specific element when there are no other Incidents entered on its lanes yet. These values are\n          the \"scratchValues\" and they are strongly dependend on the nature of the lib. E.g. for a CSS animation\n          what we are looking for can be found on the computedStyle.\n          The initialValues are the values that are actually going to be used by\n          the MonoIncident in the real execution of them\n          */\n\n      this.initialValues = {};\n      /*\n          The initial values defined by the user via the initialValues key on the\n          attributes (if present)\n          */\n\n      this.userDefinedInitialValues = attrs.initialValues || {};\n      /*\n          The initialValues of the Incident as passed by the Attribute Channel.\n          These values are been altered by the userDefinedInitialValues (if any)\n          but we need them for passing them on other Incidents on edit and delete operations\n          */\n\n      this.pureInitialValues = null;\n      /**\n       * @member {boolean} - if autoGenerated is set to true, it means that this MonoIncident has been auto-generated by its parent on initialisation.\n       * This happens when plugins export Incidents that on initialisation they automatically create other incidents and automatically put them\n       * on specific points on their timeline.\n       */\n\n      this.autoGenerated = false;\n      this.onInitialise(attrs, props);\n    };\n\n    return {\n      F: MonoIncident,\n      d: [{\n        kind: \"get\",\n        key: \"selector\",\n        value: function selector() {\n          return this.props.selector;\n        }\n        /* shortcuts for attrs.attrs and attrs.animatedAttrs */\n\n      }, {\n        kind: \"get\",\n        key: \"animAttributes\",\n        value: function animAttributes() {\n          return this.attrs.animatedAttrs;\n        }\n      }, {\n        kind: \"set\",\n        key: \"animAttributes\",\n        value: function animAttributes(value) {\n          this.attrs.animatedAttrs[this.attributeKey] = value;\n        }\n        /**\n          This method shoudl be overwritten by the Incidents of the plugins. The method returns\n          the initial value that the element of it has as the library calculates / defines them. The\n          returned value represents the very initial value of the element's attribute before\n          any Incident that alters it gets added.\n           @returns {mixed} - the initial value of the element's attribute just when the HTML & CSS\n          of the Clip gets rendered\n          */\n\n      }, {\n        kind: \"method\",\n        key: \"getScratchValue\",\n        value: function getScratchValue() {\n          return 0;\n        }\n      }, {\n        kind: \"get\",\n        key: \"element\",\n        value: function element() {\n          if (this.contex === null) {\n            return [];\n          }\n\n          if (this.context.getElementByMCID) {\n            return this.context.getElementByMCID(this.mcid);\n          }\n\n          return this.context.getElements(this.selector)[0];\n        }\n      }, {\n        kind: \"get\",\n        key: \"attributeKey\",\n        value: function attributeKey() {\n          return Object.keys(this.attrs.animatedAttrs)[0];\n        }\n      }, {\n        kind: \"get\",\n        key: \"targetValue\",\n        value: function targetValue() {\n          return this.animAttributes[this.attributeKey];\n        }\n      }, {\n        kind: \"method\",\n        key: \"getElementAttribute\",\n        value: function getElementAttribute(attr) {\n          return this.element.getAttribute(attr);\n        }\n      }, {\n        kind: \"method\",\n        decorators: [getIncidentsByChannel],\n        key: \"getIncidentsByChannel\",\n        value: function getIncidentsByChannel() {}\n      }, {\n        kind: \"method\",\n        key: \"hasUserDefinedInitialValue\",\n        value: function hasUserDefinedInitialValue() {\n          if (Object.prototype.hasOwnProperty.call(this.userDefinedInitialValues, this.attributeKey)) {\n            return true;\n          }\n\n          return false;\n        }\n      }, {\n        kind: \"method\",\n        key: \"setInitialValue\",\n        value: function setInitialValue(value) {\n          var storePure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n          if (storePure === true) {\n            this.pureInitialValues = JSON.parse(JSON.stringify(value)); // keep a copy of the\n            // passed initial values\n          }\n\n          if (!this.hasUserDefinedInitialValue()) {\n            this.initialValues[this.attributeKey] = value;\n            return;\n          }\n\n          if (_typeof(this.targetValue) === 'object') {\n            // if it is a combo attribute\n            for (var key in this.userDefinedInitialValues[this.attributeKey]) {\n              value[key] = this.userDefinedInitialValues[this.attributeKey][key];\n            }\n\n            this.initialValues[this.attributeKey] = value;\n          } else {\n            this.initialValues[this.attributeKey] = this.userDefinedInitialValues[this.attributeKey];\n          }\n        }\n      }, {\n        kind: \"get\",\n        key: \"initialValue\",\n        value: function initialValue() {\n          return this.initialValues[this.attributeKey];\n        }\n      }, {\n        kind: \"method\",\n        key: \"getInitialValue\",\n        value: function getInitialValue() {\n          return this.initialValues[this.attributeKey];\n        }\n      }, {\n        kind: \"method\",\n        key: \"_onGetContextOnce\",\n        value: function _onGetContextOnce() {\n          // if the MonoIncident belongs to a fragmented context there absolutely\n          // no reason to run the getContext method of it\n          try {\n            if (this.context.fragment === true) {\n              return;\n            }\n\n            if (!this.gotContext) {\n              this.onGetContext();\n              this.gotContext = true;\n            }\n          } catch (e) {\n            console.log(e); // eslint-disable-line no-console\n\n            console.log(this.mcid); // eslint-disable-line no-console\n            // console.log(this.context);\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"onGetContext\",\n        value: function onGetContext() {\n          helper.info('Overwritte the \"onGetContext\" method with the code you want to get executed', 'info');\n        }\n      }, {\n        kind: \"method\",\n        key: \"lastWish\",\n        value: function lastWish() {}\n      }, {\n        kind: \"method\",\n        key: \"onInitialise\",\n        value: function onInitialise() {\n          helper.info('Overwritte the \"onInialise\" method with the code you want to get executed', 'info');\n        }\n        /**\n         * Method called on progress of the timed incident.\n         * @param {float} fraction - a number from 0 to 1 representing the fraction of duration covered\n         * @param {int} milliseconds - the number of milliseconds passed from start of the incident\n         */\n        // eslint-disable-next-line no-unused-vars\n\n      }, {\n        kind: \"method\",\n        key: \"onProgress\",\n        value: function onProgress(fraction, milliseconds) {}\n      }, {\n        kind: \"method\",\n        decorators: [block],\n        key: \"setBlock\",\n        value: function setBlock() {}\n      }, {\n        kind: \"method\",\n        decorators: [unblock],\n        key: \"unblock\",\n        value: function unblock() {}\n      }]\n    };\n  });\n\n  var ClipCopy =\n  /*#__PURE__*/\n  function (_MonoIncident) {\n    _inherits(ClipCopy, _MonoIncident);\n\n    function ClipCopy(attrs, props, dna) {\n      var _this;\n\n      _classCallCheck(this, ClipCopy);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(ClipCopy).call(this, attrs, props, dna));\n      _this.runTimeInfo = {\n        currentMillisecond: 0\n      };\n      return _this;\n    }\n\n    _createClass(ClipCopy, [{\n      key: \"lastWish\",\n      value: function lastWish() {\n        this.ownClip.ownContext.unmount();\n      }\n    }, {\n      key: \"onGetContext\",\n      value: function onGetContext() {\n        // In order to render itself on the given element first it needs the props (including html and css)\n        // from the real Clip it copies\n        var constructionArgs = this.DescriptiveIncident.realClip.exportConstructionArguments(); // it properly sets its own host on the props to use to initialise its own clip\n\n        var host = helper.getElementByMCID(this.context, this.mcid);\n\n        var hostedProps = _objectSpread2({}, constructionArgs.props, {\n          selector: undefined,\n          host: host\n        }); // we create a clip because Clips on creation render and thus have their own context\n        // this.dna.descriptiveIncident.constructor.Incident keeps a reference to the non-audio real Clip\n        // Class. No audio is involved on this process\n\n\n        this.ownClip = new this.DescriptiveIncident.constructor.Incident(constructionArgs.attrs, hostedProps);\n        this.ownClip.DescriptiveIncident = this.DescriptiveIncident;\n        this.ownClip.contextLoaded = this.contextLoaded.bind(this); // console.log(this.ownClip);\n        // flushes the realClip with its ownClip's context\n\n        this.DescriptiveIncident.realClip.addContext({\n          clipId: this.id,\n          context: this.ownClip.ownContext\n        }, true); // even though we have created an own clip, we have made no checks at all neither\n        // we added the incidents of the real clip to it. That is becuase playing and moving\n        // this clip copy means directly moving the real clip on the context of the own clip.\n        // So the only thing we need here is the context and nothing more.\n\n        this.contextReady = true;\n      }\n    }, {\n      key: \"contextLoaded\",\n      value: function contextLoaded() {\n        this.contextReady = true;\n        this.unblock();\n      }\n    }, {\n      key: \"onProgress\",\n      value: function onProgress(fraction, milliseconds) {\n        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (this.ownClip.ownContext.loading === true) {\n          this.setBlock();\n          return;\n        }\n\n        for (var key in this.DescriptiveIncident.realClip.instantiatedChannels) {\n          var channel = this.DescriptiveIncident.realClip.instantiatedChannels[key];\n          channel.moveTo(this.runTimeInfo.currentMillisecond, milliseconds, this.id, forceReset);\n        }\n\n        this.runTimeInfo.currentMillisecond = milliseconds;\n        this.ownClip.onAfterProgress(fraction, milliseconds);\n      }\n    }, {\n      key: \"duration\",\n      get: function get() {\n        return this.DescriptiveIncident.realClip.duration;\n      },\n      set: function set(milliseconds) {\n        this.DescriptiveIncident.realClip._resize(milliseconds / this.realClip.duration);\n      }\n    }]);\n\n    return ClipCopy;\n  }(MonoIncident);\n\n  /**\n   * @param {object} ingredients -\n   * {\n   *      id\n   *      attrs\n   *      props\n   *      Incident\n   *      plugin_npm_name\n   *      Channel\n   *      context (optional)\n   *      mcid (optional)\n   *      dnaExtras\n   * }\n   * */\n\n  function incidentFromIngredients(ingredients) {\n    if (!Object.prototype.hasOwnProperty.call(ingredients, 'dnaExtras')) {\n      ingredients.dnaExtras = {};\n    }\n\n    var incident = new ingredients.Incident(ingredients.attrs, _objectSpread2({}, ingredients.props, {\n      id: ingredients.id || getAnId()\n    }), _objectSpread2({}, ingredients.dnaExtras, {\n      context: ingredients.context,\n      mcid: ingredients.mcid\n    }));\n    incident.mc_plugin_npm_name = ingredients.plugin_npm_name;\n    incident.plugin_channel_class = ingredients.Channel;\n    incident.DescriptiveIncident = ingredients.DescriptiveIncident;\n    return incident;\n  }\n\n  var easing = {\n    linear: function linear(fraction) {\n      return fraction;\n    },\n    easeInQuad: function easeInQuad(fraction) {\n      return fraction * fraction;\n    },\n    easeOutQuad: function easeOutQuad(fraction) {\n      return fraction * (2 - fraction);\n    },\n    easeInOutQuad: function easeInOutQuad(fraction) {\n      return fraction < 0.5 ? 2 * fraction * fraction : -1 + (4 - 2 * fraction) * fraction;\n    },\n    easeInCubic: function easeInCubic(fraction) {\n      return fraction * fraction * fraction;\n    },\n    easeOutCubic: function easeOutCubic(fraction) {\n      return --fraction * fraction * fraction + 1;\n    },\n    easeInOutCubic: function easeInOutCubic(fraction) {\n      return fraction < 0.5 ? 4 * fraction * fraction * fraction : (fraction - 1) * (2 * fraction - 2) * (2 * fraction - 2) + 1;\n    },\n    easeInQuart: function easeInQuart(fraction) {\n      return fraction * fraction * fraction * fraction;\n    },\n    easeOutQuart: function easeOutQuart(fraction) {\n      return 1 - --fraction * fraction * fraction * fraction;\n    },\n    easeInOutQuart: function easeInOutQuart(fraction) {\n      return fraction < 0.5 ? 8 * fraction * fraction * fraction * fraction : 1 - 8 * --fraction * fraction * fraction * fraction;\n    },\n    easeInQuint: function easeInQuint(fraction) {\n      return fraction * fraction * fraction * fraction * fraction;\n    },\n    easeOutQuint: function easeOutQuint(fraction) {\n      return 1 + --fraction * fraction * fraction * fraction * fraction;\n    },\n    easeInOutQuint: function easeInOutQuint(fraction) {\n      return fraction < 0.5 ? 16 * fraction * fraction * fraction * fraction * fraction : 1 + 16 * --fraction * fraction * fraction * fraction * fraction;\n    },\n    easeInSine: function easeInSine(fraction) {\n      return -1 * Math.cos(fraction / 1 * (Math.PI / 2)) + 1;\n    },\n    easeOutSine: function easeOutSine(fraction) {\n      return 1 * Math.sin(fraction / 1 * (Math.PI / 2));\n    },\n    easeInOutSine: function easeInOutSine(fraction) {\n      return -1 / 2 * (Math.cos(Math.PI * fraction / 1) - 1);\n    },\n    easeInExpo: function easeInExpo(fraction) {\n      return fraction == 0 ? 1 : 1 * Math.pow(2, 10 * (fraction / 1 - 1));\n    },\n    easeOutExpo: function easeOutExpo(fraction) {\n      return fraction == 1 ? 1 : 1 * (-Math.pow(2, -10 * fraction / 1) + 1);\n    },\n    easeInOutExpo: function easeInOutExpo(fraction) {\n      if (fraction == 0) return 0;\n      if (fraction == 1) return 1;\n      if ((fraction /= 1 / 2) < 1) return 1 / 2 * Math.pow(2, 10 * (fraction - 1));\n      return 1 / 2 * (-Math.pow(2, -10 * --fraction) + 2);\n    },\n    easeInCirc: function easeInCirc(fraction) {\n      if (fraction >= 1) return fraction;\n      return -1 * (Math.sqrt(1 - (fraction /= 1) * fraction) - 1);\n    },\n    easeOutCirc: function easeOutCirc(fraction) {\n      return 1 * Math.sqrt(1 - (fraction = fraction / 1 - 1) * fraction);\n    },\n    easeInOutCirc: function easeInOutCirc(fraction) {\n      if ((fraction /= 1 / 2) < 1) return -1 / 2 * (Math.sqrt(1 - fraction * fraction) - 1);\n      return 1 / 2 * (Math.sqrt(1 - (fraction -= 2) * fraction) + 1);\n    },\n    easeInElastic: function easeInElastic(fraction) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n      if (fraction == 0) return 0;\n      if ((fraction /= 1) == 1) return 1;\n      if (!p) p = 1 * 0.3;\n\n      if (a < Math.abs(1)) {\n        a = 1;\n        s = p / 4;\n      } else s = p / (2 * Math.PI) * Math.asin(1 / a);\n\n      return -(a * Math.pow(2, 10 * (fraction -= 1)) * Math.sin((fraction * 1 - s) * (2 * Math.PI) / p));\n    },\n    easeOutElastic: function easeOutElastic(fraction) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n      if (fraction == 0) return 0;\n      if ((fraction /= 1) == 1) return 1;\n      if (!p) p = 1 * 0.3;\n\n      if (a < Math.abs(1)) {\n        a = 1;\n        s = p / 4;\n      } else s = p / (2 * Math.PI) * Math.asin(1 / a);\n\n      return a * Math.pow(2, -10 * fraction) * Math.sin((fraction * 1 - s) * (2 * Math.PI) / p) + 1;\n    },\n    easeInOutElastic: function easeInOutElastic(fraction) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n      if (fraction == 0) return 0;\n      if ((fraction /= 1 / 2) == 2) return 1;\n      if (!p) p = 1 * (0.3 * 1.5);\n\n      if (a < Math.abs(1)) {\n        a = 1;\n        s = p / 4;\n      } else s = p / (2 * Math.PI) * Math.asin(1 / a);\n\n      if (fraction < 1) return -0.5 * (a * Math.pow(2, 10 * (fraction -= 1)) * Math.sin((fraction * 1 - s) * (2 * Math.PI) / p));\n      return a * Math.pow(2, -10 * (fraction -= 1)) * Math.sin((fraction * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;\n    },\n    easeInBack: function easeInBack(fraction) {\n      var s = 1.70158;\n      return 1 * (fraction /= 1) * fraction * ((s + 1) * fraction - s);\n    },\n    easeOutBack: function easeOutBack(fraction) {\n      var s = 1.70158;\n      return 1 * ((fraction = fraction / 1 - 1) * fraction * ((s + 1) * fraction + s) + 1);\n    },\n    easeInOutBack: function easeInOutBack(fraction) {\n      var s = 1.70158;\n      if ((fraction /= 1 / 2) < 1) return 1 / 2 * (fraction * fraction * (((s *= 1.525) + 1) * fraction - s));\n      return 1 / 2 * ((fraction -= 2) * fraction * (((s *= 1.525) + 1) * fraction + s) + 2);\n    },\n    easeInBounce: function easeInBounce(fraction) {\n      return 1 - easing.easeOutBounce(1 - fraction);\n    },\n    easeOutBounce: function easeOutBounce(fraction) {\n      if ((fraction /= 1) < 1 / 2.75) {\n        return 1 * (7.5625 * fraction * fraction);\n      }\n\n      if (fraction < 2 / 2.75) {\n        return 1 * (7.5625 * (fraction -= 1.5 / 2.75) * fraction + 0.75);\n      }\n\n      if (fraction < 2.5 / 2.75) {\n        return 1 * (7.5625 * (fraction -= 2.25 / 2.75) * fraction + 0.9375);\n      }\n\n      return 1 * (7.5625 * (fraction -= 2.625 / 2.75) * fraction + 0.984375);\n    },\n    easeInOutBounce: function easeInOutBounce(fraction) {\n      if (fraction < 1 / 2) return easing.easeInBounce(fraction * 2) * 0.5;\n      return easing.easeOutBounce(fraction * 2 - 1) * 0.5 + 1 * 0.5;\n    }\n  };\n\n  var ContextAwareClipIncident = _decorate(null, function (_initialize, _Leaf) {\n    var ContextAwareClipIncident =\n    /*#__PURE__*/\n    function (_Leaf2) {\n      _inherits(ContextAwareClipIncident, _Leaf2);\n\n      function ContextAwareClipIncident(constructionIngredients, contextData, mcid, descriptiveIncident) {\n        var _this;\n\n        _classCallCheck(this, ContextAwareClipIncident);\n\n        // console.log(constructionIngredients.props);\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(ContextAwareClipIncident).call(this, {\n          id: \"\".concat(constructionIngredients.incidentId, \"_\").concat(mcid)\n        })); // a property to hold all of the contexts\n\n        _initialize(_assertThisInitialized(_this));\n\n        _this.contexts = {};\n        _this.constructionIngredients = constructionIngredients;\n        _this.mcid = mcid;\n        _this._duration = descriptiveIncident.realClip.duration;\n        _this.DescriptiveIncident = descriptiveIncident;\n        _this.mc_plugin_npm_name = constructionIngredients.plugin_npm_name;\n        _this.plugin_channel_class = constructionIngredients.Channel;\n\n        _this.addContext(contextData);\n\n        descriptiveIncident.realClip.subscribeToDurationChange(function (newDuration) {\n          _this._duration = newDuration;\n\n          _this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n            selfExecute: true,\n            direction: _DIRECTIONS._UP\n          });\n        });\n        _this.easing = easing.linear;\n\n        if (Object.prototype.hasOwnProperty.call(_this.props, 'easing')) {\n          if (Array.isArray(_this.props.easing)) {\n            _this.easing = src(_this.props.easing[0], _this.props.easing[1], _this.props.easing[2], _this.props.easing[3]);\n          } else {\n            _this.easing = easing[_this.props.easing];\n          }\n        }\n\n        return _this;\n      }\n\n      return ContextAwareClipIncident;\n    }(_Leaf);\n\n    return {\n      F: ContextAwareClipIncident,\n      d: [{\n        kind: \"get\",\n        key: \"originalContext\",\n        value: function originalContext() {\n          return this.contexts[this.originalContextKey];\n        }\n      }, {\n        kind: \"get\",\n        key: \"duration\",\n        value: function duration() {\n          return this._duration;\n        }\n      }, {\n        kind: \"method\",\n        key: \"onProgress\",\n        value: function onProgress(fraction, milliseconds, contextId) {\n          var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n          var eased_MI_fraction = this.easing(fraction) || 0;\n          var eased_MI_millisecond = eased_MI_fraction * this.duration; // console.log(fraction, eased_MI_fraction, milliseconds, eased_MI_millisecond);\n\n          this.contexts[contextId].onProgress(eased_MI_fraction, eased_MI_millisecond, forceReset);\n        }\n      }, {\n        kind: \"method\",\n        key: \"addContext\",\n        value: function addContext(contextData) {\n          var forceGetContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n          // if it's the first context to be added then it's the original\n          if (Object.keys(this.contexts).length === 0) {\n            this.originalContextKey = contextData.clipId;\n          } // instantiates the Clip so it renders\n\n\n          var ingredientsToPass = _objectSpread2({}, this.constructionIngredients, {\n            context: contextData.context,\n            mcid: this.mcid,\n            Incident: ClipCopy,\n            DescriptiveIncident: this.DescriptiveIncident\n          }); // and puts it on the corresponding context key\n\n\n          this.contexts[contextData.clipId] = incidentFromIngredients(ingredientsToPass);\n\n          if (forceGetContext === true) {\n            this.contexts[contextData.clipId]._onGetContextOnce();\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"handleAddContext\",\n        value: function handleAddContext(target, payload) {\n          this.addContext(payload, true);\n          return true;\n        }\n      }, {\n        kind: \"method\",\n        decorators: [getIncidentsByChannel],\n        key: \"getIncidentsByChannel\",\n        value: function getIncidentsByChannel() {} // massive editing methods that apply the request massively to all of the\n        // Incidents of all of the contexts\n\n      }, {\n        kind: \"method\",\n        key: \"gotContext\",\n        value: function gotContext() {\n          for (var context in this.contexts) {\n            this.contexts[context].gotContext();\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"_onGetContextOnce\",\n        value: function _onGetContextOnce() {\n          for (var context in this.contexts) {\n            this.contexts[context]._onGetContextOnce();\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"lastWish\",\n        value: function lastWish() {\n          for (var context in this.contexts) {\n            this.contexts[context].lastWish();\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"onGetContext\",\n        value: function onGetContext() {\n          for (var context in this.contexts) {\n            this.contexts[context].onGetContext();\n          }\n        }\n      }]\n    };\n  }, Leaf);\n\n  var ContextAwareIncident = _decorate(null, function (_initialize, _Leaf) {\n    var ContextAwareIncident =\n    /*#__PURE__*/\n    function (_Leaf2) {\n      _inherits(ContextAwareIncident, _Leaf2);\n\n      function ContextAwareIncident(constructionIngredients, contextData, mcid, attribute) {\n        var _this;\n\n        _classCallCheck(this, ContextAwareIncident);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(ContextAwareIncident).call(this, _objectSpread2({}, constructionIngredients.props, {\n          id: attribute !== null ? \"\".concat(constructionIngredients.incidentId, \"_\").concat(mcid, \"_\").concat(attribute) : \"\".concat(constructionIngredients.incidentId, \"_\").concat(mcid)\n        }))); // a property to hold all of the contexts\n\n        _initialize(_assertThisInitialized(_this));\n\n        _this.contexts = {};\n        _this.constructionIngredients = constructionIngredients;\n        _this.mcid = mcid;\n        _this.attribute = attribute; // this._duration = constructionIngredients.props.duration;\n\n        _this.mc_plugin_npm_name = constructionIngredients.plugin_npm_name;\n        _this.plugin_channel_class = constructionIngredients.Channel;\n        _this.DescriptiveIncident = constructionIngredients.DescriptiveIncident;\n\n        _this.addContext(contextData);\n\n        if (attribute !== null) {\n          if (_typeof(_this.constructionIngredients.attrs.animatedAttrs[_this.attribute]) === 'object') {\n            _this.originalAnimatedAttributeValue = _objectSpread2({}, _this.constructionIngredients.attrs.animatedAttrs[_this.attribute]);\n          } else {\n            _this.originalAnimatedAttributeValue = _this.constructionIngredients.attrs.animatedAttrs[_this.attribute];\n          }\n        }\n\n        _this.easing = easing.linear;\n\n        if (Object.prototype.hasOwnProperty.call(_this.props, 'easing')) {\n          if (Array.isArray(_this.props.easing)) {\n            _this.easing = src(_this.props.easing[0], _this.props.easing[1], _this.props.easing[2], _this.props.easing[3]);\n          } else {\n            _this.easing = easing[_this.props.easing];\n          }\n        }\n\n        return _this;\n      }\n\n      return ContextAwareIncident;\n    }(_Leaf);\n\n    return {\n      F: ContextAwareIncident,\n      d: [{\n        kind: \"get\",\n        key: \"originalContext\",\n        value: function originalContext() {\n          return this.contexts[this.originalContextKey];\n        }\n      }, {\n        kind: \"get\",\n        key: \"duration\",\n        value: function duration() {\n          return _get(_getPrototypeOf(ContextAwareIncident.prototype), \"duration\", this);\n        }\n      }, {\n        kind: \"set\",\n        key: \"duration\",\n        value: function duration(milliseconds) {\n          _set(_getPrototypeOf(ContextAwareIncident.prototype), \"duration\", milliseconds, this, true);\n\n          for (var context in this.contexts) {\n            this.contexts[context].duration = milliseconds;\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"addContext\",\n        value: function addContext(contextData) {\n          var forceGetContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          // if it's the first context to be added then it's the original\n          var isTheOriginalContext = false;\n\n          if (Object.keys(this.contexts).length === 0) {\n            this.originalContextKey = contextData.clipId;\n            this.originalClipContext = contextData.context;\n            isTheOriginalContext = true;\n          }\n\n          var ingredientsToPass = _objectSpread2({}, this.constructionIngredients, {\n            context: contextData.context,\n            mcid: this.mcid\n          });\n\n          var whatToAdd = incidentFromIngredients(ingredientsToPass);\n          this.contexts[contextData.clipId] = whatToAdd; // when we add a new context we must set the inital value of the newly added Incidents\n          // but only for Incidents with animatedAttrs\n\n          if (!isTheOriginalContext && this.attribute !== null) {\n            this.contexts[contextData.clipId].setInitialValue(this.getInitialValue());\n          }\n\n          if (forceGetContext === true) {\n            this.contexts[contextData.clipId]._onGetContextOnce();\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"handleAddContext\",\n        value: function handleAddContext(target, payload) {\n          this.addContext(payload, true);\n          return true;\n        }\n      }, {\n        kind: \"method\",\n        decorators: [getIncidentsByChannel],\n        key: \"getIncidentsByChannel\",\n        value: function getIncidentsByChannel() {}\n      }, {\n        kind: \"method\",\n        key: \"onProgress\",\n        value: function onProgress(fraction, milliseconds, contextId) {\n          /* MonoIncidents are totally agnostic about delay, hiatus and repeats.\n              CAI is not that's exactly the point where these properties management occurs.\n              Having alredy set the duration of the ContextAwareIncident according to\n              all of these props, here the CAI decides on the progress that its MonoIncidents\n              are to on at the given millisecond and according to the given props.\n              */\n          // step 1: find the full delay-duration-hiatus duration of one repeat\n          var repeatDuration = this.delay + this.props.duration + this.hiatus; // step 2.a: find the running repeat and millisecond of this repeat\n\n          var millisecondWithinRepeat = milliseconds % repeatDuration; // step 2.b: decide between 0 and 1\n\n          if (milliseconds !== 0 && millisecondWithinRepeat === 0) {\n            millisecondWithinRepeat = this.delay + this.props.duration;\n          } // step 3: find the millisecond of the MonoIncident\n\n\n          var MI_millisecond = millisecondWithinRepeat - this.delay;\n\n          if (MI_millisecond < 0) {\n            MI_millisecond = 0;\n          } else if (MI_millisecond > this.props.duration) {\n            // if it has stepped into hiatus\n            MI_millisecond = this.props.duration;\n          }\n\n          var MI_fraction = MI_millisecond / this.props.duration;\n          var eased_MI_fraction = this.easing(MI_fraction);\n          var eased_MI_millisecond = eased_MI_fraction * this.props.duration;\n\n          if (contextId === undefined) {\n            for (var context in this.contexts) {\n              this.contexts[context].onProgress(eased_MI_fraction, eased_MI_millisecond);\n            }\n\n            return;\n          }\n\n          this.contexts[contextId].onProgress(eased_MI_fraction, eased_MI_millisecond);\n        }\n        /** METHODS THAT ACT AS \"PROXY\" TO ALL OF THE INCIDENTS BELONGING TO\n         * THE INCIDENTS COLLECTION OF THE CONTEXT AWARE INCIDENT\n         * */\n\n      }, {\n        kind: \"get\",\n        key: \"animatedAttributeValue\",\n        value: function animatedAttributeValue() {\n          return this.constructionIngredients.attrs.animatedAttrs[this.attribute];\n        }\n      }, {\n        kind: \"set\",\n        key: \"animatedAttributeValue\",\n        value: function animatedAttributeValue(value) {\n          this.constructionIngredients.attrs.animatedAttrs[this.attribute] = value;\n        } // massive editing methods that apply the request massively to all of the\n        // Incidents of all of the contexts\n\n      }, {\n        kind: \"method\",\n        key: \"gotContext\",\n        value: function gotContext() {\n          for (var context in this.contexts) {\n            this.contexts[context].gotContext();\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"_onGetContextOnce\",\n        value: function _onGetContextOnce() {\n          for (var context in this.contexts) {\n            this.contexts[context]._onGetContextOnce();\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"lastWish\",\n        value: function lastWish() {\n          for (var context in this.contexts) {\n            this.contexts[context].lastWish();\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"onGetContext\",\n        value: function onGetContext() {\n          for (var context in this.contexts) {\n            this.contexts[context].onGetContext();\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"getInitialValue\",\n        value: function getInitialValue() {\n          var attribute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n          if (attribute === null) {\n            attribute = this.attribute;\n          }\n\n          return this.originalContext.getInitialValue();\n        }\n      }, {\n        kind: \"get\",\n        key: \"initialValue\",\n        value: function initialValue() {\n          return this.getInitialValue();\n        }\n      }, {\n        kind: \"get\",\n        key: \"scratchValue\",\n        value: function scratchValue() {\n          return this.originalContext.scratchValue;\n        }\n      }, {\n        kind: \"get\",\n        key: \"pureInitialValues\",\n        value: function pureInitialValues() {\n          return this.originalContext.pureInitialValues;\n        }\n      }, {\n        kind: \"method\",\n        key: \"setInitialValue\",\n        value: function setInitialValue() {\n          var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          var store = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n          if (value === null) {\n            value = this.getScratchValue();\n          }\n\n          for (var context in this.contexts) {\n            this.contexts[context].setInitialValue(JSON.parse(JSON.stringify(value)), store);\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"getScratchValue\",\n        value: function getScratchValue() {\n          var contextId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n          if (contextId === null) {\n            var contextsKeys = Object.keys(this.contexts);\n\n            if (Object.prototype.hasOwnProperty.call(this.originalClipContext, 'nonFragmentedContext')) {\n              var ingredientsToPass = _objectSpread2({}, this.constructionIngredients, {\n                context: this.originalClipContext.nonFragmentedContext,\n                mcid: this.mcid\n              });\n\n              var tempIncident = incidentFromIngredients(ingredientsToPass);\n              return tempIncident.getScratchValue();\n            }\n\n            if (contextsKeys.length === 1) {\n              return this.originalContext.getScratchValue();\n            } // prefer another (not the original) context to provide scratch values\n\n\n            return this.contexts[contextsKeys[1]].getScratchValue();\n          }\n\n          return this.contexts[contextId].getScratchValue();\n        }\n      }, {\n        kind: \"method\",\n        key: \"setCompoAttrKeyValue\",\n        value: function setCompoAttrKeyValue(key, value) {\n          for (var context in this.contexts) {\n            this.contexts[context].attrs.animatedAttrs[this.attribute][key] = value;\n            this.contexts[context].lastWish();\n            this.contexts[context].onGetContext();\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"play\",\n        value: function play(fraction, ms, contextId) {\n          return this.contexts[contextId].play(ms);\n        }\n      }, {\n        kind: \"method\",\n        key: \"stop\",\n        value: function stop(contextId) {\n          this.contexts[contextId].stop();\n        }\n      }]\n    };\n  }, Leaf);\n\n  var AnimatedAttributesSplitter =\n  /*#__PURE__*/\n  function (_Group) {\n    _inherits(AnimatedAttributesSplitter, _Group);\n\n    function AnimatedAttributesSplitter(descriptiveIncident, contextData, mcid, selector) {\n      var _this;\n\n      _classCallCheck(this, AnimatedAttributesSplitter);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedAttributesSplitter).call(this, {}, {\n        id: \"\".concat(descriptiveIncident.id, \"_\").concat(mcid)\n      }));\n      _this.mcid = mcid;\n      _this.selector = selector;\n\n      _this.setUp(descriptiveIncident, contextData);\n\n      return _this;\n    }\n\n    _createClass(AnimatedAttributesSplitter, [{\n      key: \"setUp\",\n      value: function setUp(descriptiveIncident, contextData) {\n        for (var attr in descriptiveIncident.attrs.animatedAttrs) {\n          var singleAnimatedAttrs = {};\n          singleAnimatedAttrs[attr] = descriptiveIncident.attrs.animatedAttrs[attr];\n\n          var attrsToPass = _objectSpread2({}, descriptiveIncident.attrs, {\n            animatedAttrs: singleAnimatedAttrs\n          });\n\n          var propsToPass = _objectSpread2({}, descriptiveIncident.props, {\n            selector: this.selector\n          });\n\n          var constructionIngredients = {\n            incidentId: descriptiveIncident.id,\n            attrs: attrsToPass,\n            props: propsToPass,\n            Incident: descriptiveIncident.constructor.Incident,\n            plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,\n            Channel: descriptiveIncident.constructor.Channel,\n            DescriptiveIncident: descriptiveIncident\n          };\n          var contextAwareIncident = new ContextAwareIncident(constructionIngredients, contextData, this.mcid, attr);\n          this.addChild(contextAwareIncident, 0);\n        }\n      }\n    }]);\n\n    return AnimatedAttributesSplitter;\n  }(Group);\n\n  var ElementSplitter =\n  /*#__PURE__*/\n  function (_Group) {\n    _inherits(ElementSplitter, _Group);\n\n    function ElementSplitter(descriptiveIncident, contextData) {\n      var _this;\n\n      _classCallCheck(this, ElementSplitter);\n\n      // we make sure the DOMAwareIncident takes the same id as the Descriptive Incident\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(ElementSplitter).call(this, {}, {\n        id: descriptiveIncident.id\n      })); // a property to hold all of the contexts\n\n      _this.contexts = {};\n      _this.contexts[contextData.clipId] = contextData.context;\n      _this.originalContextKey = contextData.clipId;\n      _this.instantiatedCopiesContexts = contextData.instantiatedCopiesContexts;\n\n      _this.setUp(descriptiveIncident, contextData);\n\n      return _this;\n    }\n\n    _createClass(ElementSplitter, [{\n      key: \"setUp\",\n      value: function setUp(descriptiveIncident, contextData) {\n        // the elements of the original context\n        var elements = this.originalContext.getElements(descriptiveIncident.selector()); // the elements for each of the copied contexts\n        // const copiesElements = {};\n        // for (let contextKey in this.instantiatedCopiesContexts) {\n        //     copiesElements[contextKey] = Array.from(this.instantiatedCopiesContexts[contextKey].rootElement.querySelectorAll(descriptiveIncident.props.selector));\n        // }\n\n        var totalElements = elements.length;\n        var element, mcid;\n\n        for (var i = 0; i < totalElements; i++) {\n          element = elements[i]; // set the mcid of the element on index i of the original context\n\n          mcid = this._getElementMCID(element); // set the same mcid for the elements of the same context in all of the instantiatedCopiesContexts\n\n          for (var contextKey in this.instantiatedCopiesContexts) {\n            // TODO perfrormance improvement via selecting once elements per context\n            this._setElementMCID(this.instantiatedCopiesContexts[contextKey], this.instantiatedCopiesContexts[contextKey].getElements(descriptiveIncident.selector())[i], mcid);\n          }\n\n          this._createElementIncident(element, descriptiveIncident, contextData, i, totalElements, mcid);\n        }\n      }\n    }, {\n      key: \"_getElementMCID\",\n      value: function _getElementMCID(element) {\n        var mcid = this.originalContext.getMCID(element);\n\n        if (!mcid) {\n          mcid = getAnId(true);\n          this.originalContext.setMCID(element, mcid);\n        }\n\n        return mcid;\n      }\n    }, {\n      key: \"_setElementMCID\",\n      value: function _setElementMCID(context, element, mcid) {\n        var existingMCID = context.getMCID(element);\n\n        if (!existingMCID) {\n          context.setMCID(element, mcid);\n        }\n      }\n    }, {\n      key: \"_createElementIncident\",\n      value: function _createElementIncident(element, descriptiveIncident, contextData, elementIndex, totalElements, mcid) {\n        /* elements splitter might handle either attribute Incidents (that have animatedAttrs) or Incidents\n            that do not have animatedAttrs such as MediaPlayback Incidents.\n            In the case of an attributed Incident we proceed by creating one AttributeSplitter for each\n            while on the case of an non-attribured Incident we go ahead and\n            */\n        if (Object.prototype.hasOwnProperty.call(descriptiveIncident.attrs, 'animatedAttrs')) {\n          var animatedAttributeSplitter = new AnimatedAttributesSplitter(descriptiveIncident, contextData, mcid, contextData.context.getElementSelectorByMCID(mcid));\n          this.addChild(animatedAttributeSplitter, 0);\n        } else if (Object.prototype.hasOwnProperty.call(descriptiveIncident.attrs, 'keyframes')) ; else {\n          var attrsToPass = descriptiveIncident.attrs;\n\n          var propsToPass = _objectSpread2({}, descriptiveIncident.props, {\n            selector: this.selector\n          });\n\n          var constructionIngredients = {\n            incidentId: descriptiveIncident.id,\n            attrs: attrsToPass,\n            props: propsToPass,\n            Incident: descriptiveIncident.constructor.Incident,\n            plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,\n            Channel: descriptiveIncident.constructor.Channel,\n            DescriptiveIncident: descriptiveIncident\n          };\n          var contextAwareIncident = new ContextAwareIncident(constructionIngredients, contextData, mcid, null);\n          this.addChild(contextAwareIncident, 0);\n        }\n      }\n    }, {\n      key: \"originalContext\",\n      get: function get() {\n        return this.contexts[this.originalContextKey];\n      }\n    }]);\n\n    return ElementSplitter;\n  }(Group);\n\n  /**\n   * This Class acts as the DOM Aware Incident for Clips. When constructed the Incident passed to\n   * it is a Clip with FragmentHTML context handler.\n   * On addition, edit or deletion of Incidents on the Fragmented Clip's tree, of the\n   * Descriptive Clip this ElementClipSplitter implements, all updates on lanes\n   * and everything that these clips need in order to run are made directly to the\n   * ContextAwareIncidents of the DescriptiveClip's real Clip.\n   */\n\n  var ElementClipSplitter =\n  /*#__PURE__*/\n  function (_DWI) {\n    _inherits(ElementClipSplitter, _DWI);\n\n    function ElementClipSplitter(descriptiveIncident, contextData) {\n      var _this;\n\n      _classCallCheck(this, ElementClipSplitter);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(ElementClipSplitter).call(this, descriptiveIncident, contextData));\n      _this.realClip = descriptiveIncident.realClip;\n      return _this;\n    }\n\n    _createClass(ElementClipSplitter, [{\n      key: \"_createElementIncident\",\n      value: function _createElementIncident(element, descriptiveIncident, contextData, elementIndex, totalElements, mcid) {\n        var constructionArguments = descriptiveIncident.realClip.exportConstructionArguments();\n        var constructionIngredients = {\n          incidentId: descriptiveIncident.id,\n          attrs: constructionArguments.attrs,\n          props: _objectSpread2({}, constructionArguments.props, {\n            selector: contextData.context.getElementSelectorByMCID(mcid),\n            runTimeInfo: descriptiveIncident.runTimeInfo\n          }),\n          Incident: descriptiveIncident.constructor.Incident,\n          plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,\n          Channel: ClipChannel,\n          DescriptiveIncident: descriptiveIncident\n        };\n        var contextAwareClipIncident = new ContextAwareClipIncident(constructionIngredients, contextData, mcid, descriptiveIncident);\n        this.addChild(contextAwareClipIncident, 0);\n      }\n    }, {\n      key: \"duration\",\n      get: function get() {\n        return _get(_getPrototypeOf(ElementClipSplitter.prototype), \"duration\", this);\n      }\n      /*\n        ElementClipSplitter split the DescriptiveClip to element ContextAwareIncidents\n        All of the element ContextAwareClipIncidents instantiated share the same\n        DescriptiveClip and thus the same realClip. So ElementClipSplitter are\n        the Node from where a realClip starts to get copies.\n        Resizing though means resizing the realClip. In order to avoid redunduncy we\n        manage the resize here and we don't pass further down to the ContextAwareClipIncidents\n        the resizing command.\n        */\n      ,\n      set: function set(milliseconds) {\n        this.realClip._resize(milliseconds / this.realClip.duration);\n\n        this._duration = milliseconds;\n      }\n    }]);\n\n    return ElementClipSplitter;\n  }(ElementSplitter);\n\n  /**\n   * Creates a real Incident (with all of its real tree) out of the Descriptive Incident.\n   * @param {object} descriptiveIncident - the Descriptive Incident that defines the Incident\n   * @param {contextData} - the context data (object containing id and actual context) to be used for real\n   *      Incidents init\n   * @param {boolean} audio - defaults to false. It defines whether the method is been used\n   *      by a real Clip or the Audio clip\n   * @returns {object} - the real Incident\n   * */\n\n  function incidentFromDescription(descriptiveIncident, contextData) {\n    var audio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    /*\n      RULES:\n      - Clips can only have selectors (and not hosts) as they participate on a Desc. Tree\n          and thus they are Clips As Incidents. The DescriptiveClips are treated a bit\n          different compared to the rest of the Incidents as they copy all of the\n          Description channels and lanes\n      - Descriptive Incidents can either have or not have selectors\n      - Descriptive Compos always have selectors\n       All Incidents of the tree, no matter their type have the static properties:\n      - Incident (which is the Incident class they need to initialise)\n      - plugin_npm_name (the plugin name they bolong to)\n      - Channel (the Channel class to handle the instance)\n      */\n\n    /* check for the descriptive incident and audio compatibility. If audio is true then we're\n          working on the audioClip and we need incidents that are at least \"on\" while if the audio==false\n          and we are working on the real tree then we reject the cases that the incident is audio \"only\"\n      */\n    if (audio === true && descriptiveIncident.audio === 'off' || audio === false && descriptiveIncident.audio === 'only') {\n      return null;\n    }\n\n    var incidentToReturn;\n\n    if (Object.prototype.hasOwnProperty.call(descriptiveIncident.props, 'selector')) {\n      if (audio === false && descriptiveIncident.props.selector.charAt(0) === '~' || audio === true && descriptiveIncident.props.selector.charAt(0) !== '~' && descriptiveIncident.constructor.isClip === false) {\n        return null;\n      }\n    }\n\n    if (descriptiveIncident.constructor.isClip === true) {\n      if (Object.prototype.hasOwnProperty.call(descriptiveIncident.props, 'selector') && audio === false) {\n        incidentToReturn = new ElementClipSplitter(descriptiveIncident, contextData);\n        incidentToReturn.plugin_channel_class = Channel;\n      } else {\n        if (audio === true) {\n          return descriptiveIncident.audioClip;\n        }\n\n        return descriptiveIncident.realClip;\n      }\n    } // else if (descriptiveIncident.constructor.Incident === Group) {\n    else if (descriptiveIncident.constructor.isGroup === true) {\n        incidentToReturn = incidentFromIngredients({\n          id: descriptiveIncident.id,\n          attrs: descriptiveIncident.attrs,\n          props: descriptiveIncident.props,\n          Incident: descriptiveIncident.constructor.Incident,\n          plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,\n          Channel: descriptiveIncident.constructor.Channel,\n          DescriptiveIncident: descriptiveIncident\n        });\n\n        for (var incId in descriptiveIncident.children) {\n          var childIncident = incidentFromDescription(descriptiveIncident.children[incId].leaf, contextData);\n\n          if (childIncident === null) {\n            continue;\n          }\n\n          incidentToReturn.addChild(childIncident, descriptiveIncident.children[incId].position);\n        }\n      } else {\n        // if it is an Incident that extends the Incident (not a Group) then\n        // we should anaylse it to its element/attribute Incidents starting from\n        // the elements, that's why we create an ElementSplitter. It is our\n        // starting point to which the Incident will be analysed to its\n        // element/attributes children.\n        incidentToReturn = new ElementSplitter(descriptiveIncident, contextData);\n      }\n\n    return incidentToReturn;\n  }\n\n  var selfContainedIncidentsNpmName = '@kissmybutton/self-contained-incidents';\n\n  var ExtendableClip =\n  /*#__PURE__*/\n  function (_Group) {\n    _inherits(ExtendableClip, _Group);\n\n    /**\n     * @param {object} props - an object that should contain all of the following keys:\n     * - html (the html template to render)\n     * - css (the css template of the isolated tree)\n     * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n     * - host (an Element object that will host the isolated tree)\n     * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n     * - type (optional, defaults to \"iframe\") the type of the Clip. It can be one of the:\n     *  - iframe\n     *  - plain\n     */\n    function ExtendableClip(attrs, props) {\n      var _this;\n\n      _classCallCheck(this, ExtendableClip);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(ExtendableClip).call(this, attrs, props));\n      _this.attrs = attrs;\n      _this.props = props;\n      _this.isTheClip = true;\n      _this.blockingWaitings = {};\n      /**\n       * The cnannels attribute holds a list of all intantiated Channels of the Incidents belonging to the clip\n       * this attribute is only valuable when the Group becomes the Clip\n       * The format of the attribute is:\n       *  key-value pairs in the manner:\n       * <mc_plugin_npm_name>: Channel object\n       */\n\n      _this.instantiatedChannels = {};\n      _this.isHostedClip = true;\n      /**\n       * The instantiatedCopiesContexts is a key-value pairs colleciton holding the\n       * contexts of all instantiated ClipCopies\n       * */\n\n      _this.instantiatedCopiesContexts = {};\n\n      _this.onClipInitialise();\n\n      _this.runTimeInfo = _this.props.runTimeInfo;\n      _this.durationSubs = []; // the audioClip property defines wether the Clip is Audio or not. Defaults to false\n      // and should be overiten to true on Audio Clip\n\n      _this.audioClip = false;\n      _this.contextReady = true;\n      return _this;\n    }\n\n    _createClass(ExtendableClip, [{\n      key: \"onClipInitialise\",\n      value: function onClipInitialise() {// called when group gets initialised\n      }\n    }, {\n      key: \"contextLoading\",\n      value: function contextLoading() {\n        this.contextReady = false;\n      }\n    }, {\n      key: \"contextLoaded\",\n      value: function contextLoaded() {\n        this.contextReady = true;\n        this.unblock();\n      }\n    }, {\n      key: \"getElements\",\n      value: function getElements(selector) {\n        if (this.props.host !== null && this.props.host !== undefined) {\n          return this.context.getElements(selector);\n        }\n\n        var elements = [];\n\n        for (var contextKey in this.instantiatedCopiesContexts) {\n          var contextElements = this.instantiatedCopiesContexts[contextKey].getElements(selector);\n\n          for (var i = 0; i < contextElements.length; i++) {\n            elements.push(contextElements[i]);\n          }\n        }\n\n        return elements;\n      }\n      /**\n       * This method is been called when a new ClipCopy enters the real tree successfully.\n       * @param {object} contextData - keys: clipId, context\n       * */\n\n    }, {\n      key: \"addContext\",\n      value: function addContext(contextData) {\n        this.instantiatedCopiesContexts[contextData.clipId] = contextData.context;\n        contextData.instantiatedCopiesContexts = this.instantiatedCopiesContexts;\n        var res = this.putMessageOnPipe('addContext', contextData, {}, {\n          selfExecute: false,\n          direction: _DIRECTIONS._DOWN\n        }); // if the added context is the first one to enter the realClip we must\n        // recalculate the scratch values of all of our first Incidents on our instantiatedChannels\n\n        if (Object.keys(this.instantiatedCopiesContexts).length === 1) {\n          // if it is the first one to be added\n          for (var key in this.instantiatedChannels) {\n            this.instantiatedChannels[key].recalcScratchValues(contextData.clipId);\n          } // also we store this non fragmented context on our context so it can be\n          // used on Incidents addition for calculating scratch values\n\n\n          this.context.nonFragmentedContext = contextData.context;\n        }\n\n        return res;\n      }\n      /*\n        ExtendableClip (as its name implies) is a Class that should be extended by\n        any specific kind of Clip, such as Fragmented or SCGroup. This method must\n        be overitten by the new Classes. This definition here is just for reference / help\n        purposes\n        */\n\n    }, {\n      key: \"exportConstructionArguments\",\n      value: function exportConstructionArguments() {\n        return {\n          attrs: this.attrs,\n          props: this.props\n        };\n      }\n      /**\n       * completely resizes the Clip without any checks\n       */\n\n    }, {\n      key: \"_resize\",\n      value: function _resize(durationFraction) {\n        for (var key in this.instantiatedChannels) {\n          this.instantiatedChannels[key]._resize(durationFraction);\n        }\n\n        this.setNewDuration(this.duration * durationFraction);\n\n        for (var i = 0; i < this.durationSubs.length; i++) {\n          this.durationSubs[i](this.duration);\n        }\n      }\n      /** *******************************************************\n        Editing commands input methods\n        ******************************************************** */\n\n      /**\n       * This command comes form the Clip's parent Descriptor class. The payload\n       * is identical to the payload that comes to the Description class:\n       * {\n       *  incident: the Descriptive Incident to be added\n       *  millisecond: the millisecond to add it\n       *  parentGroupId: the id of the Group to which we want to the Incident to\n       * }\n       */\n\n    }, {\n      key: \"addIncident\",\n      value: function addIncident(payload) {\n        var _this2 = this;\n\n        var candidates = this.putMessageOnPipe('addIncident', {\n          incident: payload.incident,\n          millisecond: payload.millisecond,\n          parentGroupId: payload.parentGroupId,\n          incidentFromDescription: incidentFromDescription,\n          contextData: {\n            clipId: this.id,\n            context: this.context,\n            instantiatedCopiesContexts: this.instantiatedCopiesContexts\n          },\n          audio: this.audioClip\n        }, payload.parentGroupId, {\n          selfExecute: true,\n          direction: _DIRECTIONS._DOWN\n        }); // concatenate candidates\n        // console.log(candidates);\n\n        var totalIncidentsByPlugin = {};\n\n        for (var i = 0; i < candidates.length; i++) {\n          var incidentsByPlugin = candidates[i].response.getIncidentsByChannel(candidates[i].positionDelta + payload.millisecond);\n\n          for (var pluginName in incidentsByPlugin) {\n            var _totalIncidentsByPlug;\n\n            if (!Object.prototype.hasOwnProperty.call(totalIncidentsByPlugin, pluginName)) {\n              totalIncidentsByPlugin[pluginName] = [];\n            }\n\n            (_totalIncidentsByPlug = totalIncidentsByPlugin[pluginName]).push.apply(_totalIncidentsByPlug, _toConsumableArray(incidentsByPlugin[pluginName]));\n          }\n        } // console.log(totalIncidentsByPlugin);\n\n\n        var res = this.checkAddition(totalIncidentsByPlugin);\n\n        if (res.result === true) {\n          var successCallback = function successCallback() {\n            res.execute(); // up to that point the only context Incident that has been initialised on the\n            // ContextAwareIncidents of the candidates is the original context of the\n            // ExtendableClip.\n\n            for (var _i = 0; _i < candidates.length; _i++) {\n              candidates[_i].responder.addChild(candidates[_i].response, payload.millisecond); // recalculate duration the groups that we added\n              // the incidents to along with their parents\n\n\n              candidates[_i].responder.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n                selfExecute: true,\n                direction: _DIRECTIONS._UP\n              }); // we also need to add every existing (copied) context to the ContextAwareIncidents\n              // created on the candidates process\n\n\n              for (var contextKey in _this2.instantiatedCopiesContexts) {\n                candidates[_i].responder.putMessageOnPipe('addContext', {\n                  clipId: contextKey,\n                  context: _this2.instantiatedCopiesContexts[contextKey]\n                }, 'ContextAwareIncidents', {\n                  selfExecute: false,\n                  direction: _DIRECTIONS._DOWN\n                });\n              }\n            }\n          };\n\n          return {\n            result: true,\n            execute: successCallback\n          };\n        }\n\n        return res;\n      } // *******************************************************\n      // INCIDENTS MANAGEMENT METHODS\n      // POLYMORPHISM APPLIED. IF THE GROUP HAS NO PARENT IT ACTS AS A SCENE. IF THE GROUP HAS PARENT IT ACTS AS\n      // A \"TRANSPARENT GROUP\"\n\n      /**\n         * The method returns either:\n            {\n                result:true,\n                execute: // an array of functions that when executed it will add the Incidents on the Channels\n            }\n            or\n            {\n                result: false,\n                errors\n            }\n        */\n\n    }, {\n      key: \"checkAddition\",\n      value: function checkAddition(incidentsById) {\n        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all-or-nothing';\n        // prepare the return payload\n        var toReturnResult = true;\n        var toReturnErrors = [];\n        var toReturnExecutables = []; // for each key of the incidentsById object perform the check\n\n        for (var key in incidentsById) {\n          // if the clip had no channel instantiated for the specific key (plugin id) yet create it\n          if (!Object.prototype.hasOwnProperty.call(this.instantiatedChannels, key)) {\n            // intstantiate the channel of the plugin by using the reference to the class definition stored on\n            // the very first incident of the array\n            // console.log(incidentsById[key][0].incident.plugin_channel_class);\n            this.instantiatedChannels[key] = new incidentsById[key][0].incident.plugin_channel_class({\n              runTimeInfo: this.runTimeInfo,\n              context: this.context,\n              subscribe: this.props.subscribe // all channels can subscribe to state or current millisecond changes\n\n            });\n          } // perform the check\n\n\n          var pluginResult = this.instantiatedChannels[key].addIncidents(incidentsById[key], type);\n          toReturnResult = toReturnResult && pluginResult.result;\n\n          if (pluginResult.result === false) {\n            toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n          } else {\n            toReturnExecutables.push(pluginResult.execute);\n          }\n        } // enf of iteration on the incidentsById keys\n\n\n        var toReturnExecute = function toReturnExecuteFunct() {\n          for (var i = 0; i < toReturnExecutables.length; i++) {\n            toReturnExecutables[i]();\n          }\n        };\n\n        var additionResult = {\n          result: toReturnResult,\n          errors: toReturnErrors,\n          execute: toReturnExecute\n        };\n        return additionResult;\n      }\n      /**\n       * This command comes form the Clip's parent Descriptor class. The payload\n       * is identical to the payload that comes to the Description class:\n       * {\n       *  incident: the Descriptive Incident to be repositioned\n       *  millisecond: the new millisecond to put it\n       *  parentGroupId: the id of the\n       * }\n       */\n\n    }, {\n      key: \"moveIncident\",\n      value: function moveIncident(payload) {\n        var candidates = this.putMessageOnPipe('moveIncident', {\n          incidentId: payload.id,\n          millisecond: payload.millisecond,\n          parentGroupId: payload.parentGroupId,\n          contextData: {\n            clipId: this.id,\n            context: this.context\n          },\n          audio: this.audioClip\n        }, payload.parentGroupId, {\n          selfExecute: true,\n          direction: _DIRECTIONS._DOWN\n        });\n        var totalIncidentsByPlugin = {};\n\n        for (var i = 0; i < candidates.length; i++) {\n          var incidentsByPlugin = candidates[i].response.getIncidentsByChannel(candidates[i].positionDelta + payload.millisecond);\n\n          for (var pluginName in incidentsByPlugin) {\n            var _totalIncidentsByPlug2;\n\n            if (!Object.prototype.hasOwnProperty.call(totalIncidentsByPlugin, pluginName)) {\n              totalIncidentsByPlugin[pluginName] = [];\n            }\n\n            (_totalIncidentsByPlug2 = totalIncidentsByPlugin[pluginName]).push.apply(_totalIncidentsByPlug2, _toConsumableArray(incidentsByPlugin[pluginName]));\n          }\n        }\n\n        var res = this.checkMove(totalIncidentsByPlugin, payload.positionDelta);\n\n        if (res.result === true) {\n          var successCallback = function successCallback() {\n            res.execute();\n\n            for (var _i2 = 0; _i2 < candidates.length; _i2++) {\n              candidates[_i2].responder.editPosition(candidates[_i2].response.id, payload.millisecond); // recalculate duration the groups that we added\n              // the incidents to along with their parents\n\n\n              candidates[_i2].responder.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n                selfExecute: true,\n                direction: _DIRECTIONS._UP\n              });\n            }\n          };\n\n          return {\n            result: true,\n            execute: successCallback\n          };\n        }\n\n        return res;\n      }\n      /**\n         * The checkEdit method serves exactly what its name implies. To check if the edit of an Incident (edit of Incident's position given in milliseconds delta)\n         * is valid and accepted, according to the rules defined on the channels.\n         * The method boobles up until it reaches the Clip.\n         * @param {object} incident - the incident to edit\n         * @param {int} millisecondsDelta - the milliseconds delta of the Incident's start time\n         The method should return either:\n            {\n                result:true,\n                execute: // an array of functions that when executed it will edit the Incidents on the Channels\n            }\n            or\n            {\n                result: false,\n                errors\n            }\n        */\n\n    }, {\n      key: \"checkMove\",\n      value: function checkMove(incidentsById, millisecondsDelta) {\n        // prepare the return payload\n        var toReturnResult = true;\n        var toReturnErrors = [];\n        var toReturnExecutables = []; // for each key of the incidentsById object perform the check\n\n        for (var key in incidentsById) {\n          // perform the check\n          var pluginResult = this.instantiatedChannels[key].editIncidents(incidentsById[key], millisecondsDelta);\n          toReturnResult = toReturnResult && pluginResult.result;\n\n          if (pluginResult.result === false) {\n            toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n          } else {\n            toReturnExecutables.push(pluginResult.execute);\n          }\n        } // enf of iteration on the incidentsById keys\n\n\n        var toReturnExecute = function toReturnExecuteFunct() {\n          for (var i = 0; i < toReturnExecutables.length; i++) {\n            toReturnExecutables[i]();\n          }\n        };\n\n        var editResult = {\n          result: toReturnResult,\n          errors: toReturnErrors,\n          execute: toReturnExecute\n        };\n        return editResult;\n      }\n    }, {\n      key: \"removeIncident\",\n      value: function removeIncident(payload) {\n        var candidates = this.putMessageOnPipe('removeIncident', {\n          incidentId: payload.id,\n          parentGroupId: payload.parentGroupId,\n          contextData: {\n            clipId: this.id,\n            context: this.context\n          },\n          audio: this.audioClip\n        }, payload.parentGroupId, {\n          selfExecute: true,\n          direction: _DIRECTIONS._DOWN\n        });\n        var totalIncidentsByPlugin = {};\n\n        for (var i = 0; i < candidates.length; i++) {\n          var incidentsByPlugin = candidates[i].response.getIncidentsByChannel();\n\n          for (var pluginName in incidentsByPlugin) {\n            var _totalIncidentsByPlug3;\n\n            if (!Object.prototype.hasOwnProperty.call(totalIncidentsByPlugin, pluginName)) {\n              totalIncidentsByPlugin[pluginName] = [];\n            }\n\n            (_totalIncidentsByPlug3 = totalIncidentsByPlugin[pluginName]).push.apply(_totalIncidentsByPlug3, _toConsumableArray(incidentsByPlugin[pluginName]));\n          }\n        }\n\n        var res = this.checkDelete(totalIncidentsByPlugin);\n\n        if (res.result === true) {\n          var successCallback = function successCallback() {\n            res.execute();\n\n            for (var _i3 = 0; _i3 < candidates.length; _i3++) {\n              candidates[_i3].responder.removeChild(candidates[_i3].response.id); // recalculate duration the groups that we added\n              // the incidents to along with their parents\n\n\n              candidates[_i3].responder.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n                selfExecute: true,\n                direction: _DIRECTIONS._UP\n              });\n            }\n          };\n\n          return {\n            result: true,\n            execute: successCallback\n          };\n        }\n\n        return res;\n      }\n      /**\n         * The checkDelete method serves exactly what its name implies. To check if the deletion of an Incident\n         * is valid and accepted, according to the rules defined on the channels.\n         * The method boobles up until it reaches the Clip.\n         * @param {object} incident - the incident to edit\n          The result might be either:\n            {\n                result:true,\n                execute: // an array of functions that when executed it will remove the Incident on the Channels\n            }\n            or\n            {\n                result: false,\n                errors\n            }\n        */\n\n    }, {\n      key: \"checkDelete\",\n      value: function checkDelete(incidentsById) {\n        // prepare the return payload\n        var toReturnResult = true;\n        var toReturnErrors = [];\n        var toReturnExecutables = []; // for each key of the incidentsById object perform the check\n\n        for (var key in incidentsById) {\n          // perform the check\n          var pluginResult = this.instantiatedChannels[key].removeIncidents(incidentsById[key]);\n          toReturnResult = toReturnResult && pluginResult.result;\n\n          if (pluginResult.result === false) {\n            toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n          } else {\n            toReturnExecutables.push(pluginResult.execute);\n          }\n        } // enf of iteration on the incidentsById keys\n\n\n        var toReturnExecute = function toReturnExecuteFunct() {\n          for (var i = 0; i < toReturnExecutables.length; i++) {\n            toReturnExecutables[i]();\n          }\n        };\n\n        var removeResult = {\n          result: toReturnResult,\n          errors: toReturnErrors,\n          execute: toReturnExecute\n        };\n        return removeResult;\n      }\n      /**\n       * This command is invoked by the Clip's parent Descriptor class. The payload\n       * is identical to the payload that comes to the Description class:\n       * {\n       *  id: the id of the Incident to resize\n       *  newSize: the milliseconds of the new duration\n       *  fraction: the division of the new duration to the current\n       * }\n       */\n\n    }, {\n      key: \"resizeIncident\",\n      value: function resizeIncident(payload) {\n        var candidates = this.putMessageOnPipe('resize', {\n          incidentId: payload.id,\n          newSize: payload.newSize,\n          fraction: payload.fraction,\n          contextData: {\n            clipId: this.id,\n            context: this.context\n          },\n          audio: this.audioClip\n        }, payload.id, {\n          selfExecute: false,\n          direction: _DIRECTIONS._DOWN\n        });\n        var totalIncidentsByPlugin = {};\n\n        for (var i = 0; i < candidates.length; i++) {\n          var incidentsByPlugin = candidates[i].response.getIncidentsByChannel(candidates[i].positionDelta);\n\n          for (var pluginName in incidentsByPlugin) {\n            var _totalIncidentsByPlug4;\n\n            if (!Object.prototype.hasOwnProperty.call(totalIncidentsByPlugin, pluginName)) {\n              totalIncidentsByPlugin[pluginName] = [];\n            }\n\n            (_totalIncidentsByPlug4 = totalIncidentsByPlugin[pluginName]).push.apply(_totalIncidentsByPlug4, _toConsumableArray(incidentsByPlugin[pluginName]));\n          }\n        }\n\n        var positionDelta = 0;\n\n        if (candidates.length > 0) {\n          positionDelta = candidates[0].positionDelta;\n        }\n\n        var res = this.checkResize(payload.fraction, totalIncidentsByPlugin, positionDelta);\n\n        if (res.result === true) {\n          var successCallback = function successCallback() {\n            res.execute();\n\n            for (var _i4 = 0; _i4 < candidates.length; _i4++) {\n              candidates[_i4].responder.setNewDuration(payload.newSize);\n            }\n          };\n\n          return {\n            result: true,\n            execute: successCallback\n          };\n        }\n\n        return res;\n      }\n      /**\n       * checks if a duration edit is feasible and doesn't cause conflicts\n       * @param {int} duration - the new duration\n       * */\n\n    }, {\n      key: \"checkResize\",\n      value: function checkResize(durationFraction, incidentsById) {\n        var adjustMillisecond = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        // prepare the return payload\n        var toReturnResult = true;\n        var toReturnErrors = [];\n        var toReturnExecutables = []; // for each key of the incidentsById object perform the check\n\n        for (var key in incidentsById) {\n          // perform the check\n          var adjustedIncidents = helper.systoleDiastoleProjections(incidentsById[key], durationFraction, adjustMillisecond);\n          var pluginResult = this.instantiatedChannels[key].checkResizedIncidents(adjustedIncidents);\n          toReturnResult = toReturnResult && pluginResult.result;\n\n          if (pluginResult.result === false) {\n            toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n          } else {\n            toReturnExecutables.push(pluginResult.execute);\n          }\n        } // enf of iteration on the incidentsById keys\n\n\n        var toReturnExecute = function toReturnExecuteFunct() {\n          for (var i = 0; i < toReturnExecutables.length; i++) {\n            toReturnExecutables[i]();\n          }\n        };\n\n        var editResult = {\n          result: toReturnResult,\n          errors: toReturnErrors,\n          execute: toReturnExecute\n        };\n        return editResult;\n      }\n    }, {\n      key: \"getIncidentsByChannel\",\n\n      /**\n       * Returns an object with keys the keys of all the plugins Incidents of which appear in the\n       * tree of the Group. All Incidents are projected to the Group's timeline.\n       * The array includes the Group's projection too\n       */\n      value: function getIncidentsByChannel() {\n        var adjustMillisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var incidentsByPlugin = {};\n        incidentsByPlugin[selfContainedIncidentsNpmName] = [{\n          millisecond: adjustMillisecond,\n          incident: this,\n          id: this.id\n        }];\n        return incidentsByPlugin;\n      }\n    }, {\n      key: \"setVolume\",\n      value: function setVolume(newVal) {\n        this.volume = parseFloat(newVal); // this.putMessageOnPipe(pipeMessages._GAIN_CHANGE, { gain: newVal }, false, \"down\");\n      }\n      /**\n       * Eventhough Clips have their own context, still they might belong to another Clip's\n       * tree (CASI). In such a case this method gives the oportunity to set things up\n       * and do operations related with their parent's context (such as subscribing to audio effect nodes)\n       * */\n      // eslint-disable-next-line no-unused-vars\n\n    }, {\n      key: \"_onGetContextOnce\",\n      value: function _onGetContextOnce(parentClipContext) {} // special recalcDuration handling so any potential clip copies update their trees\n      // eslint-disable-next-line no-unused-vars\n\n    }, {\n      key: \"handleRecalcDuration\",\n      value: function handleRecalcDuration(target, payload) {\n        if (this._calculateDuration()) {\n          for (var i = 0; i < this.durationSubs.length; i++) {\n            this.durationSubs[i](this.duration);\n          }\n        }\n\n        return true;\n      }\n      /**\n       * Method called on progress of the timed incident.\n       * @param {float} fraction - a number from 0 to 1 representing the fraction of duration covered\n       * @param {int} milliseconds - the number of milliseconds passed from start of the incident\n       * @param {string} contextId - defaults to the id of the realClip itself. Don't forget that a realClip\n       *      might belong to a selector Clip (so it's a Fragmented Clip), with many \"real\" ClipCopies. All ClipCopies hold\n       *      a reference to this Clip via their \"realClip\" property. Whenever any\n       *      of these ClipCopies progresses (via the onProgress method) calls\n       *      the \"onProgress\" of the realClip, passing their id so the ContextAwareIncidents\n       *      that will also progress via the Channels know which specific Incident to progress.\n       *      That's the result of keeping just one real tree, belonging always to the realClip\n       *      (either Fragmented or Hosted) ending to ContextAwareIncident leafs that\n       *      are the ones to hold the ClipCopies instances.\n       * @param {boolean} forceReset - set to true in cases we want full flash of the state\n       */\n\n    }, {\n      key: \"onProgress\",\n      value: function onProgress(fraction, milliseconds, contextId) {\n        var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n        if (this.contextReady === false) {\n          this.setBlock();\n          return;\n        }\n\n        if (!contextId) {\n          contextId = this.id;\n        }\n\n        for (var key in this.instantiatedChannels) {\n          var channel = this.instantiatedChannels[key];\n          channel.moveTo(this.runTimeInfo.currentMillisecond, milliseconds, contextId, forceReset);\n        }\n\n        this.onAfterProgress(fraction, milliseconds);\n      } // eslint-disable-next-line no-unused-vars\n\n    }, {\n      key: \"onAfterProgress\",\n      value: function onAfterProgress(fraction, milliseconds) {}\n    }, {\n      key: \"flash\",\n      value: function flash() {\n        for (var key in this.instantiatedChannels) {\n          var channel = this.instantiatedChannels[key];\n          channel.moveTo(0, this.runTimeInfo.currentMillisecond, this.id, true);\n        }\n      } // duration changes pub/sub\n\n    }, {\n      key: \"subscribeToDurationChange\",\n      value: function subscribeToDurationChange(method) {\n        this.durationSubs.push(method);\n      }\n      /** ***************************************************** */\n\n      /** ****** BLOCKING WAITINGS SET / REMOVE ************** */\n      // eslint-disable-next-line no-unused-vars\n\n    }, {\n      key: \"handleSetBlockingWaiting\",\n      value: function handleSetBlockingWaiting(target, payload) {} // eslint-disable-next-line no-unused-vars\n\n    }, {\n      key: \"handleRemoveBlockingWaiting\",\n      value: function handleRemoveBlockingWaiting(target, payload) {}\n    }, {\n      key: \"context\",\n      get: function get() {\n        return this.ownContext;\n      }\n    }]);\n\n    return ExtendableClip;\n  }(Group);\n\n  var AudioNode =\n  /*#__PURE__*/\n  function () {\n    function AudioNode() {\n      _classCallCheck(this, AudioNode);\n\n      // audio context initialisation\n      this.output = audioContext.createGain();\n      this.gainNode = audioContext.createGain();\n\n      if (audioContext.createStereoPanner) {\n        this.pannerNode = audioContext.createStereoPanner(); // if it is supported by the browser\n      } // this.highpassNode = audioContext.createBiquadFilter();\n      // this.lowpassNode = audioContext.createBiquadFilter();\n      // this.lowpassNode.connect(this.highpassNode);\n      // this.highpassNode.connect(this.pannerNode);\n\n\n      if (audioContext.createStereoPanner) {\n        this.pannerNode.connect(this.gainNode);\n        this.gainNode.connect(this.output);\n        this.input = this.pannerNode;\n      } else {\n        this.gainNode.connect(this.output);\n        this.input = this.gainNode;\n      }\n    }\n\n    _createClass(AudioNode, [{\n      key: \"connect\",\n      value: function connect(master) {\n        this.output.connect(master);\n      }\n    }, {\n      key: \"disconnect\",\n      value: function disconnect() {\n        // eslint-disable-line no-unused-vars\n        this.output.disconnect();\n      }\n    }]);\n\n    return AudioNode;\n  }();\n\n  function _base64ToArrayBuffer(base64) {\n    var binary_string = window.atob(base64);\n    var len = binary_string.length;\n    var bytes = new Uint8Array(len);\n\n    for (var i = 0; i < len; i++) {\n      bytes[i] = binary_string.charCodeAt(i);\n    }\n\n    return bytes.buffer;\n  }\n\n  var datamcidRegex = /\\[data(-mcid=\"+\\w+\")+\\]/g;\n\n  var PubSub =\n  /*#__PURE__*/\n  function () {\n    function PubSub() {\n      _classCallCheck(this, PubSub);\n\n      this.subscribers = [];\n    }\n\n    _createClass(PubSub, [{\n      key: \"sub\",\n      value: function sub(id, method) {\n        this.subscribers.push(method);\n      }\n    }, {\n      key: \"pub\",\n      value: function pub(argument) {\n        for (var i = 0; i < this.subscribers.length; i++) {\n          this.subscribers[i](argument);\n        }\n      }\n    }]);\n\n    return PubSub;\n  }();\n  /**\n   * Specs:\n   * AudioContext Handler keeps all the audio sources.\n   * The audio sources are passed in the following format:\n   * - src (the source of the sound)\n   * - base64 (boolean, defaults to false. If the sound is base64 it's been treated\n   *      in a different way)\n   * - id (must be unique)\n   * - classes (an array of belonging classes)\n   *\n   * The SoundContextHanlder creates a media element of the following format:\n   * media: {\n   *  src\n   *  id\n   *  classes\n   *  base64\n   *  buffer\n   *  nodes: {\n   *      stereo\n   *      highpass\n   *      lowpass\n   *      gain\n   *      audioNode\n   *  }\n   * }\n   *\n   * Finally the SoundContextHandler has its own nodes (the master) which look like this:\n   * master: {\n   *      stereo\n   *      highpass\n   *      lowpass\n   *      gain\n   * }\n   * */\n\n\n  var AudioContextHandler =\n  /*#__PURE__*/\n  function () {\n    function AudioContextHandler() {\n      var _this = this;\n\n      var audioSources = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var masterNode = arguments.length > 1 ? arguments[1] : undefined;\n\n      _classCallCheck(this, AudioContextHandler);\n\n      // variables to be used for checking context rediness\n      this.totalSources = audioSources.length; // initialisation of the final audio resources colleciton\n\n      this.audioSources = {};\n      this.elementsByMCID = {}; // iterate on audioSource to create the audioSources collection\n\n      var _loop = function _loop(i) {\n        var audioSource = audioSources[i];\n        var audioResource = {\n          mcid: audioSource.mcid || getAnId(),\n          id: audioSource.id,\n          src: audioSource.src,\n          classes: audioSource.classes || [],\n          base64: audioSource.base64 || false,\n          pubSub: new PubSub(),\n          soundLoaded: false,\n          startValues: audioSource.startValues || {}\n        };\n        _this.audioSources[audioResource.id] = audioResource;\n        _this.elementsByMCID[audioResource.mcid] = audioResource;\n\n        if (audioSource.base64 === true) {\n          audioContext.decodeAudioData(_base64ToArrayBuffer(audioSource.src), function (buffer) {\n            _this._setBuffer(audioResource, buffer, masterNode);\n          });\n        } else {\n          var request = new XMLHttpRequest();\n          request.open('GET', audioResource.src, true);\n          request.responseType = 'arraybuffer'; // Decode asynchronously\n\n          _this.soundLoaded = false;\n\n          request.onload = function () {\n            audioContext.decodeAudioData(request.response, function (buffer) {\n              _this._setBuffer(audioResource, buffer, masterNode);\n            }, _this.onError);\n          };\n\n          request.send();\n        }\n      };\n\n      for (var i = 0; i < audioSources.length; i++) {\n        _loop(i);\n      }\n\n      this.context = {\n        document: document,\n        window: window,\n        rootElement: document.body,\n        unmount: function unmount() {},\n        masterNode: masterNode,\n        audioContext: audioContext,\n        getElements: this.getElements.bind(this),\n        getMCID: this.getMCID.bind(this),\n        setMCID: this.setMCID.bind(this),\n        getElementSelectorByMCID: this.getElementSelectorByMCID.bind(this),\n        getElementByMCID: this.getElementByMCID.bind(this)\n      };\n    }\n\n    _createClass(AudioContextHandler, [{\n      key: \"_setBuffer\",\n      value: function _setBuffer(audioResource, buffer, masterNode) {\n        audioResource.soundLoaded = true;\n        audioResource.buffer = buffer;\n        audioResource.effectsAudioNode = new AudioNode();\n        audioResource.effectsAudioNode.connect(masterNode.input);\n        audioResource.pubSub.pub();\n      }\n    }, {\n      key: \"getElementByMCID\",\n      value: function getElementByMCID(mcid) {\n        if (Object.prototype.hasOwnProperty.call(this.elementsByMCID, mcid)) {\n          return this.elementsByMCID[mcid];\n        }\n\n        return null;\n      }\n    }, {\n      key: \"getElements\",\n      value: function getElements(selector) {\n        if (selector.charAt(0) === '~') {\n          selector = selector.substr(1);\n\n          if (selector.charAt(0) === '#') {\n            if (Object.prototype.hasOwnProperty.call(this.audioSources, selector.substr(1))) {\n              return [this.audioSources[selector.substr(1)]];\n            }\n\n            return [];\n          }\n\n          if (selector.charAt(0) === '.') {\n            var className = selector.substr(1);\n            var toReturn = [];\n\n            for (var source in this.audioSources) {\n              if (source.classes.indexOf(className) >= 0) {\n                toReturn.push(source);\n              }\n            }\n\n            return toReturn;\n          }\n        } else if (datamcidRegex.exec(selector)) {\n          var mcid = selector.split('\"')[1];\n          return this.elementsByMCID[mcid];\n        } else {\n          return [];\n        }\n      }\n    }, {\n      key: \"getMCID\",\n      value: function getMCID(element) {\n        return element.mcid;\n      }\n    }, {\n      key: \"setMCID\",\n      value: function setMCID(element, mcid) {\n        element.mcid = mcid;\n      }\n    }, {\n      key: \"getElementSelectorByMCID\",\n      value: function getElementSelectorByMCID(mcid) {\n        return \"[data-mcid=\\\"\".concat(mcid, \"\\\"]\");\n      }\n    }]);\n\n    return AudioContextHandler;\n  }();\n\n  var AudioClip =\n  /*#__PURE__*/\n  function (_ExtendableClip) {\n    _inherits(AudioClip, _ExtendableClip);\n\n    function AudioClip(attrs, props) {\n      var _this;\n\n      _classCallCheck(this, AudioClip);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(AudioClip).call(this, attrs, props));\n      _this.audioNode = new AudioNode();\n\n      _this.audioNode.connect(audioContext.destination);\n\n      var contextHanlder = new AudioContextHandler(_this.props.audioSources, _this.audioNode);\n      _this.ownContext = _objectSpread2({}, contextHanlder.context, {\n        isHostedClip: true\n      });\n      _this.audioClip = true;\n      return _this;\n    }\n\n    _createClass(AudioClip, [{\n      key: \"onProgress\",\n      value: function onProgress(fraction, ms, contextId) {\n        var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n        _get(_getPrototypeOf(AudioClip.prototype), \"onProgress\", this).call(this, fraction, ms, this.id, forceReset);\n      }\n    }, {\n      key: \"_onGetContextOnce\",\n      value: function _onGetContextOnce(parentClipContext) {\n        /*\n            context.master {gain, pan, highpass, lowpass}\n            */\n        // as highpass is the first node of master in row\n        this.audioNode.disconnect();\n        this.parentClipContext = parentClipContext;\n        this.audioNode.connect(parentClipContext.masterNode.input);\n      }\n    }, {\n      key: \"lastWish\",\n      value: function lastWish() {\n        this.audioNode.output.disconnect();\n        this.audioNode.output.connect(audioContext.destination);\n      }\n    }, {\n      key: \"setVolume\",\n      value: function setVolume(vol) {\n        this.audioNode.output.gain.value = vol;\n      }\n    }]);\n\n    return AudioClip;\n  }(ExtendableClip);\n\n  /**\n   * Effect class takes on constructor:\n   * attrs:\n   *  - animatedAttrs: valid animated attributes are \"gain\", \"pan\"\n   *  -\n   * */\n\n  var Effect =\n  /*#__PURE__*/\n  function (_MonoIncident) {\n    _inherits(Effect, _MonoIncident);\n\n    function Effect() {\n      _classCallCheck(this, Effect);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(Effect).apply(this, arguments));\n    }\n\n    _createClass(Effect, [{\n      key: \"onProgress\",\n      value: function onProgress(fraction) {\n        var _this = this;\n\n        // eslint-disable-line no-unused-vars\n        if (this.element.soundLoaded === false) {\n          this.setBlock('loading sound');\n          this.element.pubSub.sub(this.id, function () {\n            _this.unblock();\n          });\n          return false;\n        }\n\n        if (this.attributeKey === 'gain') {\n          var gain = (this.targetValue - this.getInitialValue()) * fraction + this.getInitialValue(); // console.log(this.props.nodes.stereoPan.pan.value);\n\n          this.element.effectsAudioNode.gainNode.gain.value = gain;\n        } else if (this.attributeKey === 'pan') {\n          var pan = (this.targetValue - this.getInitialValue()) * fraction + this.getInitialValue(); // console.log(this.props.nodes.stereoPan.pan.value);\n\n          this.element.effectsAudioNode.pannerNode.pan.value = pan;\n        }\n      }\n    }, {\n      key: \"getScratchValue\",\n      value: function getScratchValue() {\n        if (this.attributeKey === 'pan') {\n          if (Object.prototype.hasOwnProperty.call(this.element.startValues, 'pan')) {\n            return this.element.startValues.pan;\n          }\n\n          return 0;\n        }\n\n        if (this.attributeKey === 'gain') {\n          if (Object.prototype.hasOwnProperty.call(this.element.startValues, 'gain')) {\n            return this.element.startValues.gain;\n          }\n\n          return 1;\n        }\n      }\n    }]);\n\n    return Effect;\n  }(MonoIncident);\n\n  var dataSeparator = '|||';\n\n  var AudioPlaybackChannel =\n  /*#__PURE__*/\n  function (_ClipsChannel) {\n    _inherits(AudioPlaybackChannel, _ClipsChannel);\n\n    function AudioPlaybackChannel(props) {\n      var _this;\n\n      _classCallCheck(this, AudioPlaybackChannel);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(AudioPlaybackChannel).call(this, props)); // keeps the list of the ids of MediaIncidents that are currently been played\n      // in the form `${id}|||$[contextId}`\n\n      _this.playingIncidentsIds = []; // when the Channel's Clip enters the transitional state the Channel ignores\n      // moveTos. When the transition ends though, no matter the currentMillisecond\n      // its Clip was it should recalc which sources to play as if we were going from\n      // 0 to the the target millisecond because of the different way the Playback operates\n      // (it has no onProgress). For this, it's very important to store the information\n      // that it entered the transitional state so on the next playing state moveTo\n      // to force as from ms 0.\n\n      _this.transitioned = false;\n      props.subscribe(getAnId(), _this._stateChange.bind(_assertThisInitialized(_this)), 0, 1, true);\n      return _this;\n    }\n\n    _createClass(AudioPlaybackChannel, [{\n      key: \"_stateChange\",\n      value: function _stateChange(ms, state) {\n        if (state === 'paused' || state === 'idle' || state === 'blocked') {\n          this._stopPlayingIncidents();\n\n          this.transitioned = true;\n        }\n      }\n    }, {\n      key: \"_stopPlayingIncidents\",\n      value: function _stopPlayingIncidents() {\n        for (var i = 0; i < this.playingIncidentsIds.length; i++) {\n          var incidentInfo = this.playingIncidentsIds[i].split(dataSeparator);\n\n          this._incidentById(incidentInfo[0]).stop(incidentInfo[1]);\n        }\n\n        this.playingIncidentsIds = [];\n      }\n      /**\n         @param {int} from - the millisecond to start from\n         @param {int} to - the millisecond to go to\n         @param {string} contextId - the context id to move\n         @param {boolean} forceReset - set to true when we want full flash\n         */\n\n    }, {\n      key: \"moveTo\",\n      value: function moveTo(from, to, contextId) {\n        var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n        if (this.runTimeInfo.state === 'transitional' || forceReset === true) {\n          this.transitioned = true;\n\n          this._stopPlayingIncidents();\n\n          for (var i = 0; i < this.incidents.length; i++) {\n            var laneItem = this.incidents[i];\n\n            var incident = this._incidentById(laneItem.id);\n\n            if (to < laneItem.millisecond) {\n              incident.onProgress(0, 0, contextId, true);\n            } else if (to > laneItem.millisecond + incident.duration) {\n              incident.onProgress(1, incident.duration, contextId, true);\n            } else {\n              incident.onProgress((to - laneItem.millisecond) / incident.duration, to - laneItem.millisecond, contextId, true);\n            }\n          }\n\n          return;\n        }\n\n        if (this.transitioned === true) {\n          from = 0;\n          this.transitioned = false;\n        }\n\n        var that = this;\n\n        var startingAnims = lodash_filter(this.incidents, function (laneItem) {\n          return laneItem.millisecond >= from && laneItem.millisecond < to && laneItem.millisecond + that._incidentById(laneItem.id).duration > to;\n        });\n\n        var finishingAnims = lodash_filter(this.incidents, function (laneItem) {\n          return that._incidentById(laneItem.id).duration + laneItem.millisecond > from && that._incidentById(laneItem.id).duration + laneItem.millisecond <= to;\n        });\n\n        for (var _i = 0; _i < startingAnims.length; _i++) {\n          var _laneItem = startingAnims[_i];\n\n          var MediaIncident = this._incidentById(_laneItem.id); // onProgress(fraction, milliseconds, contextId, forceReset = false) {\n\n\n          var overcameEnd = (to - _laneItem.millisecond) / MediaIncident.duration >= 1;\n          var fraction = overcameEnd ? 1 : (to - _laneItem.millisecond) / MediaIncident.duration;\n          var millisecond = overcameEnd ? MediaIncident.duration : to - _laneItem.millisecond;\n          var startAttempt = MediaIncident.play(fraction, millisecond, contextId);\n\n          if (startAttempt === true) {\n            this.playingIncidentsIds.push(\"\".concat(_laneItem.id).concat(dataSeparator).concat(contextId));\n          }\n        }\n\n        for (var _i2 = 0; _i2 < finishingAnims.length; _i2++) {\n          var _laneItem2 = finishingAnims[_i2];\n\n          var _MediaIncident = this._incidentById(_laneItem2.id);\n\n          _MediaIncident.stop(contextId);\n\n          var index = this.playingIncidentsIds.indexOf(\"\".concat(_laneItem2.id).concat(dataSeparator).concat(contextId));\n\n          if (index > -1) {\n            this.playingIncidentsIds.splice(index, 1);\n          }\n        }\n\n        this.runTimeInfo.currentMillisecond = to;\n      }\n    }]);\n\n    return AudioPlaybackChannel;\n  }(ClipChannel);\n\n  /*\n  dna:\n  - originalId\n  - context\n  */\n\n  var MediaPlay = _decorate(null, function (_initialize) {\n    var MediaPlay = function MediaPlay() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var dna = arguments.length > 2 ? arguments[2] : undefined;\n\n      _classCallCheck(this, MediaPlay);\n\n      _initialize(this);\n\n      // super(props);\n      this.attrs = attrs;\n      this.props = props;\n      this.dna = dna;\n      this.context = dna.context;\n      this.mcid = dna.mcid;\n      this.id = props.id || getAnId();\n      this.modelId = props.modelId; // this parameter is initialised to false. Once the onGetContext method gets invoked this parameter\n      // is set to true so we prevent multiple executions of the onGetContext method\n\n      this.gotContext = false;\n      /*\n          these are the default values that define channeling for the default Incidents. These values get ovewriden through\n          the loadPlugin method of MC with the values found on the main.js file of the plugin\n          */\n\n      this.plugin_channel_class = AudioPlaybackChannel;\n      this.mc_plugin_npm_name = 'motor-cortex-js-media-playback';\n\n      if (Object.prototype.hasOwnProperty.call(props, 'plugin_channel_class')) {\n        this.plugin_channel_class = props.plugin_channel_class;\n      }\n\n      if (Object.prototype.hasOwnProperty.call(props, 'mc_plugin_npm_name')) {\n        this.mc_plugin_npm_name = props.mc_plugin_npm_name;\n      }\n\n      this.hasIncidents = false;\n      /**\n       * @member {boolean} - if autoGenerated is set to true, it means that this Incident has been auto-generated by its parent on initialisation.\n       * This happens when plugins export Incidents that on initialisation they automatically create other incidents and automatically put them\n       * on specific points on their timeline.\n       */\n\n      this.autoGenerated = false;\n      this.onInitialise(attrs, props);\n    };\n\n    return {\n      F: MediaPlay,\n      d: [{\n        kind: \"get\",\n        key: \"selector\",\n        value: function selector() {\n          return this.props.selector;\n        }\n      }, {\n        kind: \"get\",\n        key: \"element\",\n        value: function element() {\n          return this.context.getElementByMCID(this.mcid);\n        }\n      }, {\n        kind: \"method\",\n        decorators: [getIncidentsByChannel],\n        key: \"getIncidentsByChannel\",\n        value: function getIncidentsByChannel() {}\n      }, {\n        kind: \"method\",\n        key: \"_onGetContextOnce\",\n        value: function _onGetContextOnce() {\n          // if the Incident belongs to a fragmented context there absolutely\n          // no reason to run the getContext method of it\n          try {\n            if (this.context.fragment === true) {\n              return;\n            }\n\n            if (!this.gotContext) {\n              this.onGetContext();\n              this.gotContext = true;\n            }\n          } catch (e) {\n            console.log(e); // eslint-disable-line no-console\n\n            console.log(this.mcid); // eslint-disable-line no-console\n            // console.log(this.context);\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"onGetContext\",\n        value: function onGetContext() {\n          helper.info('Overwritte the \"onGetContext\" method with the code you want to get executed', 'info');\n        }\n      }, {\n        kind: \"method\",\n        key: \"lastWish\",\n        value: function lastWish() {}\n      }, {\n        kind: \"method\",\n        key: \"onInitialise\",\n        value: function onInitialise() {\n          helper.info('Overwritte the \"onInialise\" method with the code you want to get executed', 'info');\n        }\n        /**\n         * Method called on progress of the timed incident.\n         * @param {float} fraction - a number from 0 to 1 representing the fraction of duration covered\n         * @param {int} milliseconds - the number of milliseconds passed from start of the incident\n         */\n        // eslint-disable-next-line no-unused-vars\n\n      }, {\n        kind: \"method\",\n        key: \"onProgress\",\n        value: function onProgress(fraction, milliseconds) {}\n        /**\n         * starts the execution of the media from the specified millisecond\n         * */\n        // eslint-disable-next-line no-unused-vars\n\n      }, {\n        kind: \"method\",\n        key: \"play\",\n        value: function play(millisecond) {\n          return true;\n        }\n        /**\n         * stops the execution of the media\n         * */\n\n      }, {\n        kind: \"method\",\n        key: \"stop\",\n        value: function stop() {}\n      }, {\n        kind: \"method\",\n        decorators: [block],\n        key: \"setBlock\",\n        value: function setBlock() {}\n      }, {\n        kind: \"method\",\n        decorators: [unblock],\n        key: \"unblock\",\n        value: function unblock() {}\n      }]\n    };\n  });\n\n  /**\n   * expects on its props:\n   * - selector\n   * - duration\n   * - startFrom (optional)\n   * */\n\n  var AudioPlayback =\n  /*#__PURE__*/\n  function (_MediaPlayIncident) {\n    _inherits(AudioPlayback, _MediaPlayIncident);\n\n    function AudioPlayback() {\n      _classCallCheck(this, AudioPlayback);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(AudioPlayback).apply(this, arguments));\n    }\n\n    _createClass(AudioPlayback, [{\n      key: \"play\",\n      value: function play(millisecond) {\n        var _this = this;\n\n        if (this.element.soundLoaded === false) {\n          this.setBlock('loading sound');\n          this.element.pubSub.sub(this.id, function () {\n            _this.unblock();\n          });\n          return false;\n        }\n\n        var startFrom = 0;\n\n        if (Object.prototype.hasOwnProperty.call(this.props, 'startFrom')) {\n          startFrom = this.props.startFrom;\n        }\n\n        this.audioNode = audioContext.createBufferSource();\n        this.audioNode.buffer = this.element.buffer;\n        this.audioNode.connect(this.element.effectsAudioNode.input);\n        this.audioNode.start(0, (millisecond + startFrom) / 1000);\n        return true;\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        this.audioNode.stop();\n      }\n    }]);\n\n    return AudioPlayback;\n  }(MediaPlay);\n\n  var npm_name = '@kissmybutton/motorcortex-soundsystem';\n  var incidents = [{\n    exportable: AudioPlayback,\n    name: 'AudioPlayback'\n  }, {\n    exportable: Effect,\n    name: 'AudioEffect'\n  }];\n  var Clip = AudioClip;\n  var audio = 'only';\n  var audioPluginMain = {\n    npm_name: npm_name,\n    incidents: incidents,\n    Clip: Clip,\n    audio: audio\n  };\n\n  var lodash_findindex = createCommonjsModule(function (module, exports) {\n  /**\n   * Lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n   * Copyright JS Foundation and other contributors <https://js.foundation/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n  /** Error message constants. */\n\n  var FUNC_ERROR_TEXT = 'Expected a function';\n  /** Used to stand-in for `undefined` hash values. */\n\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n  /** Used as the maximum memoize cache size. */\n\n  var MAX_MEMOIZE_SIZE = 500;\n  /** Used to compose bitmasks for value comparisons. */\n\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n  /** Used as references for various `Number` constants. */\n\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n  /** `Object#toString` result references. */\n\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]';\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n  /** Used to match property names within property paths. */\n\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n  /** Used to match leading and trailing whitespace. */\n\n  var reTrim = /^\\s+|\\s+$/g;\n  /** Used to match backslashes in property paths. */\n\n  var reEscapeChar = /\\\\(\\\\)?/g;\n  /** Used to detect bad signed hexadecimal string values. */\n\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n  /** Used to detect binary string values. */\n\n  var reIsBinary = /^0b[01]+$/i;\n  /** Used to detect host constructors (Safari). */\n\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n  /** Used to detect octal string values. */\n\n  var reIsOctal = /^0o[0-7]+$/i;\n  /** Used to detect unsigned integer values. */\n\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n  /** Used to identify `toStringTag` values of typed arrays. */\n\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n  /** Built-in method references without a dependency on `root`. */\n\n  var freeParseInt = parseInt;\n  /** Detect free variable `global` from Node.js. */\n\n  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n  /** Detect free variable `self`. */\n\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n  /** Used as a reference to the global object. */\n\n  var root = freeGlobal || freeSelf || Function('return this')();\n  /** Detect free variable `exports`. */\n\n  var freeExports =  exports && !exports.nodeType && exports;\n  /** Detect free variable `module`. */\n\n  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n  /** Detect the popular CommonJS extension `module.exports`. */\n\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n  /** Detect free variable `process` from Node.js. */\n\n  var freeProcess = moduleExports && freeGlobal.process;\n  /** Used to access faster Node.js helpers. */\n\n  var nodeUtil = function () {\n    try {\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }();\n  /* Node.js helper references. */\n\n\n  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n\n\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n\n    return result;\n  }\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n\n\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n\n    return array;\n  }\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n\n\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n\n\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while (fromRight ? index-- : ++index < length) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n\n\n  function baseProperty(key) {\n    return function (object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n\n\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n\n    return result;\n  }\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n\n\n  function baseUnary(func) {\n    return function (value) {\n      return func(value);\n    };\n  }\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n\n\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n\n\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n    map.forEach(function (value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n\n\n  function overArg(func, transform) {\n    return function (arg) {\n      return func(transform(arg));\n    };\n  }\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n\n\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n    set.forEach(function (value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n  /** Used for built-in method references. */\n\n\n  var arrayProto = Array.prototype,\n      funcProto = Function.prototype,\n      objectProto = Object.prototype;\n  /** Used to detect overreaching core-js shims. */\n\n  var coreJsData = root['__core-js_shared__'];\n  /** Used to resolve the decompiled source of functions. */\n\n  var funcToString = funcProto.toString;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty = objectProto.hasOwnProperty;\n  /** Used to detect methods masquerading as native. */\n\n  var maskSrcKey = function () {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n    return uid ? 'Symbol(src)_1.' + uid : '';\n  }();\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n\n\n  var nativeObjectToString = objectProto.toString;\n  /** Used to detect if a method is native. */\n\n  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&').replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');\n  /** Built-in value references. */\n\n  var Buffer = moduleExports ? root.Buffer : undefined,\n      Symbol = root.Symbol,\n      Uint8Array = root.Uint8Array,\n      propertyIsEnumerable = objectProto.propertyIsEnumerable,\n      splice = arrayProto.splice,\n      symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n  var nativeGetSymbols = Object.getOwnPropertySymbols,\n      nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n      nativeKeys = overArg(Object.keys, Object),\n      nativeMax = Math.max;\n  /* Built-in method references that are verified to be native. */\n\n  var DataView = getNative(root, 'DataView'),\n      Map = getNative(root, 'Map'),\n      Promise = getNative(root, 'Promise'),\n      Set = getNative(root, 'Set'),\n      WeakMap = getNative(root, 'WeakMap'),\n      nativeCreate = getNative(Object, 'create');\n  /** Used to detect maps, sets, and weakmaps. */\n\n  var dataViewCtorString = toSource(DataView),\n      mapCtorString = toSource(Map),\n      promiseCtorString = toSource(Promise),\n      setCtorString = toSource(Set),\n      weakMapCtorString = toSource(WeakMap);\n  /** Used to convert symbols to primitives and strings. */\n\n  var symbolProto = Symbol ? Symbol.prototype : undefined,\n      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n      symbolToString = symbolProto ? symbolProto.toString : undefined;\n  /**\n   * Creates a hash object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function Hash(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the hash.\n   *\n   * @private\n   * @name clear\n   * @memberOf Hash\n   */\n\n\n  function hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n    this.size = 0;\n  }\n  /**\n   * Removes `key` and its value from the hash.\n   *\n   * @private\n   * @name delete\n   * @memberOf Hash\n   * @param {Object} hash The hash to modify.\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key];\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n  /**\n   * Gets the hash value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Hash\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function hashGet(key) {\n    var data = this.__data__;\n\n    if (nativeCreate) {\n      var result = data[key];\n      return result === HASH_UNDEFINED ? undefined : result;\n    }\n\n    return hasOwnProperty.call(data, key) ? data[key] : undefined;\n  }\n  /**\n   * Checks if a hash value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Hash\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n  }\n  /**\n   * Sets the hash `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Hash\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the hash instance.\n   */\n\n\n  function hashSet(key, value) {\n    var data = this.__data__;\n    this.size += this.has(key) ? 0 : 1;\n    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;\n    return this;\n  } // Add methods to `Hash`.\n\n\n  Hash.prototype.clear = hashClear;\n  Hash.prototype['delete'] = hashDelete;\n  Hash.prototype.get = hashGet;\n  Hash.prototype.has = hashHas;\n  Hash.prototype.set = hashSet;\n  /**\n   * Creates an list cache object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function ListCache(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the list cache.\n   *\n   * @private\n   * @name clear\n   * @memberOf ListCache\n   */\n\n\n  function listCacheClear() {\n    this.__data__ = [];\n    this.size = 0;\n  }\n  /**\n   * Removes `key` and its value from the list cache.\n   *\n   * @private\n   * @name delete\n   * @memberOf ListCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function listCacheDelete(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      return false;\n    }\n\n    var lastIndex = data.length - 1;\n\n    if (index == lastIndex) {\n      data.pop();\n    } else {\n      splice.call(data, index, 1);\n    }\n\n    --this.size;\n    return true;\n  }\n  /**\n   * Gets the list cache value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf ListCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function listCacheGet(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n    return index < 0 ? undefined : data[index][1];\n  }\n  /**\n   * Checks if a list cache value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf ListCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n  }\n  /**\n   * Sets the list cache `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf ListCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the list cache instance.\n   */\n\n\n  function listCacheSet(key, value) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      ++this.size;\n      data.push([key, value]);\n    } else {\n      data[index][1] = value;\n    }\n\n    return this;\n  } // Add methods to `ListCache`.\n\n\n  ListCache.prototype.clear = listCacheClear;\n  ListCache.prototype['delete'] = listCacheDelete;\n  ListCache.prototype.get = listCacheGet;\n  ListCache.prototype.has = listCacheHas;\n  ListCache.prototype.set = listCacheSet;\n  /**\n   * Creates a map cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function MapCache(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n    this.clear();\n\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  /**\n   * Removes all key-value entries from the map.\n   *\n   * @private\n   * @name clear\n   * @memberOf MapCache\n   */\n\n\n  function mapCacheClear() {\n    this.size = 0;\n    this.__data__ = {\n      'hash': new Hash(),\n      'map': new (Map || ListCache)(),\n      'string': new Hash()\n    };\n  }\n  /**\n   * Removes `key` and its value from the map.\n   *\n   * @private\n   * @name delete\n   * @memberOf MapCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function mapCacheDelete(key) {\n    var result = getMapData(this, key)['delete'](key);\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n  /**\n   * Gets the map value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf MapCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n  }\n  /**\n   * Checks if a map value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf MapCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n  }\n  /**\n   * Sets the map `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf MapCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the map cache instance.\n   */\n\n\n  function mapCacheSet(key, value) {\n    var data = getMapData(this, key),\n        size = data.size;\n    data.set(key, value);\n    this.size += data.size == size ? 0 : 1;\n    return this;\n  } // Add methods to `MapCache`.\n\n\n  MapCache.prototype.clear = mapCacheClear;\n  MapCache.prototype['delete'] = mapCacheDelete;\n  MapCache.prototype.get = mapCacheGet;\n  MapCache.prototype.has = mapCacheHas;\n  MapCache.prototype.set = mapCacheSet;\n  /**\n   *\n   * Creates an array cache object to store unique values.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [values] The values to cache.\n   */\n\n  function SetCache(values) {\n    var index = -1,\n        length = values == null ? 0 : values.length;\n    this.__data__ = new MapCache();\n\n    while (++index < length) {\n      this.add(values[index]);\n    }\n  }\n  /**\n   * Adds `value` to the array cache.\n   *\n   * @private\n   * @name add\n   * @memberOf SetCache\n   * @alias push\n   * @param {*} value The value to cache.\n   * @returns {Object} Returns the cache instance.\n   */\n\n\n  function setCacheAdd(value) {\n    this.__data__.set(value, HASH_UNDEFINED);\n\n    return this;\n  }\n  /**\n   * Checks if `value` is in the array cache.\n   *\n   * @private\n   * @name has\n   * @memberOf SetCache\n   * @param {*} value The value to search for.\n   * @returns {number} Returns `true` if `value` is found, else `false`.\n   */\n\n\n  function setCacheHas(value) {\n    return this.__data__.has(value);\n  } // Add methods to `SetCache`.\n\n\n  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n  SetCache.prototype.has = setCacheHas;\n  /**\n   * Creates a stack cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n\n  function Stack(entries) {\n    var data = this.__data__ = new ListCache(entries);\n    this.size = data.size;\n  }\n  /**\n   * Removes all key-value entries from the stack.\n   *\n   * @private\n   * @name clear\n   * @memberOf Stack\n   */\n\n\n  function stackClear() {\n    this.__data__ = new ListCache();\n    this.size = 0;\n  }\n  /**\n   * Removes `key` and its value from the stack.\n   *\n   * @private\n   * @name delete\n   * @memberOf Stack\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n\n\n  function stackDelete(key) {\n    var data = this.__data__,\n        result = data['delete'](key);\n    this.size = data.size;\n    return result;\n  }\n  /**\n   * Gets the stack value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Stack\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n\n\n  function stackGet(key) {\n    return this.__data__.get(key);\n  }\n  /**\n   * Checks if a stack value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Stack\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n\n\n  function stackHas(key) {\n    return this.__data__.has(key);\n  }\n  /**\n   * Sets the stack `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Stack\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the stack cache instance.\n   */\n\n\n  function stackSet(key, value) {\n    var data = this.__data__;\n\n    if (data instanceof ListCache) {\n      var pairs = data.__data__;\n\n      if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n        pairs.push([key, value]);\n        this.size = ++data.size;\n        return this;\n      }\n\n      data = this.__data__ = new MapCache(pairs);\n    }\n\n    data.set(key, value);\n    this.size = data.size;\n    return this;\n  } // Add methods to `Stack`.\n\n\n  Stack.prototype.clear = stackClear;\n  Stack.prototype['delete'] = stackDelete;\n  Stack.prototype.get = stackGet;\n  Stack.prototype.has = stackHas;\n  Stack.prototype.set = stackSet;\n  /**\n   * Creates an array of the enumerable property names of the array-like `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @param {boolean} inherited Specify returning inherited property names.\n   * @returns {Array} Returns the array of property names.\n   */\n\n  function arrayLikeKeys(value, inherited) {\n    var isArr = isArray(value),\n        isArg = !isArr && isArguments(value),\n        isBuff = !isArr && !isArg && isBuffer(value),\n        isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n        skipIndexes = isArr || isArg || isBuff || isType,\n        result = skipIndexes ? baseTimes(value.length, String) : [],\n        length = result.length;\n\n    for (var key in value) {\n      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.\n      key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.\n      isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.\n      isIndex(key, length)))) {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Gets the index at which the `key` is found in `array` of key-value pairs.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} key The key to search for.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n\n\n  function assocIndexOf(array, key) {\n    var length = array.length;\n\n    while (length--) {\n      if (eq(array[length][0], key)) {\n        return length;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * The base implementation of `_.get` without support for default values.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path of the property to get.\n   * @returns {*} Returns the resolved value.\n   */\n\n\n  function baseGet(object, path) {\n    path = castPath(path, object);\n    var index = 0,\n        length = path.length;\n\n    while (object != null && index < length) {\n      object = object[toKey(path[index++])];\n    }\n\n    return index && index == length ? object : undefined;\n  }\n  /**\n   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n   * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n   * symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @param {Function} symbolsFunc The function to get the symbols of `object`.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n\n\n  function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object);\n    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n  }\n  /**\n   * The base implementation of `getTag` without fallbacks for buggy environments.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n\n\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === undefined ? undefinedTag : nullTag;\n    }\n\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n  }\n  /**\n   * The base implementation of `_.hasIn` without support for deep paths.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {Array|string} key The key to check.\n   * @returns {boolean} Returns `true` if `key` exists, else `false`.\n   */\n\n\n  function baseHasIn(object, key) {\n    return object != null && key in Object(object);\n  }\n  /**\n   * The base implementation of `_.isArguments`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   */\n\n\n  function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag;\n  }\n  /**\n   * The base implementation of `_.isEqual` which supports partial comparisons\n   * and tracks traversed objects.\n   *\n   * @private\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @param {boolean} bitmask The bitmask flags.\n   *  1 - Unordered comparison\n   *  2 - Partial comparison\n   * @param {Function} [customizer] The function to customize comparisons.\n   * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   */\n\n\n  function baseIsEqual(value, other, bitmask, customizer, stack) {\n    if (value === other) {\n      return true;\n    }\n\n    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {\n      return value !== value && other !== other;\n    }\n\n    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n  }\n  /**\n   * A specialized version of `baseIsEqual` for arrays and objects which performs\n   * deep comparisons and tracks traversed objects enabling objects with circular\n   * references to be compared.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n\n\n  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n    var objIsArr = isArray(object),\n        othIsArr = isArray(other),\n        objTag = objIsArr ? arrayTag : getTag(object),\n        othTag = othIsArr ? arrayTag : getTag(other);\n    objTag = objTag == argsTag ? objectTag : objTag;\n    othTag = othTag == argsTag ? objectTag : othTag;\n    var objIsObj = objTag == objectTag,\n        othIsObj = othTag == objectTag,\n        isSameTag = objTag == othTag;\n\n    if (isSameTag && isBuffer(object)) {\n      if (!isBuffer(other)) {\n        return false;\n      }\n\n      objIsArr = true;\n      objIsObj = false;\n    }\n\n    if (isSameTag && !objIsObj) {\n      stack || (stack = new Stack());\n      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n    }\n\n    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n      if (objIsWrapped || othIsWrapped) {\n        var objUnwrapped = objIsWrapped ? object.value() : object,\n            othUnwrapped = othIsWrapped ? other.value() : other;\n        stack || (stack = new Stack());\n        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n      }\n    }\n\n    if (!isSameTag) {\n      return false;\n    }\n\n    stack || (stack = new Stack());\n    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n  }\n  /**\n   * The base implementation of `_.isMatch` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The object to inspect.\n   * @param {Object} source The object of property values to match.\n   * @param {Array} matchData The property names, values, and compare flags to match.\n   * @param {Function} [customizer] The function to customize comparisons.\n   * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n   */\n\n\n  function baseIsMatch(object, source, matchData, customizer) {\n    var index = matchData.length,\n        length = index,\n        noCustomizer = !customizer;\n\n    if (object == null) {\n      return !length;\n    }\n\n    object = Object(object);\n\n    while (index--) {\n      var data = matchData[index];\n\n      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {\n        return false;\n      }\n    }\n\n    while (++index < length) {\n      data = matchData[index];\n      var key = data[0],\n          objValue = object[key],\n          srcValue = data[1];\n\n      if (noCustomizer && data[2]) {\n        if (objValue === undefined && !(key in object)) {\n          return false;\n        }\n      } else {\n        var stack = new Stack();\n\n        if (customizer) {\n          var result = customizer(objValue, srcValue, key, object, source, stack);\n        }\n\n        if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * The base implementation of `_.isNative` without bad shim checks.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function,\n   *  else `false`.\n   */\n\n\n  function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n      return false;\n    }\n\n    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n  }\n  /**\n   * The base implementation of `_.isTypedArray` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   */\n\n\n  function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n  }\n  /**\n   * The base implementation of `_.iteratee`.\n   *\n   * @private\n   * @param {*} [value=_.identity] The value to convert to an iteratee.\n   * @returns {Function} Returns the iteratee.\n   */\n\n\n  function baseIteratee(value) {\n    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n    if (typeof value == 'function') {\n      return value;\n    }\n\n    if (value == null) {\n      return identity;\n    }\n\n    if (typeof value == 'object') {\n      return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);\n    }\n\n    return property(value);\n  }\n  /**\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n\n\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys(object);\n    }\n\n    var result = [];\n\n    for (var key in Object(object)) {\n      if (hasOwnProperty.call(object, key) && key != 'constructor') {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * The base implementation of `_.matches` which doesn't clone `source`.\n   *\n   * @private\n   * @param {Object} source The object of property values to match.\n   * @returns {Function} Returns the new spec function.\n   */\n\n\n  function baseMatches(source) {\n    var matchData = getMatchData(source);\n\n    if (matchData.length == 1 && matchData[0][2]) {\n      return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n    }\n\n    return function (object) {\n      return object === source || baseIsMatch(object, source, matchData);\n    };\n  }\n  /**\n   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n   *\n   * @private\n   * @param {string} path The path of the property to get.\n   * @param {*} srcValue The value to match.\n   * @returns {Function} Returns the new spec function.\n   */\n\n\n  function baseMatchesProperty(path, srcValue) {\n    if (isKey(path) && isStrictComparable(srcValue)) {\n      return matchesStrictComparable(toKey(path), srcValue);\n    }\n\n    return function (object) {\n      var objValue = get(object, path);\n      return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n    };\n  }\n  /**\n   * A specialized version of `baseProperty` which supports deep paths.\n   *\n   * @private\n   * @param {Array|string} path The path of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n\n\n  function basePropertyDeep(path) {\n    return function (object) {\n      return baseGet(object, path);\n    };\n  }\n  /**\n   * The base implementation of `_.toString` which doesn't convert nullish\n   * values to empty strings.\n   *\n   * @private\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   */\n\n\n  function baseToString(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == 'string') {\n      return value;\n    }\n\n    if (isArray(value)) {\n      // Recursively convert values (susceptible to call stack limits).\n      return arrayMap(value, baseToString) + '';\n    }\n\n    if (isSymbol(value)) {\n      return symbolToString ? symbolToString.call(value) : '';\n    }\n\n    var result = value + '';\n    return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n  }\n  /**\n   * Casts `value` to a path array if it's not one.\n   *\n   * @private\n   * @param {*} value The value to inspect.\n   * @param {Object} [object] The object to query keys on.\n   * @returns {Array} Returns the cast property path array.\n   */\n\n\n  function castPath(value, object) {\n    if (isArray(value)) {\n      return value;\n    }\n\n    return isKey(value, object) ? [value] : stringToPath(toString(value));\n  }\n  /**\n   * A specialized version of `baseIsEqualDeep` for arrays with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Array} array The array to compare.\n   * @param {Array} other The other array to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `array` and `other` objects.\n   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n   */\n\n\n  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n        arrLength = array.length,\n        othLength = other.length;\n\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n      return false;\n    } // Assume cyclic values are equal.\n\n\n    var stacked = stack.get(array);\n\n    if (stacked && stack.get(other)) {\n      return stacked == other;\n    }\n\n    var index = -1,\n        result = true,\n        seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;\n    stack.set(array, other);\n    stack.set(other, array); // Ignore non-index properties.\n\n    while (++index < arrLength) {\n      var arrValue = array[index],\n          othValue = other[index];\n\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n      }\n\n      if (compared !== undefined) {\n        if (compared) {\n          continue;\n        }\n\n        result = false;\n        break;\n      } // Recursively compare arrays (susceptible to call stack limits).\n\n\n      if (seen) {\n        if (!arraySome(other, function (othValue, othIndex) {\n          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n            return seen.push(othIndex);\n          }\n        })) {\n          result = false;\n          break;\n        }\n      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n        result = false;\n        break;\n      }\n    }\n\n    stack['delete'](array);\n    stack['delete'](other);\n    return result;\n  }\n  /**\n   * A specialized version of `baseIsEqualDeep` for comparing objects of\n   * the same `toStringTag`.\n   *\n   * **Note:** This function only supports comparing values with tags of\n   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {string} tag The `toStringTag` of the objects to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n\n\n  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n    switch (tag) {\n      case dataViewTag:\n        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n          return false;\n        }\n\n        object = object.buffer;\n        other = other.buffer;\n\n      case arrayBufferTag:\n        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n          return false;\n        }\n\n        return true;\n\n      case boolTag:\n      case dateTag:\n      case numberTag:\n        // Coerce booleans to `1` or `0` and dates to milliseconds.\n        // Invalid dates are coerced to `NaN`.\n        return eq(+object, +other);\n\n      case errorTag:\n        return object.name == other.name && object.message == other.message;\n\n      case regexpTag:\n      case stringTag:\n        // Coerce regexes to strings and treat strings, primitives and objects,\n        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n        // for more details.\n        return object == other + '';\n\n      case mapTag:\n        var convert = mapToArray;\n\n      case setTag:\n        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n        convert || (convert = setToArray);\n\n        if (object.size != other.size && !isPartial) {\n          return false;\n        } // Assume cyclic values are equal.\n\n\n        var stacked = stack.get(object);\n\n        if (stacked) {\n          return stacked == other;\n        }\n\n        bitmask |= COMPARE_UNORDERED_FLAG; // Recursively compare objects (susceptible to call stack limits).\n\n        stack.set(object, other);\n        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n        stack['delete'](object);\n        return result;\n\n      case symbolTag:\n        if (symbolValueOf) {\n          return symbolValueOf.call(object) == symbolValueOf.call(other);\n        }\n\n    }\n\n    return false;\n  }\n  /**\n   * A specialized version of `baseIsEqualDeep` for objects with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n\n\n  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n        objProps = getAllKeys(object),\n        objLength = objProps.length,\n        othProps = getAllKeys(other),\n        othLength = othProps.length;\n\n    if (objLength != othLength && !isPartial) {\n      return false;\n    }\n\n    var index = objLength;\n\n    while (index--) {\n      var key = objProps[index];\n\n      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n        return false;\n      }\n    } // Assume cyclic values are equal.\n\n\n    var stacked = stack.get(object);\n\n    if (stacked && stack.get(other)) {\n      return stacked == other;\n    }\n\n    var result = true;\n    stack.set(object, other);\n    stack.set(other, object);\n    var skipCtor = isPartial;\n\n    while (++index < objLength) {\n      key = objProps[index];\n      var objValue = object[key],\n          othValue = other[key];\n\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n      } // Recursively compare objects (susceptible to call stack limits).\n\n\n      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n        result = false;\n        break;\n      }\n\n      skipCtor || (skipCtor = key == 'constructor');\n    }\n\n    if (result && !skipCtor) {\n      var objCtor = object.constructor,\n          othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.\n\n      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n        result = false;\n      }\n    }\n\n    stack['delete'](object);\n    stack['delete'](other);\n    return result;\n  }\n  /**\n   * Creates an array of own enumerable property names and symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n\n\n  function getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols);\n  }\n  /**\n   * Gets the data for `map`.\n   *\n   * @private\n   * @param {Object} map The map to query.\n   * @param {string} key The reference key.\n   * @returns {*} Returns the map data.\n   */\n\n\n  function getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;\n  }\n  /**\n   * Gets the property names, values, and compare flags of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the match data of `object`.\n   */\n\n\n  function getMatchData(object) {\n    var result = keys(object),\n        length = result.length;\n\n    while (length--) {\n      var key = result[length],\n          value = object[key];\n      result[length] = [key, value, isStrictComparable(value)];\n    }\n\n    return result;\n  }\n  /**\n   * Gets the native function at `key` of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the method to get.\n   * @returns {*} Returns the function if it's native, else `undefined`.\n   */\n\n\n  function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n  }\n  /**\n   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the raw `toStringTag`.\n   */\n\n\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag),\n        tag = value[symToStringTag];\n\n    try {\n      value[symToStringTag] = undefined;\n      var unmasked = true;\n    } catch (e) {}\n\n    var result = nativeObjectToString.call(value);\n\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag] = tag;\n      } else {\n        delete value[symToStringTag];\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Creates an array of the own enumerable symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of symbols.\n   */\n\n\n  var getSymbols = !nativeGetSymbols ? stubArray : function (object) {\n    if (object == null) {\n      return [];\n    }\n\n    object = Object(object);\n    return arrayFilter(nativeGetSymbols(object), function (symbol) {\n      return propertyIsEnumerable.call(object, symbol);\n    });\n  };\n  /**\n   * Gets the `toStringTag` of `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n\n  var getTag = baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n\n  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {\n    getTag = function (value) {\n      var result = baseGetTag(value),\n          Ctor = result == objectTag ? value.constructor : undefined,\n          ctorString = Ctor ? toSource(Ctor) : '';\n\n      if (ctorString) {\n        switch (ctorString) {\n          case dataViewCtorString:\n            return dataViewTag;\n\n          case mapCtorString:\n            return mapTag;\n\n          case promiseCtorString:\n            return promiseTag;\n\n          case setCtorString:\n            return setTag;\n\n          case weakMapCtorString:\n            return weakMapTag;\n        }\n      }\n\n      return result;\n    };\n  }\n  /**\n   * Checks if `path` exists on `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path to check.\n   * @param {Function} hasFunc The function to check properties.\n   * @returns {boolean} Returns `true` if `path` exists, else `false`.\n   */\n\n\n  function hasPath(object, path, hasFunc) {\n    path = castPath(path, object);\n    var index = -1,\n        length = path.length,\n        result = false;\n\n    while (++index < length) {\n      var key = toKey(path[index]);\n\n      if (!(result = object != null && hasFunc(object, key))) {\n        break;\n      }\n\n      object = object[key];\n    }\n\n    if (result || ++index != length) {\n      return result;\n    }\n\n    length = object == null ? 0 : object.length;\n    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));\n  }\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n\n\n  function isIndex(value, length) {\n    var type = typeof value;\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n  }\n  /**\n   * Checks if `value` is a property name and not a property path.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {Object} [object] The object to query keys on.\n   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n   */\n\n\n  function isKey(value, object) {\n    if (isArray(value)) {\n      return false;\n    }\n\n    var type = typeof value;\n\n    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {\n      return true;\n    }\n\n    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);\n  }\n  /**\n   * Checks if `value` is suitable for use as unique object key.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n   */\n\n\n  function isKeyable(value) {\n    var type = typeof value;\n    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;\n  }\n  /**\n   * Checks if `func` has its source masked.\n   *\n   * @private\n   * @param {Function} func The function to check.\n   * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n   */\n\n\n  function isMasked(func) {\n    return !!maskSrcKey && maskSrcKey in func;\n  }\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n\n\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;\n    return value === proto;\n  }\n  /**\n   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` if suitable for strict\n   *  equality comparisons, else `false`.\n   */\n\n\n  function isStrictComparable(value) {\n    return value === value && !isObject(value);\n  }\n  /**\n   * A specialized version of `matchesProperty` for source values suitable\n   * for strict equality comparisons, i.e. `===`.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @param {*} srcValue The value to match.\n   * @returns {Function} Returns the new spec function.\n   */\n\n\n  function matchesStrictComparable(key, srcValue) {\n    return function (object) {\n      if (object == null) {\n        return false;\n      }\n\n      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));\n    };\n  }\n  /**\n   * A specialized version of `_.memoize` which clears the memoized function's\n   * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n   *\n   * @private\n   * @param {Function} func The function to have its output memoized.\n   * @returns {Function} Returns the new memoized function.\n   */\n\n\n  function memoizeCapped(func) {\n    var result = memoize(func, function (key) {\n      if (cache.size === MAX_MEMOIZE_SIZE) {\n        cache.clear();\n      }\n\n      return key;\n    });\n    var cache = result.cache;\n    return result;\n  }\n  /**\n   * Converts `value` to a string using `Object.prototype.toString`.\n   *\n   * @private\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   */\n\n\n  function objectToString(value) {\n    return nativeObjectToString.call(value);\n  }\n  /**\n   * Converts `string` to a property path array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the property path array.\n   */\n\n\n  var stringToPath = memoizeCapped(function (string) {\n    var result = [];\n\n    if (string.charCodeAt(0) === 46\n    /* . */\n    ) {\n        result.push('');\n      }\n\n    string.replace(rePropName, function (match, number, quote, subString) {\n      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);\n    });\n    return result;\n  });\n  /**\n   * Converts `value` to a string key if it's not a string or symbol.\n   *\n   * @private\n   * @param {*} value The value to inspect.\n   * @returns {string|symbol} Returns the key.\n   */\n\n  function toKey(value) {\n    if (typeof value == 'string' || isSymbol(value)) {\n      return value;\n    }\n\n    var result = value + '';\n    return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n  }\n  /**\n   * Converts `func` to its source code.\n   *\n   * @private\n   * @param {Function} func The function to convert.\n   * @returns {string} Returns the source code.\n   */\n\n\n  function toSource(func) {\n    if (func != null) {\n      try {\n        return funcToString.call(func);\n      } catch (e) {}\n\n      try {\n        return func + '';\n      } catch (e) {}\n    }\n\n    return '';\n  }\n  /**\n   * This method is like `_.find` except that it returns the index of the first\n   * element `predicate` returns truthy for instead of the element itself.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Array\n   * @param {Array} array The array to inspect.\n   * @param {Function} [predicate=_.identity] The function invoked per iteration.\n   * @param {number} [fromIndex=0] The index to search from.\n   * @returns {number} Returns the index of the found element, else `-1`.\n   * @example\n   *\n   * var users = [\n   *   { 'user': 'barney',  'active': false },\n   *   { 'user': 'fred',    'active': false },\n   *   { 'user': 'pebbles', 'active': true }\n   * ];\n   *\n   * _.findIndex(users, function(o) { return o.user == 'barney'; });\n   * // => 0\n   *\n   * // The `_.matches` iteratee shorthand.\n   * _.findIndex(users, { 'user': 'fred', 'active': false });\n   * // => 1\n   *\n   * // The `_.matchesProperty` iteratee shorthand.\n   * _.findIndex(users, ['active', false]);\n   * // => 0\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.findIndex(users, 'active');\n   * // => 2\n   */\n\n\n  function findIndex(array, predicate, fromIndex) {\n    var length = array == null ? 0 : array.length;\n\n    if (!length) {\n      return -1;\n    }\n\n    var index = fromIndex == null ? 0 : toInteger(fromIndex);\n\n    if (index < 0) {\n      index = nativeMax(length + index, 0);\n    }\n\n    return baseFindIndex(array, baseIteratee(predicate), index);\n  }\n  /**\n   * Creates a function that memoizes the result of `func`. If `resolver` is\n   * provided, it determines the cache key for storing the result based on the\n   * arguments provided to the memoized function. By default, the first argument\n   * provided to the memoized function is used as the map cache key. The `func`\n   * is invoked with the `this` binding of the memoized function.\n   *\n   * **Note:** The cache is exposed as the `cache` property on the memoized\n   * function. Its creation may be customized by replacing the `_.memoize.Cache`\n   * constructor with one whose instances implement the\n   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n   * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to have its output memoized.\n   * @param {Function} [resolver] The function to resolve the cache key.\n   * @returns {Function} Returns the new memoized function.\n   * @example\n   *\n   * var object = { 'a': 1, 'b': 2 };\n   * var other = { 'c': 3, 'd': 4 };\n   *\n   * var values = _.memoize(_.values);\n   * values(object);\n   * // => [1, 2]\n   *\n   * values(other);\n   * // => [3, 4]\n   *\n   * object.a = 2;\n   * values(object);\n   * // => [1, 2]\n   *\n   * // Modify the result cache.\n   * values.cache.set(object, ['a', 'b']);\n   * values(object);\n   * // => ['a', 'b']\n   *\n   * // Replace `_.memoize.Cache`.\n   * _.memoize.Cache = WeakMap;\n   */\n\n\n  function memoize(func, resolver) {\n    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n\n    var memoized = function () {\n      var args = arguments,\n          key = resolver ? resolver.apply(this, args) : args[0],\n          cache = memoized.cache;\n\n      if (cache.has(key)) {\n        return cache.get(key);\n      }\n\n      var result = func.apply(this, args);\n      memoized.cache = cache.set(key, result) || cache;\n      return result;\n    };\n\n    memoized.cache = new (memoize.Cache || MapCache)();\n    return memoized;\n  } // Expose `MapCache`.\n\n\n  memoize.Cache = MapCache;\n  /**\n   * Performs a\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * comparison between two values to determine if they are equivalent.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   * var other = { 'a': 1 };\n   *\n   * _.eq(object, object);\n   * // => true\n   *\n   * _.eq(object, other);\n   * // => false\n   *\n   * _.eq('a', 'a');\n   * // => true\n   *\n   * _.eq('a', Object('a'));\n   * // => false\n   *\n   * _.eq(NaN, NaN);\n   * // => true\n   */\n\n  function eq(value, other) {\n    return value === other || value !== value && other !== other;\n  }\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n\n\n  var isArguments = baseIsArguments(function () {\n    return arguments;\n  }()) ? baseIsArguments : function (value) {\n    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');\n  };\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n\n  var isArray = Array.isArray;\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  }\n  /**\n   * Checks if `value` is a buffer.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n   * @example\n   *\n   * _.isBuffer(new Buffer(2));\n   * // => true\n   *\n   * _.isBuffer(new Uint8Array(2));\n   * // => false\n   */\n\n\n  var isBuffer = nativeIsBuffer || stubFalse;\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n\n  function isFunction(value) {\n    if (!isObject(value)) {\n      return false;\n    } // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n\n\n    var tag = baseGetTag(value);\n    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n  }\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n\n\n  function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n\n\n  function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == 'object' || type == 'function');\n  }\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n\n\n  function isObjectLike(value) {\n    return value != null && typeof value == 'object';\n  }\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n\n\n  function isSymbol(value) {\n    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;\n  }\n  /**\n   * Checks if `value` is classified as a typed array.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   * @example\n   *\n   * _.isTypedArray(new Uint8Array);\n   * // => true\n   *\n   * _.isTypedArray([]);\n   * // => false\n   */\n\n\n  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n  /**\n   * Converts `value` to a finite number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.12.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {number} Returns the converted number.\n   * @example\n   *\n   * _.toFinite(3.2);\n   * // => 3.2\n   *\n   * _.toFinite(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toFinite(Infinity);\n   * // => 1.7976931348623157e+308\n   *\n   * _.toFinite('3.2');\n   * // => 3.2\n   */\n\n  function toFinite(value) {\n    if (!value) {\n      return value === 0 ? value : 0;\n    }\n\n    value = toNumber(value);\n\n    if (value === INFINITY || value === -INFINITY) {\n      var sign = value < 0 ? -1 : 1;\n      return sign * MAX_INTEGER;\n    }\n\n    return value === value ? value : 0;\n  }\n  /**\n   * Converts `value` to an integer.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {number} Returns the converted integer.\n   * @example\n   *\n   * _.toInteger(3.2);\n   * // => 3\n   *\n   * _.toInteger(Number.MIN_VALUE);\n   * // => 0\n   *\n   * _.toInteger(Infinity);\n   * // => 1.7976931348623157e+308\n   *\n   * _.toInteger('3.2');\n   * // => 3\n   */\n\n\n  function toInteger(value) {\n    var result = toFinite(value),\n        remainder = result % 1;\n    return result === result ? remainder ? result - remainder : result : 0;\n  }\n  /**\n   * Converts `value` to a number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {number} Returns the number.\n   * @example\n   *\n   * _.toNumber(3.2);\n   * // => 3.2\n   *\n   * _.toNumber(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toNumber(Infinity);\n   * // => Infinity\n   *\n   * _.toNumber('3.2');\n   * // => 3.2\n   */\n\n\n  function toNumber(value) {\n    if (typeof value == 'number') {\n      return value;\n    }\n\n    if (isSymbol(value)) {\n      return NAN;\n    }\n\n    if (isObject(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n      value = isObject(other) ? other + '' : other;\n    }\n\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value;\n    }\n\n    value = value.replace(reTrim, '');\n    var isBinary = reIsBinary.test(value);\n    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n  }\n  /**\n   * Converts `value` to a string. An empty string is returned for `null`\n   * and `undefined` values. The sign of `-0` is preserved.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   * @example\n   *\n   * _.toString(null);\n   * // => ''\n   *\n   * _.toString(-0);\n   * // => '-0'\n   *\n   * _.toString([1, 2, 3]);\n   * // => '1,2,3'\n   */\n\n\n  function toString(value) {\n    return value == null ? '' : baseToString(value);\n  }\n  /**\n   * Gets the value at `path` of `object`. If the resolved value is\n   * `undefined`, the `defaultValue` is returned in its place.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.7.0\n   * @category Object\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path of the property to get.\n   * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n   * @returns {*} Returns the resolved value.\n   * @example\n   *\n   * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n   *\n   * _.get(object, 'a[0].b.c');\n   * // => 3\n   *\n   * _.get(object, ['a', '0', 'b', 'c']);\n   * // => 3\n   *\n   * _.get(object, 'a.b.c', 'default');\n   * // => 'default'\n   */\n\n\n  function get(object, path, defaultValue) {\n    var result = object == null ? undefined : baseGet(object, path);\n    return result === undefined ? defaultValue : result;\n  }\n  /**\n   * Checks if `path` is a direct or inherited property of `object`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Object\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path to check.\n   * @returns {boolean} Returns `true` if `path` exists, else `false`.\n   * @example\n   *\n   * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n   *\n   * _.hasIn(object, 'a');\n   * // => true\n   *\n   * _.hasIn(object, 'a.b');\n   * // => true\n   *\n   * _.hasIn(object, ['a', 'b']);\n   * // => true\n   *\n   * _.hasIn(object, 'b');\n   * // => false\n   */\n\n\n  function hasIn(object, path) {\n    return object != null && hasPath(object, path, baseHasIn);\n  }\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n\n\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n  }\n  /**\n   * This method returns the first argument it receives.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Util\n   * @param {*} value Any value.\n   * @returns {*} Returns `value`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   *\n   * console.log(_.identity(object) === object);\n   * // => true\n   */\n\n\n  function identity(value) {\n    return value;\n  }\n  /**\n   * Creates a function that returns the value at `path` of a given object.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Util\n   * @param {Array|string} path The path of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   * @example\n   *\n   * var objects = [\n   *   { 'a': { 'b': 2 } },\n   *   { 'a': { 'b': 1 } }\n   * ];\n   *\n   * _.map(objects, _.property('a.b'));\n   * // => [2, 1]\n   *\n   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n   * // => [1, 2]\n   */\n\n\n  function property(path) {\n    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n  }\n  /**\n   * This method returns a new empty array.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {Array} Returns the new empty array.\n   * @example\n   *\n   * var arrays = _.times(2, _.stubArray);\n   *\n   * console.log(arrays);\n   * // => [[], []]\n   *\n   * console.log(arrays[0] === arrays[1]);\n   * // => false\n   */\n\n\n  function stubArray() {\n    return [];\n  }\n  /**\n   * This method returns `false`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {boolean} Returns `false`.\n   * @example\n   *\n   * _.times(2, _.stubFalse);\n   * // => [false, false]\n   */\n\n\n  function stubFalse() {\n    return false;\n  }\n\n  module.exports = findIndex;\n  });\n\n  var Collection =\n  /*#__PURE__*/\n  function () {\n    function Collection() {\n      var initialArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      _classCallCheck(this, Collection);\n\n      this.realArray = [];\n\n      if (initialArray != null) {\n        this.realArray = initialArray;\n      }\n    }\n\n    _createClass(Collection, [{\n      key: \"_hasOwnProperty\",\n      value: function _hasOwnProperty(key) {\n        return Object.prototype.hasOwnProperty.call(this.realArray, key);\n      }\n    }, {\n      key: \"_get\",\n      value: function _get(key) {\n        return this.realArray[key];\n      }\n    }, {\n      key: \"_set\",\n      value: function _set(key, value) {\n        this.realArray[key] = value;\n      }\n    }, {\n      key: \"_keys\",\n      value: function _keys() {\n        return Object.keys(this.realArray);\n      }\n    }, {\n      key: \"_delete\",\n      value: function _delete(key) {\n        return delete this.realArray[key];\n      }\n      /**\n       * exports a Collection object\n       */\n\n    }, {\n      key: \"_export\",\n      value: function _export() {\n        return this.realArray;\n      }\n    }]);\n\n    return Collection;\n  }();\n\n  /*\n  lane:\n       * [\n       *      {\n       *          id: the id of the Incident\n       *          millisecond: the millisecond of the channel this Animation (that affects the selector/attribute pair) runs\n       *      }\n       *  ]\n  */\n  function updateFinalValues(affectedIncident, initialValues, originalFinalValues, finalValues) {\n    // console.log(initialValues, originalFinalValues);\n    var change = false;\n\n    for (var key in initialValues) {\n      if (!Object.prototype.hasOwnProperty.call(originalFinalValues, key)) {\n        change = true;\n        finalValues[key] = initialValues[key];\n      }\n    }\n\n    affectedIncident.animatedAttributeValue = finalValues;\n    return change;\n  }\n  /**\n   * This function takes as input the index of the affected incident on the lane,\n   * the lane and it re-calculates the\n   * initial and final values of all the following incidents in the lane.\n   * The function is used only in cases of combo attributes\n   *\n   * @param {boolean} store - if set to true the first Incident to be edited stores the\n   *      initial values as its pureInitialValues\n   * */\n\n\n  function setInitialValue(lane, incidentsById, newInitialValues, affectedIndex) {\n    var store = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var affectedItem = lane[affectedIndex];\n\n    var affectedIncident = incidentsById._get(affectedItem.id);\n\n    affectedIncident.setInitialValue(newInitialValues, store);\n    var change = updateFinalValues(affectedIncident, affectedIncident.initialValue, affectedIncident.originalAnimatedAttributeValue, JSON.parse(JSON.stringify(affectedIncident.animatedAttributeValue))); // / if the final values have changed according to the new initial values and there is\n    // a following incident on the lane\n\n    if (change) {\n      affectedIncident.lastWish();\n      affectedIncident.onGetContext();\n    }\n\n    if (change && affectedIndex < lane.length - 1) {\n      setInitialValue(lane, incidentsById, affectedIncident.animatedAttributeValue, affectedIndex + 1, false);\n    }\n  }\n\n  /**\n   * The goal of this class is to get an original array, provide all the functionality\n   * of the Collection class but by keeping the originalArray clean as it was provided.\n   */\n  var SandboxCollection =\n  /*#__PURE__*/\n  function () {\n    function SandboxCollection(originalArray) {\n      _classCallCheck(this, SandboxCollection);\n\n      this.originalArray = originalArray;\n      this.extraArray = {};\n      this.addedKeys = [];\n      this.removedKeys = [];\n    }\n\n    _createClass(SandboxCollection, [{\n      key: \"_hasOwnProperty\",\n      value: function _hasOwnProperty(key) {\n        return Object.prototype.hasOwnProperty.call(this.originalArray, key) || Object.prototype.hasOwnProperty.call(this.extraArray, key);\n      }\n    }, {\n      key: \"_get\",\n      value: function _get(key) {\n        if (Object.prototype.hasOwnProperty.call(this.extraArray, key)) {\n          return this.extraArray[key];\n        }\n\n        if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {\n          return undefined;\n        }\n\n        this.extraArray[key] = _objectSpread2({}, this.originalArray[key]);\n        return this.extraArray[key];\n      }\n    }, {\n      key: \"_set\",\n      value: function _set(key, value) {\n        this.extraArray[key] = value;\n\n        if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {\n          this.addedKeys.push(key);\n        }\n\n        var indexOnRemovedKeys = this.removedKeys.indexOf(key);\n\n        if (indexOnRemovedKeys > -1) {\n          this.removedKeys.splice(indexOnRemovedKeys, 1);\n        }\n      }\n    }, {\n      key: \"_keys\",\n      value: function _keys() {\n        var allKeys = Object.keys(this.originalArray).concat(this.addedKeys);\n\n        for (var i = 0; i < this.removedKeys.length; i++) {\n          var indexOnArray = this.removedKeys.indexOf(this.removedKeys[i]);\n          allKeys.splice(indexOnArray, 1);\n        }\n\n        return allKeys;\n      }\n    }, {\n      key: \"_delete\",\n      value: function _delete(key) {\n        var indexOnAddedKeys = this.addedKeys.indexOf(key);\n\n        if (indexOnAddedKeys > -1) {\n          this.addedKeys.splice(indexOnAddedKeys);\n          return delete this.extraArray[key];\n        }\n\n        return this.removedKeys.push(key);\n      }\n    }, {\n      key: \"_export\",\n      value: function _export() {\n        for (var key in this.extraArray) {\n          this.originalArray[key] = this.extraArray[key];\n        }\n\n        for (var i = 0; i < this.removedKeys.length; i++) {\n          delete this.originalArray[this.removedKeys[i]];\n        }\n\n        return this.originalArray;\n      }\n    }]);\n\n    return SandboxCollection;\n  }();\n\n  var SandboxIncidentsById =\n  /*#__PURE__*/\n  function (_SandboxCollection) {\n    _inherits(SandboxIncidentsById, _SandboxCollection);\n\n    function SandboxIncidentsById() {\n      _classCallCheck(this, SandboxIncidentsById);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(SandboxIncidentsById).apply(this, arguments));\n    }\n\n    _createClass(SandboxIncidentsById, [{\n      key: \"_get\",\n      value: function _get(key) {\n        if (Object.prototype.hasOwnProperty.call(this.extraArray, key)) {\n          return this.extraArray[key];\n        }\n\n        if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {\n          return undefined;\n        }\n\n        return this.originalArray[key];\n      }\n    }]);\n\n    return SandboxIncidentsById;\n  }(SandboxCollection);\n\n  var SandboxLanes =\n  /*#__PURE__*/\n  function (_SandboxCollection) {\n    _inherits(SandboxLanes, _SandboxCollection);\n\n    function SandboxLanes() {\n      _classCallCheck(this, SandboxLanes);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(SandboxLanes).apply(this, arguments));\n    }\n\n    _createClass(SandboxLanes, [{\n      key: \"_get\",\n      value: function _get(key) {\n        if (Object.prototype.hasOwnProperty.call(this.extraArray, key)) {\n          return this.extraArray[key];\n        }\n\n        if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {\n          return undefined;\n        }\n\n        this.extraArray[key] = [];\n\n        for (var i = 0; i < this.originalArray[key].length; i++) {\n          this.extraArray[key].push({\n            id: this.originalArray[key][i].id,\n            // incident: this.originalArray[key][i].incident,\n            millisecond: this.originalArray[key][i].millisecond * 1\n          });\n        }\n\n        return this.extraArray[key];\n      }\n    }]);\n\n    return SandboxLanes;\n  }(SandboxCollection);\n\n  var LanesHandler =\n  /*#__PURE__*/\n  function () {\n    function LanesHandler() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, LanesHandler);\n\n      /*\n           * Keeps the lanes of the Channel in the form:\n           * {\n           *  <motorcortex-id>_<attribute>: [\n           *      {\n           *          id: the id of the Incident\n           *          millisecond: the millisecond of the channel this Animation (that affects the selector/attribute pair) runs\n           *      }\n           *  ]\n           * }\n           /** @type {{}}\n           */\n      this.lanes = new Collection({});\n\n      if (props.lanes) {\n        this.lanes = props.lanes;\n      }\n\n      this.comboAttributes = {};\n\n      if (props.comboAttributes != null) {\n        this.comboAttributes = props.comboAttributes;\n      }\n\n      this.runTimeInfo = props.runTimeInfo;\n      /*\n          Keeps an indexing of the lanes each Animation belongs to. The form is the following:\n          belongingLaneKeysByAnimationId: {\n              <animation_id>: [laneKey1, laneKey2, ...],\n              <animation_id>: [laneKey2, laneKey3, ...],\n              ...\n          }\n           */\n\n      this.belongingLaneKeysByAnimationId = new Collection({});\n\n      if (props.belongingLaneKeysByAnimationId) {\n        this.belongingLaneKeysByAnimationId = props.belongingLaneKeysByAnimationId;\n      }\n      /*\n          keeps all Incidents (that appear on the lanes) mapped on a key - value pair\n          object on which the keys are the ids and the values the corresponding Incidents.\n          The Incidents of this object are ContextAwareIncidents\n          */\n\n\n      this.incidentsById = new Collection({});\n\n      if (props.incidentsById) {\n        this.incidentsById = props.incidentsById;\n      }\n    }\n    /**\n     * This method resizes all the lanes of the Lanes Handler by the durationFraction provided.\n     * No checks are performed.\n     * This method is been invoked in cases where a full Clip gets resized, so no conflict checks need to\n     * run.\n     * @param {float} durationFration: the fraction between the new duration and the current\n     */\n\n\n    _createClass(LanesHandler, [{\n      key: \"_resize\",\n      value: function _resize(durationFraction) {\n        var keys = this.lanes._keys();\n\n        for (var i = 0; i < keys.length; i++) {\n          var key = keys[i];\n\n          var theLane = this.lanes._get(key);\n\n          for (var j = 0; j < theLane.length; j++) {\n            theLane[j].millisecond = theLane[j].millisecond * durationFraction;\n          }\n        }\n      }\n      /**\n       * it creates a new LanesHandler that acts as a sanbox for testing changes\n       */\n\n    }, {\n      key: \"createTestLanesSanbox\",\n      value: function createTestLanesSanbox() {\n        var props = {\n          lanes: new SandboxLanes(this.lanes._export()),\n          belongingLaneKeysByAnimationId: new SandboxCollection(this.belongingLaneKeysByAnimationId._export()),\n          incidentsById: new SandboxIncidentsById(this.incidentsById._export())\n        };\n\n        if (this.comboAttributes) {\n          props.comboAttributes = this.comboAttributes;\n        }\n\n        return new LanesHandler(props);\n      }\n    }, {\n      key: \"getLanesCopy\",\n      value: function getLanesCopy(lane) {\n        var laneToReturn = [];\n\n        for (var i = 0; i < lane.length; i++) {\n          laneToReturn.push({\n            id: lane[i].id,\n            millisecond: lane[i].millisecond * 1\n          });\n        }\n\n        return laneToReturn;\n      }\n    }, {\n      key: \"getLaneElementsClone\",\n      value: function getLaneElementsClone(laneElement) {\n        return {\n          id: laneElement.id,\n          millisecond: laneElement.millisecond * 1\n        };\n      }\n    }, {\n      key: \"applySandboxChanges\",\n      value: function applySandboxChanges(SanboxObject) {\n        this.lanes = new Collection(SanboxObject.lanes._export());\n        this.belongingLaneKeysByAnimationId = new Collection(SanboxObject.belongingLaneKeysByAnimationId._export());\n        this.incidentsById = new Collection(SanboxObject.incidentsById._export());\n      }\n    }, {\n      key: \"getLane\",\n      value: function getLane(mcid, attr) {\n        return this.lanes._get(getLaneKey(mcid, attr));\n      }\n      /**\n       * return true if lane exists or false otherwise\n       * @param {String} mcid\n       * @param {String} attr\n       * @param {boolean} ifNotCreateIt - if is set to true and the lane doesn't exist it creates it but still returning false\n       */\n\n    }, {\n      key: \"laneExists\",\n      value: function laneExists(mcid, attr) {\n        var ifNotCreateIt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        var laneKey = getLaneKey(mcid, attr);\n\n        if (!this.lanes._hasOwnProperty(laneKey)) {\n          if (ifNotCreateIt) {\n            this.lanes._set(laneKey, []);\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n      /**\n       * @param {Object} newAnim - an object of the form of a lane item (with keys \"millisecond\" and \"incident\"\n       * @param {string} mcid\n       * @param {String} attr\n       * @param {array} excludeIdsFromCheck - optional. If exists it excludes all the ids of this array from check. This\n       *  parameter has been added for the edit checks where an animation might overlap another animation that participates on\n       *  the move, something that should not happen as the edited animations pre-existed without conflicts and the move of all\n       *  of them together guarantees that there is going to be no conflict between them even after the edit\n       * @param {int} testDuration - optional. This parameter is used when the channel needs to addcheck overlaps after duration\n       *  edits, so the testDuration is passed (we don't want to polute the original animation object as it refers to the real one)\n       * @retuns {array} - a list of all overlapping animations of the lane\n       */\n\n    }, {\n      key: \"getOverlappingAnims\",\n      value: function getOverlappingAnims(newAnim, mcid, attr) {\n        var excludeIdsFromCheck = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n        var testDuration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n        var that = this;\n\n        var overlappingAnims = lodash_filter(this.lanes._get(getLaneKey(mcid, attr)), function (existingAnim) {\n          var durationToUseOnChecks = newAnim.incident.duration;\n\n          if (testDuration != null) {\n            durationToUseOnChecks = testDuration;\n          }\n\n          return existingAnim.id !== newAnim.incident.id && excludeIdsFromCheck.indexOf(existingAnim.id) < 0 && ( // existing anim starts within the new anim's extend\n          existingAnim.millisecond >= newAnim.millisecond && existingAnim.millisecond < durationToUseOnChecks + newAnim.millisecond || // or ends within the new anim's extend\n          existingAnim.millisecond + that.incidentsById._get(existingAnim.id).duration > newAnim.millisecond && existingAnim.millisecond + that.incidentsById._get(existingAnim.id).duration <= durationToUseOnChecks + newAnim.millisecond || // or it starts before and ends after the new anim's extend\n          existingAnim.millisecond < newAnim.millisecond && existingAnim.millisecond + that.incidentsById._get(existingAnim.id).duration > durationToUseOnChecks + newAnim.millisecond);\n        });\n\n        return overlappingAnims;\n      }\n      /**\n       * it justs adds the lane item to the lane and adjusts the initial values of the Anims in sequence\n       * No checks are performed, just execution.\n       * @param {String} mcid\n       * @param {String} attr\n       * @param {int} millisecond\n       * @param {Object} incident\n       */\n\n    }, {\n      key: \"addElementToLane\",\n      value: function addElementToLane(mcid, attr, millisecond, incident) {\n        var laneKey = getLaneKey(mcid, attr);\n\n        this.incidentsById._set(incident.id, incident);\n\n        var laneElement = {\n          millisecond: millisecond,\n          id: incident.id\n        };\n        this.laneExists(mcid, attr, true);\n\n        var theLane = this.lanes._get(laneKey);\n\n        theLane.push(laneElement);\n        theLane = lodash_sortby(theLane, ['millisecond']);\n\n        this.lanes._set(laneKey, theLane); // indexing stuff\n\n\n        if (!this.belongingLaneKeysByAnimationId._hasOwnProperty(incident.id)) {\n          this.belongingLaneKeysByAnimationId._set(incident.id, []);\n        }\n\n        this.belongingLaneKeysByAnimationId._get(incident.id).push(laneKey); // indexing\n\n\n        var newAnimsIndex = lodash_findindex(theLane, function (item) {\n          return item.id === incident.id;\n        }); // helper.log(newAnimsIndex);\n        // step 1: set the intial values of the new Animation\n\n\n        if (newAnimsIndex === 0) {\n          // if the newly entered animation is the first of the lane\n          if (theLane.length > 1) {\n            // and it has other animations too\n            incident.setInitialValue(this.incidentsById._get(theLane[1].id).pureInitialValues);\n          } else {\n            incident.setInitialValue();\n          }\n        } else {\n          incident.setInitialValue(this.incidentsById._get(theLane[newAnimsIndex - 1].id).animatedAttributeValue);\n        }\n        /* if the attribute of the lane is a compo attribute */\n\n\n        if (Object.prototype.hasOwnProperty.call(this.comboAttributes, attr)) {\n          var incidentInitialValues = incident.initialValue;\n          setInitialValue(theLane, this.incidentsById, incidentInitialValues, newAnimsIndex);\n        } // step 2: set the inital values of the following Animation (if any).\n\n\n        if (newAnimsIndex + 1 < theLane.length) {\n          this.incidentsById._get(theLane[newAnimsIndex + 1].id).setInitialValue(incident.animatedAttributeValue);\n\n          if (this.incidentsById._get(theLane[newAnimsIndex + 1].id).gotContext) {\n            this.incidentsById._get(theLane[newAnimsIndex + 1].id).lastWish();\n\n            this.incidentsById._get(theLane[newAnimsIndex + 1].id).onGetContext();\n          }\n        }\n      }\n      /**\n       * it justs updates the lane\n       * No checks are performed, just execution\n       * @param {array} affectedAnimationsIds\n       * @param {int} millisecondDelta\n       */\n\n    }, {\n      key: \"updateLane\",\n      value: function updateLane(affectedAnimationsIds, millisecondsDelta) {\n        var _this = this;\n\n        // first we group the affected animations by lanes\n        var affectedLanes = {};\n        var that = this;\n\n        for (var i = 0; i < affectedAnimationsIds.length; i++) {\n          var belongingLanes = this.belongingLaneKeysByAnimationId._get(affectedAnimationsIds[i]);\n\n          for (var j = 0; j < belongingLanes.length; j++) {\n            var laneKey = belongingLanes[j];\n\n            if (!Object.prototype.hasOwnProperty.call(affectedLanes, laneKey)) {\n              affectedLanes[laneKey] = {\n                animations: [],\n                lane: that.lanes._get(laneKey),\n                laneData: getMCIDandAttrOutOfLaneKey(belongingLanes[j])\n              };\n            }\n\n            affectedLanes[laneKey].animations.push(affectedAnimationsIds[i]);\n          }\n        } // for each of the affected lanes\n\n\n        for (var _laneKey in affectedLanes) {\n          var affectedLane = affectedLanes[_laneKey];\n          var lane = affectedLane.lane;\n          var laneData = affectedLane.laneData;\n\n          var laneBeforeEdit = lodash_sortby(this.getLanesCopy(lane), ['millisecond']);\n\n          var isComboAttr = Object.prototype.hasOwnProperty.call(this.comboAttributes, laneData.attribute); // edit lane items millisecond\n\n          for (var k = 0; k < lane.length; k++) {\n            if (affectedLane.animations.indexOf(lane[k].id) >= 0) {\n              lane[k].millisecond += millisecondsDelta;\n            }\n          } // end for searching for the animations within the lane\n\n\n          var sortedLane = lodash_sortby(lane, ['millisecond']);\n\n          this.lanes._set(_laneKey, sortedLane);\n\n          lane = sortedLane;\n\n          var _loop = function _loop(_i) {\n            var animationToCheck = affectedLane.animations[_i];\n\n            var animationIndexBeforeEdit = lodash_findindex(laneBeforeEdit, function (item) {\n              return item.id === animationToCheck;\n            });\n\n            var animationIndexAfterEdit = lodash_findindex(lane, function (item) {\n              return item.id === animationToCheck;\n            });\n\n            var animation = _this.incidentsById._get(lane[animationIndexAfterEdit].id);\n\n            if (animationIndexBeforeEdit !== animationIndexAfterEdit || animationIndexAfterEdit > 1) {\n              if (animationIndexBeforeEdit + 1 < lane.length) {\n                // if the animation was not the last animation on the lane before the edit\n                // we should take care of the initial values of the animation's previous successor\n                if (animationIndexBeforeEdit === 0) {\n                  // if the edited animation was the first one before the edit\n                  // pass its initial values to its previous successor as its new initial values\n                  if (isComboAttr) {\n                    setInitialValue(lane, _this.incidentsById, animation.pureInitialValues, 0, true);\n                  } else {\n                    _this.incidentsById._get(laneBeforeEdit[1].id).setInitialValue(animation.pureInitialValues);\n\n                    _this.incidentsById._get(laneBeforeEdit[1].id).onGetContext();\n                  }\n                } else {\n                  // else if the edited animation was not the first one before the edit\n                  // meaning its previous successor is not the first one on the lane after the edit\n                  // just grab the target value of the new previous animation of the animation's previous successor and set it as initial value\n                  if (isComboAttr) {\n                    var indexToAffect = animationIndexAfterEdit > animationIndexBeforeEdit ? animationIndexBeforeEdit : animationIndexAfterEdit;\n                    setInitialValue(lane, _this.incidentsById, _this.incidentsById._get(laneBeforeEdit[animationIndexBeforeEdit - 1].id).animatedAttributeValue, indexToAffect, true);\n                  } else {\n                    _this.incidentsById._get(laneBeforeEdit[animationIndexBeforeEdit + 1].id).setInitialValue(_this.incidentsById._get(laneBeforeEdit[animationIndexBeforeEdit - 1].id).animatedAttributeValue);\n\n                    _this.incidentsById._get(laneBeforeEdit[animationIndexBeforeEdit + 1].id).onGetContext();\n                  }\n                }\n              } // for the edited animation itself now:\n\n\n              if (animationIndexAfterEdit === 0) {\n                // is it the first one (after edit)?\n                // get the initial values of the previously 0 indexed animation of the lane\n                if (isComboAttr) {\n                  setInitialValue(lane, _this.incidentsById, _this.incidentsById._get(laneBeforeEdit[0].id).pureInitialValues, animationIndexAfterEdit, true);\n                } else {\n                  animation.setInitialValue(_this.incidentsById._get(laneBeforeEdit[0].id).pureInitialValues);\n                  animation.onGetContext();\n                }\n              } else {\n                // else if it is not the first one after editd\n                // just grab the target value of the previous animation on the updated lane and set it as its initial value\n                if (isComboAttr) {\n                  setInitialValue(lane, _this.incidentsById, _this.incidentsById._get(lane[animationIndexAfterEdit - 1].id).animatedAttributeValue, animationIndexAfterEdit, true);\n                } else {\n                  animation.setInitialValue(_this.incidentsById._get(lane[animationIndexAfterEdit - 1].id).animatedAttributeValue);\n                  animation.onGetContext();\n                }\n              } // for its new next animation (if it has one)\n\n\n              if (animationIndexAfterEdit + 1 < lane.length) {\n                // set its initial value to equal the target value of the edited animation\n                if (isComboAttr) {\n                  setInitialValue(lane, _this.incidentsById, animation.animatedAttributeValue, animationIndexAfterEdit + 1, true);\n                } else {\n                  _this.incidentsById._get(lane[animationIndexAfterEdit + 1].id).setInitialValue(animation.animatedAttributeValue);\n\n                  _this.incidentsById._get(lane[animationIndexAfterEdit + 1].id).onGetContext();\n                }\n              }\n            }\n          };\n\n          for (var _i = 0; _i < affectedLane.animations.length; _i++) {\n            _loop(_i);\n          }\n        } // end for each of the belonging lanes of the animation\n\n      }\n      /**\n       * removes the list of animations as provided\n       * @param {array} removedAnimations - an array with the removed animations' ids\n       */\n\n    }, {\n      key: \"deleteAnimations\",\n      value: function deleteAnimations(removedAnimations) {\n        var affectedLanes = {};\n\n        for (var i = 0; i < removedAnimations.length; i++) {\n          var id = removedAnimations[i]; // for each lane the affected Animation appears in\n\n          var belongingLanes = this.belongingLaneKeysByAnimationId._get(id);\n\n          for (var j = 0; j < belongingLanes.length; j++) {\n            var lane = this.lanes._get(belongingLanes[j]);\n\n            var animationIndexBeforeEdit = -1;\n\n            for (var k = 0; k < lane.length; k++) {\n              if (lane[k].id === id) {\n                animationIndexBeforeEdit = k;\n                break;\n              }\n            } // helper.log(animationIndexBeforeEdit);\n\n\n            var animationToDelete = _objectSpread2({}, lane[animationIndexBeforeEdit]);\n\n            var animationObjectToDelete = this.incidentsById._get(animationToDelete.id);\n\n            var laneData = getMCIDandAttrOutOfLaneKey(belongingLanes[j]); // gets the lane without the removed animation\n\n            var newLane = [];\n\n            for (var _k = 0; _k < lane.length; _k++) {\n              if (lane[_k].id !== id) {\n                newLane.push(lane[_k]);\n              }\n            }\n\n            this.lanes._set(belongingLanes[j], newLane);\n\n            lane = this.lanes._get(belongingLanes[j]);\n\n            if (lane.length === 0) {\n              // in case there are no more animations on the lane any more we reset\n              // the lane by running the progress(0,0), so that the affected elements\n              // will get back to their original attribute value\n              animationObjectToDelete.onProgress(0, 0);\n\n              this.lanes._delete(belongingLanes[j]);\n\n              if (Object.prototype.hasOwnProperty.call(affectedLanes, belongingLanes[j])) {\n                delete affectedLanes[belongingLanes[j]];\n              }\n            } else {\n              affectedLanes[belongingLanes[j]] = getMCIDandAttrOutOfLaneKey(belongingLanes[j]);\n\n              if (animationIndexBeforeEdit < lane.length && this.incidentsById._get(animationToDelete.id).pureInitialValues !== false) {\n                if (Object.prototype.hasOwnProperty.call(this.comboAttributes, laneData.attribute)) {\n                  setInitialValue(lane, this.incidentsById, this.incidentsById._get(animationToDelete.id).pureInitialValues, animationIndexBeforeEdit, true);\n                } else {\n                  this.incidentsById._get(lane[animationIndexBeforeEdit].id).setInitialValue(this.incidentsById._get(animationToDelete.id).pureInitialValues);\n\n                  this.incidentsById._get(lane[animationIndexBeforeEdit].id).onGetContext();\n                }\n              }\n            }\n          }\n\n          this.belongingLaneKeysByAnimationId._delete(removedAnimations[i]);\n        }\n\n        return affectedLanes;\n      }\n      /**\n       * This method is responsible for recalculating the scratch values of the first\n       * Incident of each of the lanes of the LanesHandler according to the provided\n       * context id\n       * */\n\n    }, {\n      key: \"recalcScratchValues\",\n      value: function recalcScratchValues(contextId) {\n        var keys = this.lanes._keys();\n\n        for (var i = 0; i < keys.length; i++) {\n          var key = keys[i];\n\n          var theLane = this.lanes._get(key);\n\n          if (theLane.length > 0) {\n            var firstIncident = this.incidentsById._get(theLane[0].id);\n\n            var newScratchValue = firstIncident.getScratchValue(contextId);\n            var laneData = getMCIDandAttrOutOfLaneKey(key);\n\n            if (Object.prototype.hasOwnProperty.call(this.comboAttributes, laneData.attribute)) {\n              // if it is a combo\n              setInitialValue(theLane, this.incidentsById, newScratchValue, 0, true);\n            } else {\n              // else if it's not a combo attribute\n              firstIncident.setInitialValue(newScratchValue);\n            }\n\n            firstIncident.lastWish();\n            firstIncident.onGetContext();\n          }\n        }\n      }\n    }]);\n\n    return LanesHandler;\n  }();\n\n  var AttributeChannel =\n  /*#__PURE__*/\n  function (_Channel) {\n    _inherits(AttributeChannel, _Channel);\n\n    function AttributeChannel(props) {\n      var _this;\n\n      _classCallCheck(this, AttributeChannel);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(AttributeChannel).call(this, props));\n      /*\n          comboAttributes are attributes of type object, holding a number of other attributes.\n          E.g. CSS \"transform\" attribute is a combo that holds a number of other attributes such as:\n          translateX, translateY, etc. The lanes handler keeps just one lane for the combo attrs\n          in an object format keeping the value of each attribute at any given point.\n          Combo attributes are passed on the constructor of the Channel in the format:\n          props.comboAttributes: {\n              transition: ['translateX', 'translateY', ...],\n              <something_else>: ['<attrName1>', '<attrName2>', ...]\n          }\n          */\n\n      _this.comboAttributes = {};\n      /**\n       * For incidents that do not have animatedAttrs there should be only one lane per element.\n       * The attributes Channel will use a default (fake), fixed attribute for this cases so it always ends\n       * up with just one lane per element: <element_id>_<this.fixedAttributeName>\n       */\n\n      _this.fixedAttributeName = '_';\n\n      if (props.comboAttributes != null) {\n        _this.comboAttributes = props.comboAttributes;\n      }\n\n      _this.LanesHandler = new LanesHandler({\n        comboAttributes: _this.comboAttributes,\n        runTimeInfo: _this.runTimeInfo\n      }); // this.type = \"attributes\";\n\n      return _this;\n    }\n\n    _createClass(AttributeChannel, [{\n      key: \"setComboAttributes\",\n      value: function setComboAttributes(comboAttributes) {\n        this.comboAttributes = comboAttributes;\n        this.LanesHandler = new LanesHandler({\n          comboAttributes: this.comboAttributes\n        });\n      }\n    }, {\n      key: \"_resize\",\n      value: function _resize(durationFraction) {\n        this.LanesHandler._resize(durationFraction);\n      }\n      /* *******************************************************\n         DECISION METHODS\n         ******************************************************* */\n\n      /**\n       * All of the incidents coming to this method are element-attribute incidents meaning that they only\n       * target just one element and also they include just a single attribute on the incident.attrs.animatedAttrs\n       * object\n       *\n       * @param {array} incidents - A collection of Incidents in the form:\n       * {\n       *  millisecond\n       *  incident\n       *  id\n       * }\n       * @param {string} type - can be either \"all-or-nothing\" (default) or \"keep-passing\". If type = \"all-or-nothing\"\n       *  the addition passes only if all incidents pass. If type = \"keep-passing\" the method will still return true\n       *  but will also include an errors array on its return and also will only include the success callbacks on\n       *  the execute key of its return\n       * @returns either:\n       *   {\n       *       result:true,\n       *       execute: // an array of functions that when executed it will add the Incidents on the Channels\n       *   }\n       *   or\n       *   {\n       *       result: false,\n       *       errors\n       *   }\n       */\n\n    }, {\n      key: \"checkAddition\",\n      value: function checkAddition(incidents) {\n        var _this2 = this;\n\n        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all-or-nothing';\n        var LanesHandlerSandbox = this.LanesHandler.createTestLanesSanbox();\n        // the permanent and pre-existing objects it handles, such as changes on the initial values of existing animations.\n        // Because of the fact the LanesSandboxHandler is only there for testing we don't want to execute these changes\n        // during checks but still we need to know them on success. For this, the onSuccessActions array holds all executable\n        // functions retured by various LanesHandlerSanbox functions so it can execute them on success.\n\n        var onSuccessActions = [];\n        var conflicts = [];\n\n        var _loop = function _loop(i) {\n          var incidentConflicts = false; // a boolean that keeps the information whether the incident conflicts or not\n\n          var laneItem = incidents[i];\n          var incident = laneItem.incident;\n          var mcid = incident.mcid;\n          var attribute = incident.attribute || _this2.fixedAttributeName;\n          LanesHandlerSandbox.laneExists(mcid, attribute); // create the lane if it doesn't exist already\n\n          var overlappingAnims = LanesHandlerSandbox.getOverlappingAnims(laneItem, mcid, attribute); // helper.log(overlappingAnim)\n\n          if (overlappingAnims.length > 0) {\n            incidentConflicts = true;\n            conflicts.push({\n              type: 'unauthorised, overlapping incidents on the same element',\n              meta: {\n                element_mcid: mcid,\n                attribute: attribute,\n                incident: laneItem,\n                overlappingAnims: overlappingAnims\n              }\n            });\n          }\n\n          if (!incidentConflicts) {\n            onSuccessActions.push(function () {\n              LanesHandlerSandbox.addElementToLane(mcid, attribute, laneItem.millisecond, incident);\n\n              incident._onGetContextOnce();\n            });\n          }\n        };\n\n        for (var i = 0; i < incidents.length; i++) {\n          _loop(i);\n        } // end for each incident\n        // if we have conflicts and the type = \"all-or-nothing\"\n\n\n        if (conflicts.length > 0 && type === 'all-or-nothing') {\n          return {\n            result: false,\n            errors: conflicts\n          };\n        } // as soon as we want all passing additions to get applied the Lanes Handler will create a callback that will be passed to the result.\n        // This callback will apply all passing additions.\n        // success message\n\n\n        var that = this;\n\n        var exec = function execFunct() {\n          for (var _i = 0; _i < onSuccessActions.length; _i++) {\n            onSuccessActions[_i]();\n          }\n\n          that.LanesHandler.applySandboxChanges(LanesHandlerSandbox);\n        };\n\n        return {\n          result: true,\n          errors: conflicts,\n          execute: exec\n        };\n      }\n      /**\n         * It initially checks if the edit is allowed and if it is it retuns an array of executable functions\n         * that apply the change\n         * @param {array} incidents - the list of the lane items to edit in an array format [object, object, ...]\n         * @param {int} millisecondsDelta - the milliseconds delta to apply to the incidents\n         * @returns {object} -\n         * either:\n         {\n            result: true,\n            execute: // array of functions to be executed in order to apply the edit\n         }\n         or\n         {\n             result: false,\n             errors: // an array including all the errors / conflicts found on edit\n         }\n        */\n\n    }, {\n      key: \"checkEdit\",\n      value: function checkEdit(incidents, millisecondsDelta) {\n        // console.log(incidents);\n        var affectedIncidentIds = [];\n\n        for (var i = 0; i < incidents.length; i++) {\n          affectedIncidentIds.push(incidents[i].id);\n        }\n\n        var LanesHandlerSandbox = this.LanesHandler.createTestLanesSanbox();\n        var conflicts = [];\n\n        for (var _i2 = 0; _i2 < incidents.length; _i2++) {\n          var incident = incidents[_i2].incident;\n          var incidentId = incident.id;\n          var mcid = incidents[_i2].incident.mcid;\n          var attribute = incidents[_i2].incident.attribute || this.fixedAttributeName;\n          var lane = LanesHandlerSandbox.getLane(mcid, attribute);\n\n          for (var k = 0; k < lane.length; k++) {\n            if (lane[k].id === incidentId) {\n              var affectedAnim = lane[k];\n              var testLaneElement = LanesHandlerSandbox.getLaneElementsClone(affectedAnim);\n              testLaneElement.millisecond += millisecondsDelta;\n              testLaneElement.incident = LanesHandlerSandbox.incidentsById._get(testLaneElement.id);\n              var overlappingAnims = LanesHandlerSandbox.getOverlappingAnims(testLaneElement, mcid, attribute, affectedIncidentIds);\n\n              if (overlappingAnims.length > 0) {\n                conflicts.push({\n                  type: 'anauthorised, overlapping animations on the same element',\n                  meta: {\n                    element_mcid: mcid,\n                    attribute: attribute,\n                    newAnimation: testLaneElement,\n                    overlappingAnims: overlappingAnims\n                  }\n                });\n              }\n\n              break;\n            } // end of if we found the specific animation on the lane's sequence\n\n          } // end of each lane's item\n\n        } // end for each affected animation's id\n\n\n        if (conflicts.length > 0) {\n          return {\n            result: false,\n            errors: conflicts\n          };\n        }\n\n        var that = this;\n\n        var exec = function execFunct() {\n          that.LanesHandler.updateLane(affectedIncidentIds, millisecondsDelta);\n        };\n\n        return {\n          result: true,\n          execute: exec\n        };\n      }\n      /**\n       * @param {array} incidents - [{id, start, end, startDelta}]\n       * @param {boolean} fullChannelResize - if set to true then the full html channel is resizing. This is a special case as in\n       *  that case no checks should be actually perfomed nor the projected candidate should be applied directly\n       * */\n\n    }, {\n      key: \"checkResizedIncidents\",\n      value: function checkResizedIncidents(incidents) {\n        var fullChannelResize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var excludeIdsFromCheck = [];\n\n        for (var i = 0; i < incidents.length; i++) {\n          excludeIdsFromCheck.push(incidents[i].id);\n        }\n\n        var LanesHandlerSandbox = this.LanesHandler.createTestLanesSanbox();\n        var conflicts = [];\n\n        for (var _i3 = 0; _i3 < incidents.length; _i3++) {\n          // get the ContextAwareIncident\n          var incident = this.LanesHandler.incidentsById._get(incidents[_i3].id);\n\n          var mcid = incident.mcid;\n          var attribute = incident.attribute || this.fixedAttributeName;\n          var lane = LanesHandlerSandbox.getLane(mcid, attribute);\n          var laneAttrs = {\n            mcid: mcid,\n            attribute: attribute\n          };\n          var testDuration = incidents[_i3].end - incidents[_i3].start; // check for conflicts and edit lane items millisecond\n\n          for (var k = 0; k < lane.length; k++) {\n            if (lane[k].id === incidents[_i3].id) {\n\n              if (fullChannelResize === false) {\n                var affectedAnim = lane[k];\n                var testLaneElement = LanesHandlerSandbox.getLaneElementsClone(affectedAnim);\n                testLaneElement.millisecond += incidents[_i3].startDelta;\n                testLaneElement.incident = LanesHandlerSandbox.incidentsById._get(testLaneElement.id);\n                var overlappingAnims = LanesHandlerSandbox.getOverlappingAnims(testLaneElement, laneAttrs.mcid, laneAttrs.attribute, excludeIdsFromCheck, testDuration);\n\n                if (overlappingAnims.length > 0) {\n                  conflicts.push({\n                    type: 'anauthorised overlapping animations on the same element',\n                    meta: {\n                      element_mcid: laneAttrs.mcid,\n                      attribute: laneAttrs.attribute,\n                      newAnimation: testLaneElement,\n                      overlappingAnims: overlappingAnims\n                    }\n                  });\n                }\n              }\n\n              break;\n            } // end of if we found the specific animation on the lane's sequence\n\n          } // end of each lane's item\n\n        } // end for each affected animation's id\n\n\n        if (conflicts.length > 0) {\n          return {\n            result: false,\n            errors: conflicts\n          };\n        }\n\n        var that = this;\n\n        var exec = function execFunct() {\n          // updateLanes (only this time animation by animation as the milliseconds delta is not standard for all)\n          // as soon as there are no conflicts the Lanes Handler applies the changes before sending over the\n          // success message\n          for (var _i4 = 0; _i4 < incidents.length; _i4++) {\n            that.LanesHandler.updateLane([incidents[_i4].id], incidents[_i4].startDelta);\n          }\n        };\n\n        return {\n          execute: exec,\n          result: true\n        };\n      }\n      /**\n       *\n       */\n\n    }, {\n      key: \"checkDelete\",\n      value: function checkDelete(removedAnimations) {\n        // eslint-disable-line no-unused-vars\n        var removedAnimationIds = [];\n\n        for (var i = 0; i < removedAnimations.length; i++) {\n          removedAnimationIds.push(removedAnimations[i].id);\n        }\n\n        var that = this;\n\n        var exec = function execFunct() {\n          that.LanesHandler.deleteAnimations(removedAnimationIds);\n        };\n\n        return {\n          result: true,\n          execute: exec\n        };\n      }\n      /**\n       * This method is responsible for recalculating the scratch values of the first\n       * Incident of each of the lanes of the LanesHandler according to the provided\n       * context id\n       * */\n\n    }, {\n      key: \"recalcScratchValues\",\n      value: function recalcScratchValues(contextId) {\n        this.LanesHandler.recalcScratchValues(contextId);\n      }\n      /**\n       * Slips to just one lane forwards\n       * @param {array} lane - the lane to slip into\n       * @param {object} laneData - an object with keys: attribute & mcid\n       * @param {int} currentMillisecond - the millisecond the slip starts from\n       * @param {int} millisecond - the target millisecond of the slip\n       * @param {string} contextId - the contextId of the Incidents to slip\n       */\n\n    }, {\n      key: \"slipIntoLaneForwards\",\n      value: function slipIntoLaneForwards(lane, laneData, currentMillisecond, millisecond, contextId) {\n        var forceReset = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n        // console.log(lane, currentMillisecond, millisecond);\n        var that = this;\n\n        var participatingAnims = lodash_filter(lane, function (laneItem) {\n          return (// it ends after currentMillisecond and before target millisecond\n            // or it ends after the target millisecond but also starts before it\n            laneItem.millisecond + that.incidentsById._get(laneItem.id).duration >= currentMillisecond && laneItem.millisecond + that.incidentsById._get(laneItem.id).duration <= millisecond || that.incidentsById._get(laneItem.id).duration + laneItem.millisecond >= millisecond && laneItem.millisecond <= millisecond\n          );\n        });\n\n        if (participatingAnims.length === 0) {\n          // there are two cases forceReset can be used: a) when we are flashing the Clip\n          // going from 0 to millisecond via flash method of ExtendableClip or when\n          // we want to seek the Clip without executing it (like it was in transitional state)\n          // we diferentiate the two by the currentMillisecond value which in case (a) is always 0\n          if (forceReset === true && currentMillisecond === 0) {\n            var firstIncident = this.incidentsById._get(lane[0].id);\n\n            firstIncident.onProgress(0, 0, contextId);\n          }\n\n          return true;\n        }\n\n        participatingAnims = lodash_sortby(participatingAnims, [function (laneItem) {\n          return laneItem.millisecond;\n        }]); // We only care about the last (in chronological order) Incident, as this\n        // will define the final value\n\n        var lastIndex = participatingAnims.length - 1;\n\n        var participatingAnim = this.incidentsById._get(participatingAnims[lastIndex].id);\n\n        var startMillisecond = participatingAnims[lastIndex].millisecond; // if the animation ends before the target millisecond\n\n        if (participatingAnim.duration + startMillisecond <= millisecond) {\n          // and it's the last one on the row\n          participatingAnim.onProgress(1, participatingAnim.duration, contextId);\n        } else {\n          // slip for the specific element and the specific attribute. Set the Animation as paused or playing a\n          // and store this info somewhere\n          var percentageComplete = (millisecond - startMillisecond) / participatingAnim.duration;\n          participatingAnim.onProgress(percentageComplete, millisecond - startMillisecond, contextId);\n        }\n      }\n      /**\n       * Slips to just one lane backwards\n       * @param {array} lane - the lane to slip into\n       * @param {object} laneData - an object with keys: attribute & mcid\n       * @param {int} currentMillisecond - the millisecond the slip starts from\n       * @param {int} millisecond - the target millisecond of the slip\n       * @param {string} contextId - the contextId of the Incidents to slip\n       */\n\n    }, {\n      key: \"slipToLaneBackwards\",\n      value: function slipToLaneBackwards(lane, laneData, currentMillisecond, millisecond, contextId) {\n        // eslint-disable-line no-unused-vars\n        // we take all Animations that are either currently running or\n        // they end after the destination point\n        // helper.log('<------');\n        var that = this;\n\n        var participatingAnims = lodash_filter(lane, function (laneItem) {\n          var laneItemEnd = that.incidentsById._get(laneItem.id).duration + laneItem.millisecond;\n          return laneItemEnd <= millisecond && laneItemEnd >= currentMillisecond || // they end in the hot area\n          laneItem.millisecond >= currentMillisecond && laneItem.millisecond <= millisecond || // they start in the hot area\n          laneItem.millisecond < currentMillisecond && laneItemEnd > millisecond; // they overlap the hot area\n        });\n\n        if (participatingAnims.length === 0) {\n          return true;\n        }\n\n        participatingAnims = lodash_sortby(participatingAnims, [function (laneItem) {\n          return laneItem.millisecond;\n        }]); // We only care about the first (in chronological order) Incident, as this\n        // will define the final value of the backwards move\n\n        var lastIndex = 0;\n\n        var participatingAnim = this.incidentsById._get(participatingAnims[lastIndex].id);\n\n        var startMillisecond = participatingAnims[lastIndex].millisecond; // if the animation starts after the target millisecond\n\n        if (startMillisecond >= millisecond) {\n          participatingAnim.onProgress(0, 0, contextId);\n        } else {\n          // slip for the specific element and the specific attribute. Set the Animation as paused or playing a\n          // and store this info somewhere\n          var percentageComplete = (millisecond - startMillisecond) / participatingAnim.duration;\n          participatingAnim.onProgress(percentageComplete, millisecond - startMillisecond, contextId);\n        }\n      }\n      /**\n         @param {int} from - the millisecond to start from\n         @param {int} to - the millisecond to go to\n         @param {sring} contextId - the context id to \"move\"\n         @param {boolean} forceReset - set to true if status recalc is needed after edit\n         */\n\n    }, {\n      key: \"moveTo\",\n      value: function moveTo(from, to, contextId) {\n        var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n        // step 1: iterate through all lanes\n        var laneKeys = this.lanes._keys();\n\n        for (var i = 0; i < laneKeys.length; i++) {\n          var laneid = laneKeys[i];\n\n          var lane = this.lanes._get(laneid);\n\n          var laneData = getMCIDandAttrOutOfLaneKey(laneid);\n\n          if (from <= to) {\n            this.slipIntoLaneForwards(lane, laneData, from, to, contextId, forceReset);\n          } else if (from > to) {\n            this.slipToLaneBackwards(lane, laneData, from, to, contextId, forceReset);\n          }\n        }\n      }\n    }, {\n      key: \"lanes\",\n      get: function get() {\n        return this.LanesHandler.lanes;\n      }\n    }, {\n      key: \"incidentsById\",\n      get: function get() {\n        return this.LanesHandler.incidentsById;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'attributes';\n      }\n    }]);\n\n    return AttributeChannel;\n  }(Channel);\n\n  var ContextHandler =\n  /*#__PURE__*/\n  function () {\n    function ContextHandler() {\n      _classCallCheck(this, ContextHandler);\n\n      this.customEntities = {};\n    }\n\n    _createClass(ContextHandler, [{\n      key: \"getElementByMCID\",\n      value: function getElementByMCID(mcid) {\n        if (Object.prototype.hasOwnProperty.call(this.customEntities, mcid)) {\n          return this.customEntities[mcid];\n        }\n\n        if (Object.prototype.hasOwnProperty.call(this.elementsByMCID, mcid)) {\n          return this.elementsByMCID[mcid];\n        }\n\n        var element = this.context.rootElement.querySelector(this.getElementSelectorByMCID(mcid));\n        this.elementsByMCID[mcid] = element;\n        return element;\n      }\n    }, {\n      key: \"getElements\",\n      value: function getElements(selector) {\n        if (selector.charAt(0) === '!') {\n          selector = selector.substr(1);\n\n          if (selector.charAt(0) === '#') {\n            return [this.customEntities[selector.substr(1)]];\n          }\n\n          if (selector.charAt(0) === '.') {\n            var toReturn = [];\n\n            for (var key in this.customEntities) {\n              var entity = this.customEntities[key];\n\n              if (entity.classes.indexOf(selector.substr(1)) > -1) {\n                toReturn.push(entity);\n              }\n            }\n\n            return toReturn;\n          }\n        }\n\n        return Array.from(this.context.rootElement.querySelectorAll(selector));\n      }\n    }, {\n      key: \"getMCID\",\n      value: function getMCID(element) {\n        if (element.customEntity === true) {\n          return element.id;\n        }\n\n        return element.getAttribute(elements_data_attribute_name);\n      }\n    }, {\n      key: \"setMCID\",\n      value: function setMCID(element, mcid) {\n        element.setAttribute(elements_data_attribute_name, mcid);\n      }\n    }, {\n      key: \"getElementSelectorByMCID\",\n      value: function getElementSelectorByMCID(mcid) {\n        if (Object.prototype.hasOwnProperty.call(this.customEntities, mcid)) {\n          return \"!#\".concat(mcid);\n        }\n\n        return \"[\".concat(elements_data_attribute_name, \"=\\\"\").concat(mcid, \"\\\"]\");\n      }\n    }, {\n      key: \"setCustomEntity\",\n      value: function setCustomEntity(id, entity) {\n        var classes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n        if (Object.prototype.hasOwnProperty.call(this.customEntities, id)) {\n          helper.error(\"Clip \".concat(this.id, \" already has custom Entity with id: \").concat(id));\n          return false;\n        }\n\n        this.customEntities[id] = {\n          id: id,\n          entity: entity,\n          classes: classes,\n          customEntity: true\n        };\n        return true;\n      }\n    }]);\n\n    return ContextHandler;\n  }();\n\n  var IframeContextHandler =\n  /*#__PURE__*/\n  function (_ContextHandler) {\n    _inherits(IframeContextHandler, _ContextHandler);\n\n    /**\n     * @param {object} props - an object that should contain all of the following keys:\n     * - html (the html template to render)\n     * - css (the css template of the isolated tree)\n     * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n     * - host (an Element object that will host the isolated tree)\n     * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n     */\n    function IframeContextHandler() {\n      var _this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, IframeContextHandler);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(IframeContextHandler).call(this));\n\n      if (!isObject(props)) {\n        helper.error(\"ContextHandler expects an object on its constructor. \".concat(_typeof(props), \" passed\"));\n        return _possibleConstructorReturn(_this, false);\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(props, 'html')) {\n        helper.error('ContextHandler expects the html key on its constructor properties which is missing');\n        return _possibleConstructorReturn(_this, false);\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(props, 'css')) {\n        helper.error('ContextHandler expects the css key on its constructor properties which is missing');\n        return _possibleConstructorReturn(_this, false);\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(props, 'initParams')) {\n        helper.info('ContextHandler got null initParams');\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(props, 'host')) {\n        helper.error('ContextHandler expects the host key on its constructor properties which is missing');\n        return _possibleConstructorReturn(_this, false);\n      }\n\n      _this.isDOM = true;\n      var ownerDocument = props.host.ownerDocument;\n\n      if (!ownerDocument.getElementById('@kissmybutton/motorcortex/iframeContextHandler/css')) {\n        var seamlessCSS = \"\\n            iframe[seamless]{\\n                background-color: transparent;\\n                border: 0px none transparent;\\n                padding: 0px;\\n                overflow: hidden;\\n            }\\n            \";\n        var iframesCSS = ownerDocument.createElement('style');\n        iframesCSS.id = '@kissmybutton/motorcortex/iframeContextHandler/css';\n        iframesCSS.type = 'text/css';\n        var Head = ownerDocument.head || ownerDocument.getElementsByTagName('head')[0];\n\n        if (iframesCSS.styleSheet) {\n          iframesCSS.styleSheet.cssText = seamlessCSS;\n        } else {\n          iframesCSS.appendChild(ownerDocument.createTextNode(seamlessCSS));\n        }\n\n        Head.appendChild(iframesCSS);\n      } // Create an iframe:\n\n\n      var iframe = ownerDocument.createElement('iframe');\n      props.host.appendChild(iframe);\n      iframe.setAttribute('seamless', 'seamless');\n\n      if (Object.prototype.hasOwnProperty.call(props, 'containerParams')) {\n        if (Object.prototype.hasOwnProperty.call(props.containerParams, 'width')) {\n          iframe.setAttribute('width', props.containerParams.width);\n        }\n\n        if (Object.prototype.hasOwnProperty.call(props.containerParams, 'height')) {\n          iframe.setAttribute('height', props.containerParams.height);\n        }\n      } // Initialise the iframe\n\n\n      iframe.src = ''; // Put it in the document (but hidden):\n\n      var iframeDocument = iframe.contentWindow || iframe.contentDocument;\n\n      if (iframeDocument.document) {\n        iframeDocument = iframeDocument.document;\n      }\n\n      iframeDocument.write(renderTemplate(props.html, {\n        params: props.initParams\n      }));\n      var bodyFixCSS = \"\\n        body{\\n            padding:0;\\n            margin:0;\\n        }\\n        \";\n      var styleTag = iframeDocument.createElement('style');\n      styleTag.type = 'text/css';\n\n      if (styleTag.styleSheet) {\n        styleTag.styleSheet.cssText = renderTemplate(props.css, {\n          params: props.initParams\n        }) + bodyFixCSS;\n      } else {\n        styleTag.appendChild(ownerDocument.createTextNode(props.css + bodyFixCSS));\n      }\n\n      var head = iframeDocument.head || iframeDocument.getElementsByTagName('head')[0];\n      head.appendChild(styleTag);\n\n      if (Object.prototype.hasOwnProperty.call(props, 'fonts')) {\n        for (var i = 0; i < props.fonts.length; i++) {\n          var theFont = props.fonts[i];\n\n          if (theFont.type === 'google-font') {\n            var fontTag = iframeDocument.createElement('link');\n            fontTag.setAttribute('rel', 'stylesheet');\n            fontTag.setAttribute('href', theFont.src);\n            head.appendChild(fontTag);\n          }\n        }\n      }\n\n      _this.rootElement = iframe;\n      iframeDocument.close();\n      _this.context = {\n        document: iframeDocument,\n        window: iframe.contentWindow || iframe,\n        clipContainer: iframe,\n        rootElement: iframeDocument.body,\n        unmount: function unmount() {\n          props.host.removeChild(iframe);\n        },\n        getElements: _this.getElements.bind(_assertThisInitialized(_this)),\n        getMCID: _this.getMCID.bind(_assertThisInitialized(_this)),\n        setMCID: _this.setMCID.bind(_assertThisInitialized(_this)),\n        getElementSelectorByMCID: _this.getElementSelectorByMCID.bind(_assertThisInitialized(_this)),\n        getElementByMCID: _this.getElementByMCID.bind(_assertThisInitialized(_this)),\n        setCustomEntity: _this.setCustomEntity.bind(_assertThisInitialized(_this))\n      };\n      _this.elementsByMCID = {};\n      return _this;\n    }\n\n    return IframeContextHandler;\n  }(ContextHandler);\n\n  var WebComponentContextHandler =\n  /*#__PURE__*/\n  function (_ContextHandler) {\n    _inherits(WebComponentContextHandler, _ContextHandler);\n\n    /**\n     * @param {object} props - an object that should contain all of the following keys:\n     * - html (the html template to render)\n     * - css (the css template of the isolated tree)\n     * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n     * - host (an Element object that will host the isolated tree)\n     * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n     */\n    function WebComponentContextHandler() {\n      var _this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, WebComponentContextHandler);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WebComponentContextHandler).call(this));\n\n      if (!isObject(props)) {\n        helper.error(\"ContextHandler expects an object on its constructor. \".concat(_typeof(props), \" passed\"));\n        return _possibleConstructorReturn(_this, false);\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(props, 'html')) {\n        helper.error('ContextHandler expects the html key on its constructor properties which is missing');\n        return _possibleConstructorReturn(_this, false);\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(props, 'css')) {\n        helper.error('ContextHandler expects the css key on its constructor properties which is missing');\n        return _possibleConstructorReturn(_this, false);\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(props, 'host')) {\n        helper.error('ContextHandler expects the host key on its constructor properties which is missing');\n        return _possibleConstructorReturn(_this, false);\n      }\n\n      _this.isDOM = true;\n      var shadow = props.host.attachShadow({\n        mode: 'closed'\n      });\n      var wrapper = document.createElement('div');\n\n      if (Object.prototype.hasOwnProperty.call(props, 'containerParams')) {\n        if (Object.prototype.hasOwnProperty.call(props.containerParams, 'width')) {\n          wrapper.style.width = props.containerParams.width;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(props.containerParams, 'height')) {\n          wrapper.style.height = props.containerParams.height;\n        }\n      }\n\n      wrapper.innerHTML = renderTemplate(\"\".concat(props.html, \"<slot></slot>\"), {\n        params: props.initParams\n      });\n      shadow.appendChild(wrapper);\n      var styleTag = document.createElement('style');\n      styleTag.type = 'text/css';\n\n      if (styleTag.styleSheet) {\n        styleTag.styleSheet.cssText = renderTemplate(props.css, {\n          params: props.initParams\n        });\n      } else {\n        styleTag.appendChild(document.createTextNode(props.css));\n      }\n\n      shadow.appendChild(styleTag);\n      _this.fontTags = [];\n\n      if (Object.prototype.hasOwnProperty.call(props, 'fonts')) {\n        for (var i = 0; i < props.fonts.length; i++) {\n          var theFont = props.fonts[i];\n\n          if (theFont.type === 'google-font') {\n            var fontTag = document.createElement('link');\n            fontTag.setAttribute('rel', 'stylesheet');\n            fontTag.setAttribute('href', theFont.src);\n            document.getElementsByTagName('head')[0].appendChild(fontTag);\n\n            _this.fontTags.push(fontTag);\n          }\n        }\n      }\n\n      wrapper.style.overflow = 'hidden';\n      _this.rootElement = wrapper;\n      _this.context = {\n        document: document,\n        window: window,\n        clipContainer: _this.rootElement,\n        rootElement: wrapper,\n        unmount: function unmount() {\n          try {\n            props.host.removeChild(shadow);\n\n            for (var _i = 0; _i < this.fontTags.length; _i++) {\n              document.getElementsByTagName('head')[0].removeChild(this.fontTags[_i]);\n            }\n          } catch (er) {\n            helper.warning('The element of the Clip to be removed seems not to exist any more');\n          }\n        },\n        getElements: _this.getElements.bind(_assertThisInitialized(_this)),\n        getMCID: _this.getMCID.bind(_assertThisInitialized(_this)),\n        setMCID: _this.setMCID.bind(_assertThisInitialized(_this)),\n        getElementSelectorByMCID: _this.getElementSelectorByMCID.bind(_assertThisInitialized(_this)),\n        getElementByMCID: _this.getElementByMCID.bind(_assertThisInitialized(_this)),\n        setCustomEntity: _this.setCustomEntity.bind(_assertThisInitialized(_this))\n      };\n      _this.elementsByMCID = {};\n      return _this;\n    }\n\n    return WebComponentContextHandler;\n  }(ContextHandler);\n\n  var Clip$1 =\n  /*#__PURE__*/\n  function (_ExtendableClip) {\n    _inherits(Clip, _ExtendableClip);\n\n    /**\n     * @param {object} props - an object that should contain all of the following keys:\n     * - html (the html template to render)\n     * - css (the css template of the isolated tree)\n     * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n     * - host (an Element object that will host the isolated tree)\n     * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n     */\n    function Clip() {\n      var _this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var oldProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, Clip);\n\n      var attrsToPass;\n      var propsToUse;\n      /*\n          backwards compatibility. If the user doesn't pass a second argument on the constructor then this is\n          the new way of initialising a Group (only props).\n          */\n\n      if (oldProps === null) {\n        attrsToPass = {};\n        propsToUse = props;\n      } else {\n        // else, in case the user has passed two arguments then both should be used\n        attrsToPass = props;\n        propsToUse = oldProps;\n      }\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Clip).call(this, attrsToPass, propsToUse));\n      propsToUse = _objectSpread2({}, propsToUse, {\n        html: _this.html !== '' ? _this.html : propsToUse.html,\n        css: _this.css !== '' ? _this.css : propsToUse.css,\n        fonts: _this.fonts.length > 0 ? _this.fonts : propsToUse.fonts\n      }); // that means the Clip is hosted or, in other words a host has been\n      // provided on the props (and not a selector)\n      // this.isHostedClip = true;\n\n      var clipType = selfContainedContextHandler;\n      _this.clipType = clipType;\n      var ContextHanlder = null;\n\n      if (document.head.createShadowRoot || document.head.attachShadow) {\n        ContextHanlder = WebComponentContextHandler;\n      } else {\n        ContextHanlder = IframeContextHandler;\n      } // console.log(`this.id: ${this.id}, Class: ${this.constructor.name}, this.html: ${this.html}`)\n\n\n      var contextHanlder = new ContextHanlder(propsToUse);\n      _this.ownContext = _objectSpread2({}, contextHanlder.context, {\n        isHostedClip: _this.isHostedClip\n      });\n      _this.iframe = contextHanlder.iframeElement;\n      _this.forceExportIncidents = true;\n\n      _this.onAfterRender();\n\n      return _this;\n    }\n\n    _createClass(Clip, [{\n      key: \"onAfterRender\",\n      value: function onAfterRender() {// implement here\n      }\n    }, {\n      key: \"exportConstructionArguments\",\n      value: function exportConstructionArguments() {\n        // TODO also export CSS and fonts taking in account the potential existance\n        // of them on the get methods\n        return {\n          attrs: this.attrs,\n          props: _objectSpread2({}, this.props, {\n            host: undefined,\n            html: this.ownContext.rootElement.innerHTML\n          })\n        };\n      }\n    }, {\n      key: \"setCustomEntity\",\n      value: function setCustomEntity(id, entity) {\n        var classes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        return this.context.setCustomEntity(id, entity, classes);\n      }\n    }, {\n      key: \"html\",\n      get: function get() {\n        return '';\n      }\n    }, {\n      key: \"css\",\n      get: function get() {\n        return '';\n      }\n    }, {\n      key: \"fonts\",\n      get: function get() {\n        return [];\n      }\n    }, {\n      key: \"rootElement\",\n      get: function get() {\n        return this.ownContext.clipContainer;\n      }\n    }]);\n\n    return Clip;\n  }(ExtendableClip);\n\n  var HTMLFragmentContextHandler =\n  /*#__PURE__*/\n  function (_ContextHandler) {\n    _inherits(HTMLFragmentContextHandler, _ContextHandler);\n\n    /**\n     * @param {object} props - an object that should contain all of the following keys:\n     * - html (the html template to render)\n     * - css (the css template of the isolated tree)\n     * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n     * - host (an Element object that will host the isolated tree)\n     * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n     */\n    function HTMLFragmentContextHandler() {\n      var _this;\n\n      var originalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, HTMLFragmentContextHandler);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLFragmentContextHandler).call(this));\n\n      var props = _objectSpread2({}, originalProps);\n\n      if (!isObject(props)) {\n        helper.error(\"HTMLFragmentContextHandler expects an object on its constructor. \".concat(_typeof(props), \" passed\"));\n        return _possibleConstructorReturn(_this, false);\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(props, 'html')) {\n        props.html = '';\n      }\n\n      _this.isDOM = true;\n      var fragment = document.createDocumentFragment();\n      var wrapper = document.createElement('div');\n\n      if (Object.prototype.hasOwnProperty.call(props, 'containerParams')) {\n        if (Object.prototype.hasOwnProperty.call(props, 'width')) {\n          wrapper.style.width = props.containerParams.width;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(props, 'height')) {\n          wrapper.style.height = props.containerParams.height;\n        }\n      }\n\n      wrapper.innerHTML = renderTemplate(props.html, {\n        params: props.initParams\n      });\n      fragment.appendChild(wrapper);\n      wrapper.style.overflow = 'hidden';\n      _this.rootElement = wrapper;\n      /* TODO make the context definition more generic so always the setCustomEntity gets set\n          along with the rest of the required methods, so it can be used on the afterRender method\n          of the DOMClip.\n          The Clip will expose a method \"setCustomEntity\" that will set custom entities.\n          TEST\n          */\n\n      _this.context = {\n        document: document,\n        window: window,\n        clipContainer: _this.rootElement,\n        rootElement: wrapper,\n        unmount: function unmount() {\n          props.host.removeChild(fragment);\n        },\n        getElements: _this.getElements.bind(_assertThisInitialized(_this)),\n        getMCID: _this.getMCID.bind(_assertThisInitialized(_this)),\n        setMCID: _this.setMCID.bind(_assertThisInitialized(_this)),\n        getElementSelectorByMCID: _this.getElementSelectorByMCID.bind(_assertThisInitialized(_this)),\n        getElementByMCID: _this.getElementByMCID.bind(_assertThisInitialized(_this)),\n        setCustomEntity: _this.setCustomEntity.bind(_assertThisInitialized(_this)),\n        fragment: true\n      };\n      _this.elementsByMCID = {};\n      return _this;\n    }\n\n    return HTMLFragmentContextHandler;\n  }(ContextHandler);\n\n  var FragmentedClip =\n  /*#__PURE__*/\n  function (_ExtendableClip) {\n    _inherits(FragmentedClip, _ExtendableClip);\n\n    function FragmentedClip() {\n      var _this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var oldProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, FragmentedClip);\n\n      var attrsToPass;\n      var propsToUse;\n      /*\n          backwards compatibility. If the user doesn't pass a second argument on the constructor then this is\n          the new way of initialising a Group (only props).\n          */\n\n      if (oldProps === null) {\n        attrsToPass = {};\n        propsToUse = props;\n      } else {\n        // else, in case the user has passed two arguments then both should be used\n        attrsToPass = props;\n        propsToUse = oldProps;\n      }\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(FragmentedClip).call(this, attrsToPass, propsToUse));\n      var contextHanlder = new HTMLFragmentContextHandler(_objectSpread2({}, propsToUse, {\n        html: Object.prototype.hasOwnProperty.call(propsToUse, 'html') ? propsToUse.html : _this.html,\n        css: Object.prototype.hasOwnProperty.call(propsToUse, 'css') ? propsToUse.css : _this.css,\n        fonts: Object.prototype.hasOwnProperty.call(propsToUse, 'fonts') ? propsToUse.fonts : _this.fonts\n      }));\n      _this.ownContext = _objectSpread2({}, contextHanlder.context, {\n        isHostedClip: false\n      });\n      _this.iframe = contextHanlder.iframeElement;\n      _this.forceExportIncidents = true;\n\n      _this.onDOMCLipInitialise(); // as soon as a Fragmented Clip is been intialised that means the Descriptive\n      // Clip has a selector and not a host. Thus is not a hosted clip\n      // this.isHostedClip = false;\n\n\n      return _this;\n    }\n\n    _createClass(FragmentedClip, [{\n      key: \"exportConstructionArguments\",\n      value: function exportConstructionArguments() {\n        // TODO also export CSS and fonts taking in account the potential existance\n        // of them on the get methods\n        // console.log(this.ownContext.rootElement.innerHTML);\n        return {\n          attrs: this.attrs,\n          props: _objectSpread2({}, this.props, {\n            html: this.ownContext.rootElement.innerHTML\n          })\n        };\n      }\n    }, {\n      key: \"onDOMCLipInitialise\",\n      value: function onDOMCLipInitialise() {// implement here\n      }\n    }, {\n      key: \"rootElement\",\n      get: function get() {\n        return this.ownContext.clipContainer;\n      }\n    }]);\n\n    return FragmentedClip;\n  }(ExtendableClip);\n\n  var NullClip =\n  /*#__PURE__*/\n  function () {\n    function NullClip() {\n      _classCallCheck(this, NullClip);\n    }\n\n    _createClass(NullClip, [{\n      key: \"addIncident\",\n      value: function addIncident() {\n        return {\n          result: true,\n          execute: function execute() {}\n        };\n      }\n    }, {\n      key: \"moveIncident\",\n      value: function moveIncident() {\n        return {\n          result: true,\n          execute: function execute() {}\n        };\n      }\n    }, {\n      key: \"removeIncident\",\n      value: function removeIncident() {\n        return {\n          result: true,\n          execute: function execute() {}\n        };\n      }\n    }, {\n      key: \"resizeIncident\",\n      value: function resizeIncident() {\n        return {\n          result: true,\n          execute: function execute() {}\n        };\n      }\n    }, {\n      key: \"getIncidentsByChannel\",\n      value: function getIncidentsByChannel() {\n        return {};\n      }\n    }, {\n      key: \"flash\",\n      value: function flash() {}\n    }, {\n      key: \"_resize\",\n      value: function _resize() {}\n    }, {\n      key: \"onProgress\",\n      value: function onProgress() {}\n    }, {\n      key: \"duration\",\n      get: function get() {\n        return 0;\n      }\n    }]);\n\n    return NullClip;\n  }();\n\n  var easingRule = [{\n    type: 'string',\n    optional: true,\n    default: 'linear',\n    enum: ['linear', 'easeInQuad', 'easeOutQuad', 'easeInOutQuad', 'easeInCubic', 'easeOutCubic', 'easeInOutCubic', 'easeInQuart', 'easeOutQuart', 'easeInOutQuart', 'easeInQuint', 'easeOutQuint', 'easeInOutQuint', 'easeInSine', 'easeOutSine', 'easeInOutSine', 'easeInExpo', 'easeOutExpo', 'easeInOutExpo', 'easeInCirc', 'easeOutCirc', 'easeInOutCirc', 'easeInElastic', 'easeOutElastic', 'easeInOutElastic', 'easeInBack', 'easeOutBack', 'easeInOutBack', 'easeInBounce', 'easeOutBounce', 'easeInOutBounce']\n  }, {\n    type: 'array',\n    optional: true,\n    length: 4,\n    items: {\n      type: 'number'\n    }\n  }];\n  var idRule = {\n    type: 'string',\n    optional: true\n  };\n  var selectorRule = {\n    type: 'string',\n    optional: false\n  };\n  var hostRule = {\n    type: 'any',\n    optional: false\n  };\n  var durationRule = {\n    type: 'number',\n    optional: false,\n    integer: true,\n    positive: true\n  };\n  var optionalStringRule = {\n    type: 'string',\n    optional: true\n  };\n  var fontsRule = {\n    type: 'array',\n    optional: true,\n    itams: {\n      type: 'object',\n      props: {\n        type: 'string',\n        url: 'string'\n      }\n    }\n  };\n  var audioSourcesRule = {\n    type: 'array',\n    items: {\n      type: 'object',\n      strict: true,\n      props: {\n        src: 'string',\n        id: 'string',\n        mcid: {\n          type: 'string',\n          optional: true\n        },\n        classes: {\n          type: 'array',\n          optional: true,\n          items: 'string'\n        },\n        base64: {\n          type: 'boolean',\n          optional: true\n        }\n      }\n    },\n    optional: true\n  };\n  var incidentPropsRule = {\n    props: {\n      type: 'object',\n      props: {\n        id: idRule,\n        selector: _objectSpread2({}, selectorRule, {\n          optional: true\n        }),\n        // can have no selector as it might inherit it from Group\n        easing: easingRule,\n        duration: durationRule,\n        startFrom: {\n          type: 'number',\n          integer: true,\n          min: 0,\n          optional: true\n        },\n        repeats: {\n          type: 'number',\n          integer: true,\n          min: 1,\n          optional: true\n        },\n        hiatus: {\n          type: 'number',\n          integer: true,\n          min: 0,\n          optional: true\n        },\n        delay: {\n          type: 'number',\n          integer: true,\n          min: 0,\n          optional: true\n        }\n      }\n    }\n  };\n  var containerParamsRule = {\n    type: 'object',\n    optional: true,\n    props: {\n      width: {\n        type: 'string',\n        optional: true\n      },\n      height: {\n        type: 'string',\n        optional: true\n      }\n    }\n  };\n  var audioOnClipsRule = {\n    type: 'string',\n    enum: ['on', 'off'],\n    optional: true\n  };\n  var clipPropsRule = {\n    props: [{\n      type: 'object',\n      strict: true,\n      props: {\n        id: idRule,\n        selector: _objectSpread2({}, selectorRule, {\n          optional: true\n        }),\n        easing: easingRule,\n        html: optionalStringRule,\n        css: optionalStringRule,\n        audioSources: audioSourcesRule,\n        audio: audioOnClipsRule,\n        containerParams: containerParamsRule,\n        fonts: fontsRule\n      }\n    }, {\n      type: 'object',\n      strict: true,\n      props: {\n        id: idRule,\n        host: hostRule,\n        html: optionalStringRule,\n        css: optionalStringRule,\n        audioSources: audioSourcesRule,\n        audio: audioOnClipsRule,\n        containerParams: containerParamsRule,\n        fonts: fontsRule\n      }\n    }, {\n      type: 'object',\n      strict: true,\n      props: {\n        root: {\n          type: 'boolean',\n          optional: true\n        },\n        id: idRule,\n        audioSources: audioSourcesRule,\n        audio: _objectSpread2({}, audioOnClipsRule, {\n          enum: ['on']\n        })\n      }\n    }]\n  };\n  var groupPropsRule = {\n    selector: _objectSpread2({}, selectorRule, {\n      optional: true,\n      strict: true\n    })\n  };\n\n  var _TARGETTYPES = {\n    _DECISIONAUTHORITY: 'mc.descriptive.decisionAuthority'\n  };\n\n  function editAttributes(payload) {\n    payload.descriptor.value = function editAttributesFunct(newAttrs) {\n      var checkIfBelongsToClip = this.putMessageOnPipe('checkForClip', {}, _TARGETTYPES._DECISIONAUTHORITY, {\n        selfExecute: true,\n        direction: _DIRECTIONS._UP\n      });\n\n      if (checkIfBelongsToClip.response === true) {\n        // if the Group belongs on a Clip\n        return this.manageEditAttrProps(newAttrs, 'attrs');\n      }\n\n      this.attrs = newAttrs;\n      return {\n        result: true\n      };\n    };\n  }\n\n  function editProperties(payload) {\n    payload.descriptor.value = function editPropertiesFunct(newProps) {\n      var valitation = helper.validateProps({\n        props: newProps\n      }, this.propsValidationRules, this.constructor);\n\n      if (!valitation.result) {\n        return valitation;\n      }\n\n      var checkIfBelongsToClip = this.putMessageOnPipe('checkForClip', {}, _TARGETTYPES._DECISIONAUTHORITY, {\n        selfExecute: true,\n        direction: _DIRECTIONS._UP\n      });\n\n      if (checkIfBelongsToClip.response === true) {\n        // if the Group belongs on a Clip\n        return this.manageEditAttrProps(newProps, 'props');\n      }\n\n      this.props = newProps;\n      return {\n        result: true\n      };\n    };\n  }\n\n  function getElements(payload) {\n    payload.descriptor.value = function getElementsFunct() {\n      if (this.props.host !== null && this.props.host !== undefined) {\n        return [this.props.host];\n      }\n\n      if (!this.hasParent) {\n        return [];\n      }\n\n      var checkIfBelongsToClip = this.putMessageOnPipe('checkForClip', {}, _TARGETTYPES._DECISIONAUTHORITY, {\n        selfExecute: true,\n        direction: _DIRECTIONS._UP\n      });\n\n      if (checkIfBelongsToClip.response === false) {\n        return [];\n      }\n\n      var elementsResponse = this.putMessageOnPipe('getElements', {\n        selector: this.selector()\n      }, _TARGETTYPES._DECISIONAUTHORITY, {\n        selfExecute: false,\n        direction: _DIRECTIONS._UP\n      });\n      return elementsResponse.response;\n    };\n  }\n\n  /**\n   * resize method resizes the Incident by maintaining proportions between delay, duraiton and hiatus.\n   * also, the new duration will be the full new duration of the Incident taking in considration\n   * all delay, duration and hiatus along with repeats\n   * */\n\n  function resize(payload) {\n    payload.descriptor.value = function resizeFunct(newSize) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        check: true\n      };\n\n      if (newSize === this.duration) {\n        return {\n          result: true,\n          meta: {\n            unprocessed: true\n          }\n        };\n      }\n\n      if (newSize <= 0) {\n        return {\n          result: false,\n          reason: 'Size must always be > 0'\n        };\n      }\n\n      if (options.check === true && this.hasParent) {\n        var mcCheck = this.putMessageOnPipe('checkResize', {\n          id: this.id,\n          newSize: newSize,\n          fraction: newSize / this.duration\n        }, _TARGETTYPES._DECISIONAUTHORITY, {\n          selfExecute: false,\n          direction: _DIRECTIONS._UP\n        });\n\n        if (mcCheck.response.result === false) {\n          return mcCheck.response;\n        }\n      }\n\n      this.setNewDuration(newSize);\n      return {\n        result: true\n      };\n    };\n  }\n\n  function selector(payload) {\n    payload.descriptor.value = function selectorFunct() {\n      if (this.inheritedSelector === null) {\n        // if the Incident has no parent selector inherited\n        if (!Object.prototype.hasOwnProperty.call(this.props, 'selector')) {\n          // and does not have a selector neither\n          return null; // then its selector is null\n        }\n\n        return this.props.selector; // else, if it has a selector that's its final selector\n      } // else if there is an inherited selector\n\n\n      if (!Object.prototype.hasOwnProperty.call(this.props, 'selector')) {\n        // and does not have a selector of its own\n        return this.inheritedSelector; // then its selector is equal to the inherited selector\n      } // else, if it both has an inherited and an own selector\n\n\n      if (this.props.selector.charAt(0) === '&') {\n        return this.inheritedSelector + this.props.selector.substring(1);\n      }\n\n      return \"\".concat(this.inheritedSelector, \" \").concat(this.props.selector);\n    };\n  }\n\n  var DescriptiveGroup = _decorate(null, function (_initialize, _Node) {\n    var DescriptiveGroup =\n    /*#__PURE__*/\n    function (_Node2) {\n      _inherits(DescriptiveGroup, _Node2);\n\n      function DescriptiveGroup() {\n        var _this;\n\n        var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        _classCallCheck(this, DescriptiveGroup);\n\n        if (props === null) {\n          _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveGroup).call(this, attrs));\n\n          _initialize(_assertThisInitialized(_this));\n\n          _this.attrs = {};\n          _this.props = attrs;\n        } else {\n          _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveGroup).call(this, props));\n\n          _initialize(_assertThisInitialized(_this));\n\n          _this.attrs = attrs;\n          _this.props = props;\n        }\n\n        var propsValidation = helper.validateProps(_this.props, groupPropsRule, _this.constructor);\n\n        if (propsValidation.result === false) {\n          return _possibleConstructorReturn(_this, propsValidation);\n        }\n\n        _this.attrsValidationRules = {};\n        _this.propsValidationRules = groupPropsRule;\n        _this._inheritedSelector = null; // passiveAddition is a flag property indicating that any Incident to be\n        // added to the Clip will be passive. It initialises with value = false\n        // on DescriptiveGroup where it's originaly defined.\n        // Here we change its value just before the buildTree method execution\n        // so all Incidents added on it get the \"passive\" flag and don't get\n        // exported on the exportDefinition method. Once the buildTree method\n        // finishes we set it back to its original value (false)\n\n        _this.passiveAddition = true;\n\n        _this._buildTree();\n\n        _this.passiveAddition = false;\n        return _possibleConstructorReturn(_this);\n      }\n\n      return DescriptiveGroup;\n    }(_Node);\n\n    return {\n      F: DescriptiveGroup,\n      d: [{\n        kind: \"field\",\n        static: true,\n        key: \"Incident\",\n        value: function value() {\n          return Group;\n        }\n      }, {\n        kind: \"field\",\n        static: true,\n        key: \"plugin_npm_name\",\n        value: function value() {\n          return 'motor-cortex-js';\n        }\n      }, {\n        kind: \"field\",\n        static: true,\n        key: \"Channel\",\n        value: function value() {\n          return Channel;\n        }\n      }, {\n        kind: \"field\",\n        static: true,\n        key: \"ClassName\",\n        value: function value() {\n          return 'Group';\n        }\n      }, {\n        kind: \"field\",\n        static: true,\n        key: \"isGroup\",\n        value: function value() {\n          return true;\n        }\n      }, {\n        kind: \"method\",\n        decorators: [editAttributes],\n        key: \"editAttributes\",\n        value: function editAttributes() {}\n      }, {\n        kind: \"method\",\n        decorators: [editProperties],\n        key: \"editProperties\",\n        value: function editProperties() {}\n      }, {\n        kind: \"method\",\n        decorators: [resize],\n        key: \"resize\",\n        value: function resize() {}\n      }, {\n        kind: \"method\",\n        decorators: [selector],\n        key: \"selector\",\n        value: function selector() {}\n      }, {\n        kind: \"method\",\n        decorators: [getElements],\n        key: \"getElements\",\n        value: function getElements() {}\n      }, {\n        kind: \"method\",\n        key: \"_buildTree\",\n        value: function _buildTree() {\n          this.buildTree();\n        }\n      }, {\n        kind: \"method\",\n        key: \"_rebuildTree\",\n        value: function _rebuildTree() {\n          // remove all direct passive incidents as they might be dependent on the edited attrs/props\n          for (var id in this.children) {\n            var theChild = this.children[id];\n\n            if (theChild.leaf.passive === true) {\n              this.removeIncident(theChild.id);\n            }\n          } // run buildTree again\n\n\n          this.passiveAddition = true;\n          this.buildTree();\n          this.passiveAddition = false;\n        }\n      }, {\n        kind: \"method\",\n        key: \"buildTree\",\n        value: function buildTree() {}\n      }, {\n        kind: \"method\",\n        key: \"manageEditAttrProps\",\n        value: function manageEditAttrProps(newAttrs, type) {\n          // get a permanent reference to its parent node\n          var parentNode = this.parentNode; // get the position of the Incident within its parent\n\n          var position = parentNode.getLeafPosition(this.id); // keep a backup of the current attrs / props\n\n          var oldAttrs = JSON.parse(JSON.stringify(this[type]));\n          this[type] = newAttrs; // first detach the Incident from its parent\n\n          parentNode.removeIncident(this.id); // remove all direct passive incidents as they might be dependent on the edited attrs/props\n\n          this._rebuildTree(); // try to add the altered Group\n\n\n          var res = parentNode.addIncident(this, position);\n\n          if (res.result === false) {\n            this[type] = oldAttrs;\n\n            this._rebuildTree();\n\n            parentNode.addIncident(this, position);\n            return res;\n          }\n\n          return res;\n        }\n      }, {\n        kind: \"method\",\n        key: \"detachFromParent\",\n        value: function detachFromParent() {\n          _get(_getPrototypeOf(DescriptiveGroup.prototype), \"detachFromParent\", this).call(this);\n\n          this.inheritedSelector = null;\n        }\n      }, {\n        kind: \"get\",\n        key: \"inheritedSelector\",\n        value: function inheritedSelector() {\n          return this._inheritedSelector;\n        }\n      }, {\n        kind: \"set\",\n        key: \"inheritedSelector\",\n        value: function inheritedSelector(value) {\n          this._inheritedSelector = value;\n\n          for (var id in this.children) {\n            var theChild = this.children[id].leaf;\n            theChild.inheritedSelector = this.selector();\n          }\n        }\n      }, {\n        kind: \"get\",\n        key: \"selectorToPassToChildren\",\n        value: function selectorToPassToChildren() {\n          return this.selector();\n        }\n        /**\n         * The purpose of this method is to export a portable definition that can be\n         * later used in order to rebuild the Inicdent at any time\n         */\n\n      }, {\n        kind: \"method\",\n        key: \"exportDefinition\",\n        value: function exportDefinition() {\n          var toReturn = {\n            ClassName: this.constructor.ClassName,\n            plugin_npm_name: this.constructor.plugin_npm_name,\n            attrs: this.attrs,\n            props: this.props,\n            incidents: {},\n            duration: this.duration\n          };\n\n          for (var id in this.children) {\n            var theChild = this.children[id];\n\n            if (theChild.leaf.passive === true) {\n              continue;\n            }\n\n            toReturn.incidents[id] = {\n              id: theChild.id,\n              position: theChild.position,\n              leaf: theChild.leaf.exportDefinition()\n            };\n          }\n\n          return toReturn;\n        }\n        /**\n         * The purpose of this method is to export an object with \"live\" / real reference\n         * to the Class of the Incident so it can directly by used for Clip creation\n         * */\n\n      }, {\n        kind: \"method\",\n        key: \"exportLiveDefinition\",\n        value: function exportLiveDefinition() {\n          var toReturn = {\n            Class: this.constructor,\n            attrs: JSON.parse(JSON.stringify(this.attrs)),\n            props: JSON.parse(JSON.stringify(this.props)),\n            incidents: {}\n          };\n\n          for (var id in this.children) {\n            var theChild = this.children[id];\n\n            if (theChild.leaf.passive === true) {\n              continue;\n            }\n\n            toReturn.incidents[id] = {\n              id: theChild.id,\n              position: theChild.position,\n              leaf: theChild.leaf.exportLiveDefinition()\n            };\n          }\n\n          return toReturn;\n        }\n      }, {\n        kind: \"method\",\n        key: \"addIncident\",\n        value: function addIncident(descriptiveIncident, position) {\n          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n            check: true\n          };\n          descriptiveIncident.inheritedSelector = this.selectorToPassToChildren;\n\n          if (options.check === true) {\n            var initialCheck = _get(_getPrototypeOf(DescriptiveGroup.prototype), \"checkAddition\", this).call(this, descriptiveIncident, position);\n\n            if (initialCheck.result === false) {\n              descriptiveIncident.inheritedSelector = null;\n              return initialCheck;\n            }\n            /* Check for null or relative selector Incidents with no inherited selector */\n\n\n            var checkIfBelongsToClip = this.putMessageOnPipe('checkForClip', {}, _TARGETTYPES._DECISIONAUTHORITY, {\n              selfExecute: true,\n              direction: _DIRECTIONS._UP\n            });\n\n            if (checkIfBelongsToClip.response === true) {\n              // if the Group belongs on a Clip\n              var selectorsCheck = descriptiveIncident.putMessageOnPipe('checkForInvalidSelectors', {}, null, {\n                selfExecute: true,\n                direction: _DIRECTIONS._DOWN\n              });\n\n              if (selectorsCheck.length > 0) {\n                var errors = [];\n\n                for (var i = 0; i < selectorsCheck.length; i++) {\n                  errors.push(selectorsCheck[i].response);\n                }\n\n                return {\n                  result: false,\n                  errors: errors\n                };\n              }\n            } // sends the check request to its root, either a headless root or a Descriptive Clip\n\n\n            var mcCheck = this.putMessageOnPipe('checkAddition', {\n              incident: descriptiveIncident,\n              millisecond: position,\n              parentGroupId: this.id\n            }, _TARGETTYPES._DECISIONAUTHORITY, {\n              selfExecute: true,\n              direction: _DIRECTIONS._UP\n            });\n\n            if (mcCheck.response.result === false) {\n              descriptiveIncident.inheritedSelector = null;\n              return mcCheck.response;\n            }\n          } // if the passiveAddition flag is true we set the passive flag of the Incident\n          // to true before adding it to our Group\n\n\n          if (this.passiveAddition === true) {\n            descriptiveIncident.passive = true;\n          }\n\n          var res = this.addChild(descriptiveIncident, position);\n\n          if (res.result === false) {\n            descriptiveIncident.inheritedSelector = null;\n          }\n\n          return res;\n        }\n        /**\n         * @param input - can either be object or id\n         * */\n\n      }, {\n        kind: \"method\",\n        key: \"moveIncident\",\n        value: function moveIncident(input, position) {\n          var id = input;\n\n          if (_typeof(input) === 'object') {\n            id = input.id;\n          }\n\n          var initialCheck = _get(_getPrototypeOf(DescriptiveGroup.prototype), \"checkEditPosition\", this).call(this, id, position);\n\n          if (initialCheck.result === false) {\n            return initialCheck;\n          }\n\n          var originalPosition = this.getLeafPosition(id);\n          var positionDelta = position - originalPosition;\n\n          if (positionDelta === 0) {\n            return {\n              result: true\n            };\n          }\n\n          var mcCheck = this.putMessageOnPipe('checkMove', {\n            id: id,\n            millisecond: position,\n            positionDelta: positionDelta,\n            parentGroupId: this.id\n          }, _TARGETTYPES._DECISIONAUTHORITY, {\n            selfExecute: true,\n            direction: _DIRECTIONS._UP\n          });\n\n          if (mcCheck.response.result === false) {\n            return mcCheck.response;\n          }\n\n          var res = this.editPosition(id, position);\n          return res;\n        }\n      }, {\n        kind: \"method\",\n        key: \"removeIncident\",\n        value: function removeIncident(input) {\n          var id = input;\n\n          if (_typeof(input) === 'object') {\n            id = input.id;\n          }\n\n          var initialCheck = _get(_getPrototypeOf(DescriptiveGroup.prototype), \"checkRemoveChild\", this).call(this, id);\n\n          if (initialCheck.result === false) {\n            return initialCheck;\n          }\n\n          var mcCheck = this.putMessageOnPipe('checkDeletion', {\n            id: id,\n            parentGroupId: this.id\n          }, _TARGETTYPES._DECISIONAUTHORITY, {\n            selfExecute: true,\n            direction: _DIRECTIONS._UP\n          });\n\n          if (mcCheck.response.result === false) {\n            return mcCheck.response;\n          }\n\n          var res = this.removeChild(id);\n          return res;\n        }\n        /** ************************* HANDLING METHODS ****************************** */\n        // eslint-disable-next-line no-unused-vars\n\n      }, {\n        kind: \"method\",\n        key: \"handleCheckForClip\",\n        value: function handleCheckForClip(target, payload) {\n          if (this.hasParent) {\n            return this.bypass();\n          }\n\n          return false;\n        } // eslint-disable-next-line no-unused-vars\n\n      }, {\n        kind: \"method\",\n        key: \"handleCheckAddition\",\n        value: function handleCheckAddition(target, payload) {\n          /*\n              The DescriptiveGroup handles the checkAddition command which has the UP\n              direction. If the DG has a parent it forwards the command to it. If not\n              it just returns true, as it is a deadless tree\n              */\n          if (this.hasParent) {\n            return this.bypass();\n          }\n\n          return {\n            result: true\n          };\n        } // eslint-disable-next-line no-unused-vars\n\n      }, {\n        kind: \"method\",\n        key: \"handleCheckMove\",\n        value: function handleCheckMove(target, payload) {\n          if (this.hasParent) {\n            return this.bypass();\n          }\n\n          return {\n            result: true\n          };\n        } // eslint-disable-next-line no-unused-vars\n\n      }, {\n        kind: \"method\",\n        key: \"handleCheckDeletion\",\n        value: function handleCheckDeletion(target, payload) {\n          if (this.hasParent) {\n            return this.bypass();\n          }\n\n          return {\n            result: true\n          };\n        } // eslint-disable-next-line no-unused-vars\n\n      }, {\n        kind: \"method\",\n        key: \"handleCheckResize\",\n        value: function handleCheckResize(target, payload) {\n          if (this.hasParent) {\n            return this.bypass();\n          }\n\n          return {\n            result: true\n          };\n        }\n      }]\n    };\n  }, Node);\n\n  var Playable =\n  /*#__PURE__*/\n  function (_DescriptiveGroup) {\n    _inherits(Playable, _DescriptiveGroup);\n\n    function Playable(attrs, props) {\n      var _this;\n\n      _classCallCheck(this, Playable);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Playable).call(this, attrs, props));\n      _this.runTimeInfo = {\n        currentMillisecond: 0,\n        state: 'idle' // supported states: idle, playing, paused, blocked, armed\n\n      };\n      /**\n            @member {object} - listeners are functions to be executed on time change of the Clip.\n            It has the following format:\n           listeners: {\n              listener_id: {\n                       funct : the function to be executed\n                       threshold : the threshold of delta\n                       roundTo : round millisecond\n                   },\n                   listener_id: {\n                       funct : the function to be executed\n                       threshold : the threshold of delta\n                       roundTo : round millisecond\n                   },\n                   ...\n             }\n             */\n\n      _this.listeners = {}; // previousTimeStamp is a property holding the last timestamp that the\n      // requestAnimationFrame ran\n\n      _this.previousTimeStamp = -1;\n      _this.speed = 1;\n      return _this;\n    }\n    /** ********************* execution methods  *********************\n     *************************************************************** */\n\n\n    _createClass(Playable, [{\n      key: \"_setState\",\n      value: function _setState(newState) {\n        if (newState !== this.runTimeInfo.state) {\n          this.runTimeInfo.state = newState; // the only timer and the only responsible for Clip execution is the Clip\n          // All Incidents contained on a Clip are been executed by the Clip itself via its channels.\n          // Thus, the only Incidents that need to know about the state of the root Clip\n          // at any time are only the Clips\n\n          this.putMessageOnPipe('setState', newState, 'Clips', {\n            selfExecute: false,\n            direction: _DIRECTIONS._DOWN\n          });\n\n          for (var key in this.listeners) {\n            var listner = this.listeners[key];\n            listner.funct(this.runTimeInfo.currentMillisecond, newState);\n          }\n        }\n      }\n    }, {\n      key: \"handleSetState\",\n      value: function handleSetState(target, payload) {\n        this._setState(payload);\n      } // execution methods\n\n    }, {\n      key: \"play\",\n      value: function play() {\n        var _this2 = this;\n\n        var debug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        if (this.runTimeInfo.state === 'idle' || this.runTimeInfo.state === 'paused' || this.runTimeInfo.state === 'armed' || this.runTimeInfo.state === 'transitional' || this.runTimeInfo.state === 'blocked') {\n          if (this.runTimeInfo.state === 'paused') {\n            var delta = new Date().getTime() - this.pauseMoment;\n            this.previousTimeStamp += delta;\n          }\n\n          this._setState('playing');\n\n          this.onPlay();\n\n          if (debug === false) {\n            window.requestAnimationFrame(function (timestamp) {\n              _this2.step(timestamp);\n            });\n          }\n        }\n      }\n    }, {\n      key: \"pause\",\n      value: function pause() {\n        if (this.runTimeInfo.state === 'playing') {\n          this._setState('paused');\n\n          this.pauseMoment = new Date().getTime();\n          this.onWait();\n        }\n      }\n      /* armed state means the Clip is on paused state after transition */\n\n    }, {\n      key: \"arm\",\n      value: function arm() {\n        if (this.runTimeInfo.state === 'transitional') {\n          this._setState('armed');\n        }\n      }\n    }, {\n      key: \"complete\",\n      value: function complete() {\n        this._setState('idle');\n\n        this.previousTimeStamp = -1;\n      }\n      /* in order to start a journey via the TimeCapsule the Playable needs first to stop */\n\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        this._setState('transitional');\n\n        this.previousTimeStamp = -1;\n      }\n    }, {\n      key: \"block\",\n      value: function block() {\n        this._setState('blocked');\n\n        this.previousTimeStamp = -1;\n      }\n    }, {\n      key: \"onPlay\",\n      value: function onPlay() {}\n    }, {\n      key: \"onWait\",\n      value: function onWait() {}\n    }, {\n      key: \"playableProgress\",\n      value: function playableProgress(fraction, millisecond) {\n        if (this.isTheRootClip) {\n          for (var key in this.listeners) {\n            var listner = this.listeners[key]; // if the listener is only for state change continue\n\n            if (listner.onlyOnStateChange === true) {\n              continue;\n            } // console.log(`Math.abs(${milliseconds} + ${listner.cavaDelta} - ${this.runTimeInfo.currentMillisecond}) > ${listner.threshold}`);\n\n\n            if (Math.abs(millisecond + listner.cavaDelta - this.runTimeInfo.currentMillisecond) > listner.threshold) {\n              listner.funct(roundNumberTo(millisecond, listner.roundTo), this.runTimeInfo.state);\n              listner.cavaDelta = 0;\n            } else {\n              listner.cavaDelta += Math.abs(millisecond - this.runTimeInfo.currentMillisecond);\n            }\n          }\n\n          this.onProgress(fraction, millisecond);\n          this.runTimeInfo.currentMillisecond = millisecond;\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"step\",\n      // *******************************************************\n      // STEP FUNCTION\n      value: function step(timestamp) {\n        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (this.runTimeInfo.state !== 'playing') {\n          return;\n        }\n\n        var that = this;\n\n        if (this.previousTimeStamp === -1) {\n          this.previousTimeStamp = timestamp;\n        } // progressStep is the progress made from previousTimeStamp both in milliseconds and in fraction [0 to 1]\n\n\n        var progress = {\n          milliseconds: Math.round(this.runTimeInfo.currentMillisecond + (timestamp - this.previousTimeStamp) * this.speed),\n          fraction: (this.runTimeInfo.currentMillisecond + (timestamp - this.previousTimeStamp) * this.speed) / this.duration\n        };\n\n        if (progress.fraction >= 1) {\n          this.playableProgress(1, this.duration);\n          this.complete();\n          return;\n        }\n\n        if (progress.fraction < 0) {\n          this.playableProgress(0, 0);\n          this.complete(); // this.broadcastEvent('state-change', { oldState: \"playing\", newState: \"idle\" });\n\n          return;\n        }\n\n        this.playableProgress(progress.fraction, progress.milliseconds);\n        this.previousTimeStamp = timestamp;\n\n        if (debug === false) {\n          window.requestAnimationFrame(that.step.bind(that));\n        }\n      } // ************ PUB SUB ********************\n      // *****************************************\n\n      /**\n          By subscribing a module can get notified about changes on the Clip's time\n          subscribe method subscribes a function to the time change dispatcher. As Clip uses requestAnimationFrame for its timing\n          each cyrcle / step gets the current time and subtracts the previous time so it know how many milliseconds has elapsed\n          since last step. Subscribers can set to get informed about time changes only if the delta is greater than a given\n          number (e.g. greater than 300ms). That property is passed as the second argument \"threshold\".\n          Finally if any of the subscribers want the Scene to provide back a rounded number of the milliseconds. Options:\n            - 1 (round it on its actual units\n           - 10 (round it on tenths)\n           - 100 (round it on hundreds)\n           - 1000 (round it on thousands)\n          the first argument provides an id to the listener for future reference (deletion etc)\n          the second argument is a function that takes two arguments: millisecond, state (current millisecond of the Scene\n          and the state of it  */\n\n    }, {\n      key: \"subscribe\",\n      value: function subscribe(id, funct, threshold, roundTo) {\n        var onlyOnStateChange = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n        if (!threshold) {\n          threshold = 0;\n        }\n\n        if (!roundTo) {\n          roundTo = 1; // round second to its units, meaning leave it as it is\n        }\n\n        this.listeners[id] = {\n          funct: funct,\n          threshold: threshold,\n          roundTo: roundTo,\n          cavaDelta: 0,\n          onlyOnStateChange: onlyOnStateChange\n        };\n      }\n    }, {\n      key: \"unsubscribe\",\n      value: function unsubscribe(id) {\n        if (Object.prototype.hasOwnProperty.call(this.listeners, id)) {\n          delete this.listeners[id];\n        }\n      }\n    }, {\n      key: \"subscribeToDurationChange\",\n      value: function subscribeToDurationChange(funct) {\n        if (this.isTheRootClip) {\n          this.realClip.subscribeToDurationChange(funct);\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"executionSpeed\",\n      set: function set(speed) {\n        if (!this.isTheRootClip) {\n          return false;\n        }\n\n        this.speed = parseFloat(speed);\n      }\n    }]);\n\n    return Playable;\n  }(DescriptiveGroup);\n\n  /*\n  dna: {\n      host\n      descriptiveIncident\n  }\n  */\n\n  var ClipClone =\n  /*#__PURE__*/\n  function () {\n    function ClipClone(dna) {\n      _classCallCheck(this, ClipClone);\n\n      this.runTimeInfo = {\n        currentMillisecond: 0,\n        state: 'transitional'\n      };\n      this.id = getAnId();\n      this.realClip = dna.descriptiveIncident.realClip; // In order to render itself on the given element first it needs the props (including html and css)\n      // from the real Clip it copies\n\n      var constructionArgs = dna.descriptiveIncident.realClip.exportConstructionArguments(); // it properly sets its own host on the props to use to initialise its own clip\n\n      var hostedProps = _objectSpread2({}, constructionArgs.props, {\n        selector: undefined,\n        host: dna.host,\n        id: this.id\n      }); // we create a clip because Clips on creation render and thus have their own context\n\n\n      this.ownClip = new dna.descriptiveIncident.constructor.Incident(constructionArgs.attrs, hostedProps); // flushes the realClip with its ownClip's context\n\n      dna.descriptiveIncident.realClip.addContext({\n        clipId: this.id,\n        context: this.ownClip.ownContext,\n        synchronize: dna.synchronize,\n        runTimeInfo: this.runTimeInfo\n      }, true);\n    } // eslint-disable-next-line no-unused-vars\n\n\n    _createClass(ClipClone, [{\n      key: \"onProgress\",\n      value: function onProgress(fraction, milliseconds) {\n\n        for (var key in this.realClip.instantiatedChannels) {\n          var channel = this.realClip.instantiatedChannels[key];\n          channel.moveTo(this.runTimeInfo.currentMillisecond, milliseconds, this.id, true);\n        }\n\n        this.runTimeInfo.currentMillisecond = milliseconds;\n      }\n    }]);\n\n    return ClipClone;\n  }();\n\n  /**\n   * Along with the expected props for the Clip on the props support the audio key.\n   * The audio can take one of the 3 following values:\n   * - \"on\": The Clip has audio enabled\n   * - \"off\": The Clip has audio disabled\n   * - \"only\": The Clip is only audio\n   *\n   * Also, in the case audio is on or only the user should pass the \"audioSources\"\n   * key containing all the audio sources they want to pass on the Audio Context\n   * of their clip. Please check AudioClip for details on the expected format\n   * */\n\n  var DescriptiveClip =\n  /*#__PURE__*/\n  function (_Playable) {\n    _inherits(DescriptiveClip, _Playable);\n\n    function DescriptiveClip(attrs) {\n      var _this;\n\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, DescriptiveClip);\n\n      var attrsToPass;\n      var propsToUse;\n\n      if (props === null) {\n        attrsToPass = {};\n        propsToUse = attrs;\n      } else {\n        // else, in case the user has passed two arguments then both should be used\n        attrsToPass = attrs;\n        propsToUse = props;\n      }\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveClip).call(this, attrsToPass, propsToUse));\n\n      var propsValidation = _this._validateProps();\n\n      if (propsValidation.result === false) {\n        return _possibleConstructorReturn(_this, propsValidation);\n      }\n\n      _this.attrsValidationRules = {};\n      _this.propsValidationRules = clipPropsRule; // isTheRootClip defines whether the Clip is the root or not. It depends on\n      // the host or selector parameter passed on props (if host is present then\n      // the Clip is the root Clip while if the Clip gets initialised by a selector\n      // is not)\n\n      _this.isTheRootClip = false; // check if\n\n      var ingredients = {\n        id: _this.id,\n        attrs: attrsToPass,\n        props: _objectSpread2({}, propsToUse, {\n          html: Object.prototype.hasOwnProperty.call(propsToUse, 'html') ? propsToUse.html : _this.html,\n          css: Object.prototype.hasOwnProperty.call(propsToUse, 'css') ? propsToUse.css : _this.css,\n          fonts: Object.prototype.hasOwnProperty.call(propsToUse, 'fonts') ? propsToUse.fonts : _this.fonts,\n          runTimeInfo: _this.runTimeInfo,\n          subscribe: _this.subscribe.bind(_assertThisInitialized(_this))\n        }),\n        plugin_npm_name: _this.constructor.plugin_npm_name,\n        Channel: _this.constructor.Channel,\n        DescriptiveIncident: _assertThisInitialized(_this)\n      }; // Decide what kind of audio (or non-audio) Clip we are dealing with\n\n      _this.audio = 'on';\n\n      if (Object.prototype.hasOwnProperty.call(_this.constructor, 'audio')) {\n        _this.audio = _this.constructor.audio;\n      }\n\n      if (Object.prototype.hasOwnProperty.call(propsToUse, 'audio')) {\n        _this.audio = propsToUse.audio;\n      } // decide if this is the root clip\n\n\n      if (Object.prototype.hasOwnProperty.call(propsToUse, 'selector') && propsToUse.selector !== undefined && _this.constructor.customClip !== true) {\n        ingredients.Incident = FragmentedClip; // TODO it doesn't take in account the get html and get css of the Descriptive Clip\n      } else if (Object.prototype.hasOwnProperty.call(propsToUse, 'selector') && propsToUse.selector !== undefined && _this.constructor.customClip === true) {\n        delete ingredients.props.selector;\n        var FragmentWrapper = new FragmentedClip({\n          html: '<div id=\"clip-container\"></div>'\n        });\n        ingredients.props.host = FragmentWrapper.rootElement;\n        ingredients.Incident = _this.constructor.Incident;\n      } else if (_this.audio === 'only' && _this.props.root !== true) {\n        // audioClips can never be the root\n        _this.isTheRootClip = false;\n      } else {\n        _this.isTheRootClip = true;\n        /*\n              blockingWaitings are been triggered by Incidents when there is the\n              need to halt the Clip's execution and wait. As an example a blocking\n              waiting can be set by an Audio Playback Incident when the audio has\n              not been loaded yet.\n              Each blocking waiting has an id and via the same id the waiting can be\n              unblocked.\n              The blockingWaitings property of the root Clip is a collection with\n              keys the blocking waitings ids and values the description of each waiting\n              which consists of:\n              {\n                  id\n                  description\n                  incidentId\n              }\n              The blocking waitings are triggered by real Incidents living on the real\n              Clips of the Descriptive Clip (either the audioClip or the realClip).\n              The root that a waiting set or unset follows is from any real incident\n              up to its ContextAware Incident and from there\n              up to the real Clip and from thre to its DescriptiveTree and from there\n              all the way up to the root Descriptive Clip.\n              Blocking waitings must always be triggered on the \"onProgress\" or on\n              the \"play\" methods of Incidents. Setting a blocking waiting from anywhere\n              else is an error\n              */\n\n        _this.blockingWaitings = {};\n        ingredients.Incident = _this.constructor.Incident;\n      } // we initialise real and audio clips of the Clip by checking the static audio\n      // property\n      // the property this.audio helps incidentFromDescription identify if the Incident\n      // participates or not on the audioClip. By default is \"on\" but if the props.audio is set to off\n      // it turns to \"off\" so the DC gets totally ignored on the addition process on audio clip\n\n      /* The audio value is set in the following manner\n              - first we check if the Class has a static audio parameter and if yes we keep it\n              - then we check if this.props has the audio key and if yes we keep this one\n              - otherwise we use the default (\"on\")\n          */\n\n\n      if (_this.audio === 'on' || _this.audio === 'off') {\n        _this.realClip = incidentFromIngredients(ingredients);\n      } else {\n        _this.realClip = new NullClip();\n      }\n\n      if (_this.audio === 'on' || _this.audio === 'only') {\n        var audioIngredients = {\n          id: _this.id,\n          attrs: {},\n          props: {\n            audioSources: Object.prototype.hasOwnProperty.call(propsToUse, 'audioSources') ? propsToUse.audioSources : _this.audioSources,\n            runTimeInfo: _this.runTimeInfo,\n            subscribe: _this.subscribe.bind(_assertThisInitialized(_this))\n          },\n          plugin_npm_name: _this.constructor.plugin_npm_name,\n          Channel: _this.constructor.Channel,\n          Incident: AudioClip,\n          DescriptiveIncident: _assertThisInitialized(_this)\n        };\n        _this.audioClip = incidentFromIngredients(audioIngredients);\n      } else {\n        _this.audio = 'off';\n        _this.audioClip = new NullClip();\n      } // passiveAddition is a flag property indicating that any Incident to be\n      // added to the Clip will be passive. It initialises with value = false\n      // on DescriptiveGroup where it's originaly defined.\n      // Here we change its value just before the buildTree method execution\n      // so all Incidents added on it get the \"passive\" flag and don't get\n      // exported on the exportDefinition method. Once the buildTree method\n      // finishes we set it back to its original value (false)\n\n\n      _this.passiveAddition = true;\n\n      _this._buildTree();\n\n      _this.passiveAddition = false;\n      return _this;\n    }\n\n    _createClass(DescriptiveClip, [{\n      key: \"_validateProps\",\n      value: function _validateProps() {\n        return helper.validateProps({\n          props: this.props\n        }, clipPropsRule, this.constructor);\n      }\n    }, {\n      key: \"_buildTree\",\n\n      /*\n        the _buildTree method acts as a proxy to the buildTree method defined by the\n        developers. The reason for this is that the actual buildTree method should\n        be executed in different order on Groups and on Clips (that extend Groups).\n        Calling the super on constructor fires the _buildTree execution on the\n        Group's constructor but this breaks on Clip as the realClip has not been\n        initialised yet.\n        */\n      value: function _buildTree() {\n        if (this.realClip === undefined) {\n          return;\n        }\n\n        this.buildTree();\n      }\n      /**\n       * When the resize command is given directly to a DescriptiveClip no checks\n       * need to be performed.\n       * DescriptiveClip directly invokes the _resize method of ExtendableClip which\n       * resizes the full clip\n       */\n\n    }, {\n      key: \"resize\",\n      value: function resize(newSize) {\n        this.realClip._resize(newSize / this.duration);\n\n        this.audioClip._resize(newSize / this.duration);\n\n        this.duration = newSize;\n        this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n          selfExecute: false,\n          direction: _DIRECTIONS._UP\n        });\n        this.putMessageOnPipe('flash', {}, 'RootClip', {\n          selfExecute: true,\n          direction: _DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n      /** ************************* HANDLING METHODS ****************************** */\n      // eslint-disable-next-line no-unused-vars\n\n    }, {\n      key: \"handleCheckForClip\",\n      value: function handleCheckForClip(target, payload) {\n        return true;\n      }\n    }, {\n      key: \"handleGetElements\",\n      value: function handleGetElements(target, payload) {\n        return this.realClip.getElements(payload.selector);\n      }\n    }, {\n      key: \"handleCheckAddition\",\n      value: function handleCheckAddition(target, payload) {\n        /* Is the responsibility of the DescriptiveClip to pass the addition request\n            to its real clip and expect for a response. */\n        var res = this.realClip.addIncident(payload);\n        var audioRes = this.audioClip.addIncident(payload);\n\n        if (res.result === true && audioRes.result === true) {\n          res.execute();\n          audioRes.execute();\n          this.putMessageOnPipe('flash', {}, 'RootClip', {\n            selfExecute: true,\n            direction: _DIRECTIONS._UP\n          });\n          return {\n            result: true\n          };\n        }\n\n        return res;\n      }\n    }, {\n      key: \"handleCheckMove\",\n      value: function handleCheckMove(target, payload) {\n        var res = this.realClip.moveIncident(payload);\n        var audioRes = this.audioClip.moveIncident(payload);\n\n        if (res.result === true && audioRes.result === true) {\n          res.execute();\n          audioRes.execute();\n          this.putMessageOnPipe('flash', {}, 'RootClip', {\n            selfExecute: true,\n            direction: _DIRECTIONS._UP\n          });\n          return {\n            result: true\n          };\n        }\n\n        return res;\n      }\n    }, {\n      key: \"handleCheckDeletion\",\n      value: function handleCheckDeletion(target, payload) {\n        var res = this.realClip.removeIncident(payload);\n        var audioRes = this.audioClip.removeIncident(payload);\n\n        if (res.result === true && audioRes.result === true) {\n          res.execute();\n          audioRes.execute();\n          this.putMessageOnPipe('flash', {}, 'RootClip', {\n            selfExecute: true,\n            direction: _DIRECTIONS._UP\n          });\n          return {\n            result: true\n          };\n        }\n\n        return res;\n      }\n    }, {\n      key: \"handleCheckResize\",\n      value: function handleCheckResize(target, payload) {\n        var res = this.realClip.resizeIncident(payload);\n        var audioRes = this.audioClip.resizeIncident(payload);\n\n        if (res.result === true && audioRes.result === true) {\n          res.execute();\n          audioRes.execute();\n          this.putMessageOnPipe('flash', {}, 'RootClip', {\n            selfExecute: true,\n            direction: _DIRECTIONS._UP\n          });\n          return {\n            result: true\n          };\n        }\n\n        return res;\n      } // eslint-disable-next-line no-unused-vars\n\n    }, {\n      key: \"handleFlash\",\n      value: function handleFlash(target, payload) {\n        if (this.isTheRootClip) {\n          this.flash();\n        } else {\n          return this.bypass();\n        }\n      }\n      /** **************** BLOCKING WAITINGS HANDLING ************************* */\n\n      /** ******************************************************************** */\n\n    }, {\n      key: \"handleSetBlock\",\n      value: function handleSetBlock(target, payload) {\n        // only accepts blocks if is the root clip and if it's playing\n        if (this.isTheRootClip) {\n          if (this.runTimeInfo.state === 'transitional') {\n            return;\n          }\n\n          if (this.runTimeInfo.state !== 'blocked') {\n            this.statusBeforeBlock = this.runTimeInfo.state;\n          }\n\n          this.blockingWaitings[payload.id] = payload;\n          this.block();\n        } else {\n          return this.bypass();\n        }\n      }\n    }, {\n      key: \"handleUnBlock\",\n      value: function handleUnBlock(target, payload) {\n        if (this.isTheRootClip) {\n          if (Object.prototype.hasOwnProperty.call(this.blockingWaitings, payload.id)) {\n            delete this.blockingWaitings[payload.id];\n\n            if (Object.keys(this.blockingWaitings).length === 0) {\n              if (this.statusBeforeBlock === 'playing') {\n                this.previousTimeStamp = -1;\n                this.play();\n              } else {\n                this.arm();\n              }\n            }\n          }\n        } else {\n          return this.bypass();\n        }\n      }\n      /* empty blocking waitings on transition start */\n\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        _get(_getPrototypeOf(DescriptiveClip.prototype), \"stop\", this).call(this);\n\n        this.blockingWaitings = {};\n      }\n      /** ******************************************************************** */\n\n      /** ******************************************************************** */\n\n    }, {\n      key: \"onProgress\",\n      value: function onProgress(fraction, millisecond) {\n        this.realClip.onProgress(fraction, millisecond);\n        this.audioClip.onProgress(fraction, millisecond);\n      }\n      /** ********************************************************** */\n\n    }, {\n      key: \"paste\",\n      value: function paste(host) {\n        if (this.isTheRootClip) {\n          var clipClone = new ClipClone({\n            host: host,\n            descriptiveIncident: this\n          });\n          return clipClone;\n        }\n\n        return null;\n      }\n    }, {\n      key: \"flash\",\n      value: function flash() {\n        this.realClip.flash();\n      }\n    }, {\n      key: \"setVolume\",\n      value: function setVolume(vol) {\n        if (vol < 0 || vol > 1) {\n          return {\n            result: false,\n            errors: [{\n              type: 'invalid volume number'\n            }]\n          };\n        }\n\n        if (this.audio === 'off') {\n          return {\n            result: false,\n            errors: [{\n              type: 'can not set volume of Clip with audio off'\n            }]\n          };\n        }\n\n        this.audioClip.setVolume(vol);\n        return {\n          result: true\n        };\n      }\n    }, {\n      key: \"selectorToPassToChildren\",\n      get: function get() {\n        return null; // the Clip (any Clip) resets the selection cascading\n      }\n    }, {\n      key: \"inheritedSelector\",\n      get: function get() {\n        return this._inheritedSelector;\n      },\n      set: function set(value) {\n        this._inheritedSelector = value;\n      }\n    }, {\n      key: \"html\",\n      get: function get() {\n        return '';\n      }\n    }, {\n      key: \"css\",\n      get: function get() {\n        return '';\n      }\n    }, {\n      key: \"fonts\",\n      get: function get() {\n        return [];\n      }\n    }, {\n      key: \"audioSources\",\n      get: function get() {\n        return [];\n      }\n    }]);\n\n    return DescriptiveClip;\n  }(Playable);\n\n  _defineProperty(DescriptiveClip, \"isClip\", true);\n\n  _defineProperty(DescriptiveClip, \"Incident\", Clip$1);\n\n  _defineProperty(DescriptiveClip, \"plugin_npm_name\", '@kissmybutton/self-contained-incidents');\n\n  _defineProperty(DescriptiveClip, \"Channel\", ClipChannel);\n\n  _defineProperty(DescriptiveClip, \"ClassName\", 'Clip');\n\n  var DescriptiveAudioClip =\n  /*#__PURE__*/\n  function (_DescriptiveClip) {\n    _inherits(DescriptiveAudioClip, _DescriptiveClip);\n\n    function DescriptiveAudioClip(audioSources) {\n      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, DescriptiveAudioClip);\n\n      var propsToPass = {\n        audio: 'only',\n        audioSources: audioSources\n      };\n\n      if (id !== null) {\n        propsToPass.id = id;\n      }\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveAudioClip).call(this, propsToPass));\n    }\n\n    return DescriptiveAudioClip;\n  }(DescriptiveClip);\n\n  var DescriptiveIncident = _decorate(null, function (_initialize, _Leaf) {\n    var DescriptiveIncident =\n    /*#__PURE__*/\n    function (_Leaf2) {\n      _inherits(DescriptiveIncident, _Leaf2);\n\n      function DescriptiveIncident(attrs, props) {\n        var _this;\n\n        _classCallCheck(this, DescriptiveIncident);\n\n        if (props === undefined) {\n          props = attrs;\n          attrs = {};\n        }\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveIncident).call(this, props));\n\n        _initialize(_assertThisInitialized(_this));\n\n        var propsValidation = helper.validateProps({\n          props: props\n        }, incidentPropsRule, _this.constructor);\n\n        if (propsValidation.result === false) {\n          return _possibleConstructorReturn(_this, propsValidation);\n        }\n\n        _this.inheritedSelector = null;\n        _this.attrs = attrs;\n\n        if (!Object.prototype.hasOwnProperty.call(props, 'duration')) {\n          props.duration = 0;\n        }\n\n        _this.props = props;\n        _this.attrsValidationRules = {};\n        _this.propsValidationRules = incidentPropsRule; // the passive flag (when true) indicates that the Descriptive Group has been created\n        // and passively added to a Clip or a Combo via buildTree method.\n        // Defaults to false\n\n        _this.passive = false;\n        return _this;\n      }\n\n      return DescriptiveIncident;\n    }(_Leaf);\n\n    return {\n      F: DescriptiveIncident,\n      d: [{\n        kind: \"field\",\n        static: true,\n        key: \"Incident\",\n        value: function value() {\n          return MonoIncident;\n        }\n      }, {\n        kind: \"field\",\n        static: true,\n        key: \"plugin_npm_name\",\n        value: function value() {\n          return 'motor-cortex-js-attribute';\n        }\n      }, {\n        kind: \"field\",\n        static: true,\n        key: \"Channel\",\n        value: function value() {\n          return AttributeChannel;\n        }\n      }, {\n        kind: \"field\",\n        static: true,\n        key: \"ClassName\",\n        value: function value() {\n          return 'Incident';\n        }\n      }, {\n        kind: \"method\",\n        decorators: [editAttributes],\n        key: \"editAttributes\",\n        value: function editAttributes() {}\n      }, {\n        kind: \"method\",\n        decorators: [editProperties],\n        key: \"editProperties\",\n        value: function editProperties() {}\n      }, {\n        kind: \"method\",\n        decorators: [resize],\n        key: \"resize\",\n        value: function resize() {}\n      }, {\n        kind: \"method\",\n        decorators: [selector],\n        key: \"selector\",\n        value: function selector() {}\n      }, {\n        kind: \"method\",\n        decorators: [getElements],\n        key: \"getElements\",\n        value: function getElements() {}\n      }, {\n        kind: \"method\",\n        key: \"manageEditAttrProps\",\n        value: function manageEditAttrProps(newAttrs, type) {\n          // get a permanent reference to its parent node\n          var parentNode = this.parentNode; // get the position of the Incident within its parent\n\n          var position = parentNode.getLeafPosition(this.id); // first detach the Incident from its parent\n\n          parentNode.removeIncident(this.id); // keep a backup of the current attrs/props\n\n          var oldAttrs = JSON.parse(JSON.stringify(this[type]));\n          this[type] = newAttrs;\n          var res = parentNode.addIncident(this, position);\n\n          if (res.result === false) {\n            parentNode.removeIncident(this.id);\n            this[type] = oldAttrs;\n            parentNode.addIncident(this, position);\n            return res;\n          }\n\n          return res;\n        }\n      }, {\n        kind: \"method\",\n        key: \"detachFromParent\",\n        value: function detachFromParent() {\n          _get(_getPrototypeOf(DescriptiveIncident.prototype), \"detachFromParent\", this).call(this);\n\n          this.inheritedSelector = null;\n        }\n      }, {\n        kind: \"method\",\n        key: \"handleCheckForInvalidSelectors\",\n        value: function handleCheckForInvalidSelectors() {\n          var selector = this.selector();\n\n          if (selector === null) {\n            return {\n              id: this.id,\n              ClassName: this.constructor.ClassName,\n              plugin_npm_name: this.constructor.plugin_npm_name,\n              error: 'null selector'\n            };\n          }\n\n          if (selector.charAt(0) === '&') {\n            return {\n              id: this.id,\n              ClassName: this.constructor.ClassName,\n              plugin_npm_name: this.constructor.plugin_npm_name,\n              error: 'relative selector with no inherited selector',\n              selector: selector\n            };\n          }\n\n          return this.bypass();\n        }\n        /**\n         * The purpose of this method is to export a portable definition that can be\n         * later used in order to rebuild the Inicdent at any time\n         */\n\n      }, {\n        kind: \"method\",\n        key: \"exportDefinition\",\n        value: function exportDefinition() {\n          return {\n            ClassName: this.constructor.ClassName,\n            plugin_npm_name: this.constructor.plugin_npm_name,\n            attrs: this.attrs,\n            props: this.props\n          };\n        }\n        /**\n         * The purpose of this method is to export an object with \"live\" / real reference\n         * to the Class of the Incident so it can directly by used for Clip creation\n         * */\n\n      }, {\n        kind: \"method\",\n        key: \"exportLiveDefinition\",\n        value: function exportLiveDefinition() {\n          return {\n            Class: this.constructor,\n            attrs: JSON.parse(JSON.stringify(this.attrs)),\n            props: JSON.parse(JSON.stringify(this.props))\n          };\n        }\n      }]\n    };\n  }, Leaf);\n\n  /*\n  definition: {\n      Class: <The Class>,\n      attrs: <attrs>,\n      props: <props>,\n      incidents: { // this exists only in the case of a Group or a Clip\n          id: <id>,\n          position> <position>,\n          leaf: <definition>\n      }\n  }\n  */\n  function constructIncident(definition) {\n    var TheIncident = new definition.Class(definition.attrs, definition.props);\n\n    if (Object.prototype.hasOwnProperty.call(definition, 'incidents')) {\n      for (var key in definition.incidents) {\n        var incidentDefinition = definition.incidents[key];\n        var incident = constructIncident(incidentDefinition.leaf);\n        TheIncident.addIncident(incident, incidentDefinition.position);\n      }\n    }\n\n    return TheIncident;\n  }\n\n  var colorRegexp = new RegExp(/^#([\\da-f]{3}){1,2}$|^#([\\da-f]{4}){1,2}$|(rgb|hsl)a?\\((\\s*-?\\d+%?\\s*,){2}(\\s*-?\\d+%?\\s*,?\\s*\\)?)(,\\s*(0?\\.\\d+)?|1)?\\)/, 'gi');\n  var intRegexp = new RegExp(/^[-+]?\\d+$/);\n  var createValidator = function createValidator() {\n    var v = new index_min({\n      messages: {\n        color: \"The '{field}' field must be an a valid color! Actual: {actual}\",\n        measurement: \"The '{field}' must be a measurement with specs that are not met. Please check schema definition. Actual: {actual}\"\n      }\n    }); // eslint-disable-next-line no-unused-vars\n\n    v.add('measurement', function (_ref, path, context) {\n      var schema = _ref.schema,\n          messages = _ref.messages;\n      var measurementRegexp = new RegExp('^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)(' + schema.units.join('|') + ')$', 'gi');\n      var numberPartRegexp = new RegExp('^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)', 'gi');\n      var unitsFlattened = schema.units.join(', ');\n      return {\n        source: \"\\n        if(typeof value !== 'string' && !(value instanceof String)){\\n          \".concat(this.makeError({\n          type: 'measurement',\n          actual: 'value',\n          units: unitsFlattened,\n          messages: messages\n        }), \"\\n          return ;\\n        }\\n        if(!value.match(\").concat(measurementRegexp, \")){\\n          \").concat(this.makeError({\n          type: 'measurement',\n          actual: 'value',\n          units: unitsFlattened,\n          messages: messages\n        }), \"\\n        } else {\\n          var numberPart = value.match(\").concat(numberPartRegexp, \")[0];\\n          if(\").concat(Object.prototype.hasOwnProperty.call(schema, 'min'), \"){\\n            if(\").concat(schema.min, \" > numberPart){\\n              \").concat(this.makeError({\n          type: 'measurement',\n          actual: 'value',\n          units: unitsFlattened,\n          messages: messages\n        }), \"\\n            }\\n          }\\n          if(\").concat(Object.prototype.hasOwnProperty.call(schema, 'max'), \"){\\n            if(\").concat(schema.max, \" < numberPart){\\n              \").concat(this.makeError({\n          type: 'measurement',\n          actual: 'value',\n          units: unitsFlattened,\n          messages: messages\n        }), \"\\n            }\\n          }\\n           if(\").concat(Object.prototype.hasOwnProperty.call(schema, 'integer'), \"){\\n            if(!numberPart.match(\").concat(intRegexp, \")){\\n              \").concat(this.makeError({\n          type: 'measurement',\n          actual: 'value',\n          units: unitsFlattened,\n          messages: messages\n        }), \"\\n            }\\n          }\\n        }\\n        return value;\\n      \")\n      };\n    }); // eslint-disable-next-line no-unused-vars\n\n    v.add('color', function (_ref2, path, context) {\n      var schema = _ref2.schema,\n          messages = _ref2.messages;\n      return {\n        source: \"\\n        if(typeof value !== 'string' && !(value instanceof String)){\\n          \".concat(this.makeError({\n          type: 'measurement',\n          actual: 'value',\n          messages: messages\n        }), \"\\n          return ;\\n        }\\n        if(!value.match(\").concat(colorRegexp, \") && [\\n            \\\"aliceblue\\\",\\n            \\\"antiquewhite\\\",\\n            \\\"aqua\\\",\\n            \\\"aquamarine\\\",\\n            \\\"azure\\\",\\n            \\\"beige\\\",\\n            \\\"bisque\\\",\\n            \\\"black\\\",\\n            \\\"blanchedalmond\\\",\\n            \\\"blue\\\",\\n            \\\"blueviolet\\\",\\n            \\\"brown\\\",\\n            \\\"burlywood\\\",\\n            \\\"cadetblue\\\",\\n            \\\"chartreuse\\\",\\n            \\\"chocolate\\\",\\n            \\\"coral\\\",\\n            \\\"cornflowerblue\\\",\\n            \\\"cornsilk\\\",\\n            \\\"crimson\\\",\\n            \\\"cyan\\\",\\n            \\\"darkblue\\\",\\n            \\\"darkcyan\\\",\\n            \\\"darkgoldenrod\\\",\\n            \\\"darkgray\\\",\\n            \\\"darkgrey\\\",\\n            \\\"darkgreen\\\",\\n            \\\"darkkhaki\\\",\\n            \\\"darkmagenta\\\",\\n            \\\"darkolivegreen\\\",\\n            \\\"darkorange\\\",\\n            \\\"darkorchid\\\",\\n            \\\"darkred\\\",\\n            \\\"darksalmon\\\",\\n            \\\"darkseagreen\\\",\\n            \\\"darkslateblue\\\",\\n            \\\"darkslategray\\\",\\n            \\\"darkslategrey\\\",\\n            \\\"darkturquoise\\\",\\n            \\\"darkviolet\\\",\\n            \\\"deeppink\\\",\\n            \\\"deepskyblue\\\",\\n            \\\"dimgray\\\",\\n            \\\"dimgrey\\\",\\n            \\\"dodgerblue\\\",\\n            \\\"firebrick\\\",\\n            \\\"floralwhite\\\",\\n            \\\"forestgreen\\\",\\n            \\\"fuchsia\\\",\\n            \\\"gainsboro\\\",\\n            \\\"ghostwhite\\\",\\n            \\\"gold\\\",\\n            \\\"goldenrod\\\",\\n            \\\"gray\\\",\\n            \\\"grey\\\",\\n            \\\"green\\\",\\n            \\\"greenyellow\\\",\\n            \\\"honeydew\\\",\\n            \\\"hotpink\\\",\\n            \\\"indianred\\\",\\n            \\\"indigo\\\",\\n            \\\"ivory\\\",\\n            \\\"khaki\\\",\\n            \\\"lavender\\\",\\n            \\\"lavenderblush\\\",\\n            \\\"lawngreen\\\",\\n            \\\"lemonchiffon\\\",\\n            \\\"lightblue\\\",\\n            \\\"lightcoral\\\",\\n            \\\"lightcyan\\\",\\n            \\\"lightgoldenrodyellow\\\",\\n            \\\"lightgray\\\",\\n            \\\"lightgrey\\\",\\n            \\\"lightgreen\\\",\\n            \\\"lightpink\\\",\\n            \\\"lightsalmon\\\",\\n            \\\"lightseagreen\\\",\\n            \\\"lightskyblue\\\",\\n            \\\"lightslategray\\\",\\n            \\\"lightslategrey\\\",\\n            \\\"lightsteelblue\\\",\\n            \\\"lightyellow\\\",\\n            \\\"lime\\\",\\n            \\\"limegreen\\\",\\n            \\\"linen\\\",\\n            \\\"magenta\\\",\\n            \\\"maroon\\\",\\n            \\\"mediumaquamarine\\\",\\n            \\\"mediumblue\\\",\\n            \\\"mediumorchid\\\",\\n            \\\"mediumpurple\\\",\\n            \\\"mediumseagreen\\\",\\n            \\\"mediumslateblue\\\",\\n            \\\"mediumspringgreen\\\",\\n            \\\"mediumturquoise\\\",\\n            \\\"mediumvioletred\\\",\\n            \\\"midnightblue\\\",\\n            \\\"mintcream\\\",\\n            \\\"mistyrose\\\",\\n            \\\"moccasin\\\",\\n            \\\"navajowhite\\\",\\n            \\\"navy\\\",\\n            \\\"oldlace\\\",\\n            \\\"olive\\\",\\n            \\\"olivedrab\\\",\\n            \\\"orange\\\",\\n            \\\"orangered\\\",\\n            \\\"orchid\\\",\\n            \\\"palegoldenrod\\\",\\n            \\\"palegreen\\\",\\n            \\\"paleturquoise\\\",\\n            \\\"palevioletred\\\",\\n            \\\"papayawhip\\\",\\n            \\\"peachpuff\\\",\\n            \\\"peru\\\",\\n            \\\"pink\\\",\\n            \\\"plum\\\",\\n            \\\"powderblue\\\",\\n            \\\"purple\\\",\\n            \\\"rebeccapurple\\\",\\n            \\\"red\\\",\\n            \\\"rosybrown\\\",\\n            \\\"royalblue\\\",\\n            \\\"saddlebrown\\\",\\n            \\\"salmon\\\",\\n            \\\"sandybrown\\\",\\n            \\\"seagreen\\\",\\n            \\\"seashell\\\",\\n            \\\"sienna\\\",\\n            \\\"silver\\\",\\n            \\\"skyblue\\\",\\n            \\\"slateblue\\\",\\n            \\\"slategray\\\",\\n            \\\"slategrey\\\",\\n            \\\"snow\\\",\\n            \\\"springgreen\\\",\\n            \\\"steelblue\\\",\\n            \\\"tan\\\",\\n            \\\"teal\\\",\\n            \\\"thistle\\\",\\n            \\\"tomato\\\",\\n            \\\"turquoise\\\",\\n            \\\"violet\\\",\\n            \\\"wheat\\\",\\n            \\\"white\\\",\\n            \\\"whitesmoke\\\",\\n            \\\"yellow\\\",\\n            \\\"yellowgreen\\\",\\n          ].indexOf(value.toLowerCase()) < 0){\\n          \").concat(this.makeError({\n          type: 'color',\n          actual: 'value',\n          messages: messages\n        }), \"\\n        }\\n        return value;\\n      \")\n      };\n    });\n    return v;\n  };\n\n  var Journey =\n  /*#__PURE__*/\n  function () {\n    function Journey(props) {\n      _classCallCheck(this, Journey);\n\n      if (!Object.prototype.hasOwnProperty.call(props, 'incident')) {\n        helper.error('Journey constructor expects an Incident on its properties on the key \"incident\"');\n        return false;\n      }\n\n      this.memory = props.calpuleMemory;\n      this.stations = [];\n      this.incident = props.incident;\n      this.startMillisecond = this.incident.runTimeInfo.currentMillisecond * 1;\n      this.startState = \"\".concat(this.incident.runTimeInfo.state);\n      this.incident.stop();\n    }\n\n    _createClass(Journey, [{\n      key: \"station\",\n      value: function station(millisecond) {\n        var props = {};\n\n        if (this.stations.length > 0) {\n          props.previousStop = this.stations[this.stations.length - 1];\n        }\n\n        this.stations.push(millisecond); // helper.log(`CAPSULE passes as previousStop: ${props.previousStop}`);\n        // helper.log(this.stations);\n\n        this.incident.playableProgress(millisecond / this.incident.duration, millisecond);\n      }\n    }, {\n      key: \"destination\",\n      value: function destination() {\n        var millisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n        if (millisecond != null) {\n          this.station(millisecond);\n        } else {\n          millisecond = this.stations[this.stations.length - 1];\n        }\n\n        this.incident.playableProgress(millisecond / this.incident.duration, millisecond); // if the clip was playing start it again\n\n        if (this.startState === 'playing' || this.startState === 'blocked' && this.incident.statusBeforeBlock === 'playing') {\n          this.incident.play();\n        } else if (millisecond >= this.incident.duration) {\n          this.incident.complete();\n        } else {\n          this.incident.arm();\n        }\n\n        this.memory.push(this.exportJourneyLog);\n      }\n    }, {\n      key: \"exportJourneyLog\",\n      value: function exportJourneyLog() {\n        return {\n          startMillisecond: this.startMillisecond,\n          startState: this.startState,\n          stations: this.stations\n        };\n      }\n    }]);\n\n    return Journey;\n  }();\n\n  var TimeCapsule =\n  /*#__PURE__*/\n  function () {\n    function TimeCapsule() {\n      _classCallCheck(this, TimeCapsule);\n\n      this.memory = [];\n    }\n\n    _createClass(TimeCapsule, [{\n      key: \"startJourney\",\n      value: function startJourney(incident) {\n        if (!incident) {\n          helper.error('startJourney expects an Incident as an argument');\n          return false;\n        }\n\n        return new Journey({\n          incident: incident,\n          calpuleMemory: this.memory\n        });\n      }\n    }]);\n\n    return TimeCapsule;\n  }();\n\n  var v = createValidator();\n  var helper$1 = new Helper({\n    logLevel: 0\n  });\n\n  function checkPlugin(main) {\n    if (Object.prototype.hasOwnProperty.call(main, 'default')) {\n      main = main.default;\n    }\n\n    var plugin_name = main.npm_name;\n    var check = true;\n\n    if (!Object.prototype.hasOwnProperty.call(main, 'name')) {\n      helper$1.error(\"Warning on plugin \".concat(plugin_name, \". A plugin is always good to have its name on\\n        its main.js file, under the key \\\"name\\\". It's missing from this plugin\"));\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(main, 'incidents') && !Object.prototype.hasOwnProperty.call(main, 'Clip')) {\n      helper$1.error(\"Error on plugin \".concat(plugin_name, \". A plugin must expose at least one Incident or a Clip.\\n        Exposed plugin Incidents should be defined on the \\\"incidents\\\" key of the main.js file while Clips on the \\\"Clip\\\".\"));\n      check = false;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(main, 'incidents') && !Array.isArray(main.incidents)) {\n      helper$1.error(\"Error on plugin \".concat(plugin_name, \". thePlugin exposed Incidents are defined on the \\\"incidents\\\" key of the main.js file in array format.\\n        Please refer to the documentation\"));\n      check = false;\n    } else if (Object.prototype.hasOwnProperty.call(main, 'incidents')) {\n      for (var i = 0; i < main.incidents.length; i++) {\n        var exposedIncidentDefinition = main.incidents[i];\n\n        if (_typeof(exposedIncidentDefinition.exportable) === 'object') {\n          if (Object.prototype.hasOwnProperty.call(exposedIncidentDefinition.exportable, 'default')) {\n            exposedIncidentDefinition.exportable = exposedIncidentDefinition.exportable.default;\n          }\n        }\n\n        if (!(exposedIncidentDefinition.exportable.prototype instanceof DescriptiveGroup) && !(exposedIncidentDefinition.exportable.prototype instanceof DescriptiveClip) && !(exposedIncidentDefinition.exportable.prototype instanceof MonoIncident) && !(exposedIncidentDefinition.exportable.prototype instanceof MediaPlay)) {\n          helper$1.error(\"Error on plugin \".concat(plugin_name, \". Exportable Incidents by any plugin must extend one of the base classes provided by MotorCortex.\\n                \").concat(exposedIncidentDefinition.exportable.constructor.name, \" doesn't.\\n                Please refer to documentation\"));\n          check = false;\n        }\n\n        if (!Object.prototype.hasOwnProperty.call(exposedIncidentDefinition, 'name')) {\n          helper$1.error(\"Error on plugin \".concat(plugin_name, \". Exportable Incidents by any plugin must have the \\\"name\\\" key which defines the name of the exported Incident.\\n                Please refer to documentation\"));\n          check = false;\n        }\n\n        if (!Object.prototype.hasOwnProperty.call(exposedIncidentDefinition, 'propTypes')) {\n          helper$1.log(\"Warning on plugin \".concat(plugin_name, \".\\n                It's always good for plugins to define the supported propTypes of their exposed Incidents' supported properties.\\n                \").concat(exposedIncidentDefinition.exportable.constructor.name, \" doesn't.\\n                Please refer to documentation\"), 'warning');\n        }\n      }\n    }\n\n    return check;\n  } // plugin_name is the unique name of the plugin\n\n\n  function loadPlugin(plugin) {\n    if (Object.prototype.hasOwnProperty.call(plugin, 'default')) {\n      plugin = plugin.default;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(plugin, 'npm_name')) {\n      plugin.npm_name = \"plugin_\".concat(new Date().getTime());\n    }\n\n    if (!checkPlugin(plugin)) {\n      return false;\n    } // thePlugin is the plugin object which will hold on its keys\n    // the names of the exposed Incidents of its. The keys of this object\n    // are going to be identical with the names of the classes exposed\n\n\n    var thePlugin = {};\n\n    if (Object.prototype.hasOwnProperty.call(plugin, 'Clip')) {\n      var _class, _temp;\n\n      var DynamicDescriptiveClip = (_temp = _class =\n      /*#__PURE__*/\n      function (_DescriptiveClip) {\n        _inherits(DynamicDescriptiveClip, _DescriptiveClip);\n\n        function DynamicDescriptiveClip() {\n          _classCallCheck(this, DynamicDescriptiveClip);\n\n          return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveClip).apply(this, arguments));\n        }\n\n        return DynamicDescriptiveClip;\n      }(DescriptiveClip), _defineProperty(_class, \"Incident\", plugin.Clip), _defineProperty(_class, \"audio\", plugin.audio ? plugin.audio : 'off'), _defineProperty(_class, \"customClip\", true), _temp);\n      thePlugin.Clip = DynamicDescriptiveClip;\n    } // if the plugin definition has compositeAttributes then we dynamically\n    // create a new Channel class extending AttributeChannel setting the\n    // composite Attributes on the fly. We can then use this Channel class\n    // for all Incidents exposed by the plugin\n\n\n    var AttributeChannelToUse = AttributeChannel;\n\n    if (Object.prototype.hasOwnProperty.call(plugin, 'compositeAttributes')) {\n      AttributeChannelToUse =\n      /*#__PURE__*/\n      function (_AttributeChannel) {\n        _inherits(AttributeChannelToUse, _AttributeChannel);\n\n        function AttributeChannelToUse(props) {\n          _classCallCheck(this, AttributeChannelToUse);\n\n          props.comboAttributes = plugin.compositeAttributes;\n          return _possibleConstructorReturn(this, _getPrototypeOf(AttributeChannelToUse).call(this, props));\n        }\n\n        return AttributeChannelToUse;\n      }(AttributeChannel);\n    } // for each of the exposed Incidents\n\n\n    if (Object.prototype.hasOwnProperty.call(plugin, 'incidents')) {\n      var _loop = function _loop(i) {\n        var incidentClass = plugin.incidents[i].exportable;\n        var DynamicDescriptiveIncident = void 0; // the exportable Incident can be either a Clip, a Compo or an Incident\n        // if it is an Incident\n\n        if (incidentClass.prototype instanceof MonoIncident) {\n          var _class2, _temp2;\n\n          DynamicDescriptiveIncident = (_temp2 = _class2 =\n          /*#__PURE__*/\n          function (_DescriptiveIncident) {\n            _inherits(DynamicDescriptiveIncident, _DescriptiveIncident);\n\n            function DynamicDescriptiveIncident() {\n              _classCallCheck(this, DynamicDescriptiveIncident);\n\n              return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveIncident).apply(this, arguments));\n            }\n\n            return DynamicDescriptiveIncident;\n          }(DescriptiveIncident), _defineProperty(_class2, \"Incident\", incidentClass), _defineProperty(_class2, \"plugin_npm_name\", plugin.npm_name), _defineProperty(_class2, \"plugin\", plugin.name), _defineProperty(_class2, \"ClassName\", plugin.incidents[i].name), _defineProperty(_class2, \"Channel\", AttributeChannelToUse), _defineProperty(_class2, \"audio\", plugin.audio ? plugin.audio : 'off'), _temp2);\n        } else if (incidentClass.prototype instanceof MediaPlay) {\n          var _class3, _temp3;\n\n          DynamicDescriptiveIncident = (_temp3 = _class3 =\n          /*#__PURE__*/\n          function (_DescriptiveIncident2) {\n            _inherits(DynamicDescriptiveIncident, _DescriptiveIncident2);\n\n            function DynamicDescriptiveIncident() {\n              _classCallCheck(this, DynamicDescriptiveIncident);\n\n              return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveIncident).apply(this, arguments));\n            }\n\n            return DynamicDescriptiveIncident;\n          }(DescriptiveIncident), _defineProperty(_class3, \"Incident\", incidentClass), _defineProperty(_class3, \"plugin_npm_name\", '@kissmybutton/media-playback'), _defineProperty(_class3, \"plugin\", plugin.name), _defineProperty(_class3, \"ClassName\", plugin.incidents[i].name), _defineProperty(_class3, \"Channel\", AudioPlaybackChannel), _defineProperty(_class3, \"audio\", plugin.audio ? plugin.audio : 'off'), _temp3);\n        } else if (incidentClass.prototype instanceof DescriptiveClip) {\n          var _class4, _temp4;\n\n          DynamicDescriptiveIncident = (_temp4 = _class4 =\n          /*#__PURE__*/\n          function (_incidentClass) {\n            _inherits(DynamicDescriptiveIncident, _incidentClass);\n\n            function DynamicDescriptiveIncident() {\n              _classCallCheck(this, DynamicDescriptiveIncident);\n\n              return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveIncident).apply(this, arguments));\n            }\n\n            return DynamicDescriptiveIncident;\n          }(incidentClass), _defineProperty(_class4, \"plugin\", plugin.name), _defineProperty(_class4, \"ClassName\", plugin.incidents[i].name), _defineProperty(_class4, \"audio\", plugin.audio ? plugin.audio : 'on'), _temp4);\n        } else if (incidentClass.prototype instanceof DescriptiveGroup) {\n          var _class5, _temp5;\n\n          DynamicDescriptiveIncident = (_temp5 = _class5 =\n          /*#__PURE__*/\n          function (_incidentClass2) {\n            _inherits(DynamicDescriptiveIncident, _incidentClass2);\n\n            function DynamicDescriptiveIncident() {\n              _classCallCheck(this, DynamicDescriptiveIncident);\n\n              return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveIncident).apply(this, arguments));\n            }\n\n            return DynamicDescriptiveIncident;\n          }(incidentClass), _defineProperty(_class5, \"plugin\", plugin.name), _defineProperty(_class5, \"ClassName\", plugin.incidents[i].name), _temp5);\n        }\n\n        Object.defineProperty(thePlugin, plugin.incidents[i].name, {\n          get: function get() {\n            // the getter will construct a wrapper class which on the constructor will instantiate an object of the\n            // exposed class, set to it the plugin name and channel class parameters and return\n            // it from the constructor\n            var WrapperClass = function WrapperClass(attrs, props) {\n              _classCallCheck(this, WrapperClass);\n\n              var instantiatedIncident = new DynamicDescriptiveIncident(attrs, props);\n\n              if (Object.prototype.hasOwnProperty.call(plugin.incidents[i], 'attributesValidationRules')) {\n                var validationResult = v.validate(attrs, plugin.incidents[i].attributesValidationRules);\n\n                if (validationResult.length > 0) {\n                  var errorMessage = \"Error on plugin's \\\"\".concat(plugin.npm_name, \"\\\" \\\"\").concat(plugin.incidents[i].name, \"\\\" instantiation. Errors:\");\n\n                  for (var j = 0; j < validationResult.length; j++) {\n                    errorMessage += \"\\n - \".concat(validationResult[j].message, \". \").concat(validationResult[j].actual, \" provided\");\n                  }\n\n                  console.error(errorMessage); // eslint-disable-line no-console\n\n                  return {\n                    result: false,\n                    errors: validationResult\n                  };\n                } else {\n                  instantiatedIncident.attrsValidationRules = plugin.incidents[i].attributesValidationRules;\n                }\n              } else {\n                helper$1.warning(\"It's always good to provide attributesValidationRules to the exported incidents. \".concat(plugin.npm_name, \".\").concat(instantiatedIncident.constructor.name, \" doesn't provide it\"));\n              }\n\n              return instantiatedIncident;\n            };\n\n            return WrapperClass;\n          }\n        });\n      };\n\n      for (var i = 0; i < plugin.incidents.length; i++) {\n        _loop(i);\n      }\n    }\n\n    return thePlugin;\n  }\n  var AudioPlugin = loadPlugin(audioPluginMain);\n  var Clip$2 = DescriptiveClip;\n  var Group$1 = DescriptiveGroup;\n  var AudioClip$1 = AudioPlugin.Clip;\n  var AudioPlayback$1 = AudioPlugin.AudioPlayback;\n  var API = {\n    MonoIncident: MonoIncident,\n    Group: Group$1,\n    Clip: Clip$2,\n    AudioClip: DescriptiveAudioClip,\n    MediaPlayback: MediaPlay,\n    ExtendableClip: ExtendableClip,\n    DOMClip: Clip$1,\n    easings: easing,\n    clipFromDefinition: constructIncident\n  };\n  var main = {\n    API: API,\n    Group: Group$1,\n    Clip: Clip$2,\n    loadPlugin: loadPlugin,\n    AudioClip: AudioClip$1,\n    AudioPlayback: AudioPlayback$1,\n    AudioEffect: AudioPlugin.AudioEffect,\n    TimeCapsule: TimeCapsule\n  };\n\n  exports.API = API;\n  exports.AudioClip = AudioClip$1;\n  exports.AudioPlayback = AudioPlayback$1;\n  exports.Clip = Clip$2;\n  exports.Group = Group$1;\n  exports.TimeCapsule = TimeCapsule;\n  exports.default = main;\n  exports.loadPlugin = loadPlugin;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"../node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/motorcortex.umd.js\n");

/***/ }),

/***/ "../node_modules/es6-promise/dist/es6-promise.js":
/*!*******************************************************!*\
  !*** ../node_modules/es6-promise/dist/es6-promise.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, global) {/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.8+1e68dce6\n */\n\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\tundefined;\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\n\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var vertx = Function('return this')().require('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && \"function\" === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(2);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    var then$$1 = void 0;\n    try {\n      then$$1 = value.then;\n    } catch (error) {\n      reject(promise, error);\n      return;\n    }\n    handleMaybeThenable(promise, value, then$$1);\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = true;\n\n  if (hasCallback) {\n    try {\n      value = callback(detail);\n    } catch (e) {\n      succeeded = false;\n      error = e;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (succeeded === false) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve$$1 = c.resolve;\n\n\n    if (resolve$$1 === resolve$1) {\n      var _then = void 0;\n      var error = void 0;\n      var didError = false;\n      try {\n        _then = entry.then;\n      } catch (e) {\n        didError = true;\n        error = e;\n      }\n\n      if (_then === then && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise$1) {\n        var promise = new c(noop);\n        if (didError) {\n          reject(promise, error);\n        } else {\n          handleMaybeThenable(promise, entry, _then);\n        }\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve$$1(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise$1 = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    if (isFunction(callback)) {\n      return promise.then(function (value) {\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        return constructor.resolve(callback()).then(function () {\n          throw reason;\n        });\n      });\n    }\n\n    return promise.then(callback, callback);\n  };\n\n  return Promise;\n}();\n\nPromise$1.prototype.then = then;\nPromise$1.all = all;\nPromise$1.race = race;\nPromise$1.resolve = resolve$1;\nPromise$1.reject = reject$1;\nPromise$1._setScheduler = setScheduler;\nPromise$1._setAsap = setAsap;\nPromise$1._asap = asap;\n\n/*global self*/\nfunction polyfill() {\n  var local = void 0;\n\n  if (typeof global !== 'undefined') {\n    local = global;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n\n  var P = local.Promise;\n\n  if (P) {\n    var promiseToString = null;\n    try {\n      promiseToString = Object.prototype.toString.call(P.resolve());\n    } catch (e) {\n      // silently ignored\n    }\n\n    if (promiseToString === '[object Promise]' && !P.cast) {\n      return;\n    }\n  }\n\n  local.Promise = Promise$1;\n}\n\n// Strange compat..\nPromise$1.polyfill = polyfill;\nPromise$1.Promise = Promise$1;\n\nreturn Promise$1;\n\n})));\n\n\n\n//# sourceMappingURL=es6-promise.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"../node_modules/process/browser.js\"), __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"../node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/es6-promise/dist/es6-promise.js\n");

/***/ }),

/***/ "../node_modules/mc-animejs-core/lib/anime.es.js":
/*!*******************************************************!*\
  !*** ../node_modules/mc-animejs-core/lib/anime.es.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Promise) {/*\n * anime.js v3.1.0\n * (c) 2019 Julian Garnier\n * Released under the MIT license\n * animejs.com\n */\n\n// Defaults\n\nvar defaultInstanceSettings = {};\n\nvar defaultTweenSettings = {\n  duration: 1000,\n  round: 0\n};\n\nvar validTransforms = ['translateX', 'translateY', 'translateZ', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'scale', 'scaleX', 'scaleY', 'scaleZ', 'skew', 'skewX', 'skewY', 'perspective'];\n\n// Caching\n\nvar cache = {\n  CSS: {}\n};\n\n// Utils\n\nfunction minMax(val, min, max) {\n  return Math.min(Math.max(val, min), max);\n}\n\nfunction stringContains(str, text) {\n  return str.indexOf(text) > -1;\n}\n\nvar is = {\n  arr: function (a) { return Array.isArray(a); },\n  obj: function (a) { return stringContains(Object.prototype.toString.call(a), 'Object'); },\n  pth: function (a) { return is.obj(a) && a.hasOwnProperty('totalLength'); },\n  svg: function (a) { return a instanceof SVGElement; },\n  inp: function (a) { return a instanceof HTMLInputElement; },\n  dom: function (a) { return a.nodeType || is.svg(a); },\n  str: function (a) { return typeof a === 'string'; },\n  fnc: function (a) { return typeof a === 'function'; },\n  und: function (a) { return typeof a === 'undefined'; },\n  hex: function (a) { return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a); },\n  rgb: function (a) { return /^rgb/.test(a); },\n  hsl: function (a) { return /^hsl/.test(a); },\n  col: function (a) { return (is.hex(a) || is.rgb(a) || is.hsl(a)); },\n  key: function (a) { return !defaultInstanceSettings.hasOwnProperty(a) && !defaultTweenSettings.hasOwnProperty(a) && a !== 'targets' && a !== 'keyframes'; }\n};\n\nvar penner = (function () {\n\n  // Based on jQuery UI's implemenation of easing equations from Robert Penner (http://www.robertpenner.com/easing)\n\n  var eases = { linear: function () { return function (t) { return t; }; } };\n  return eases;\n\n})();\n\n\n// Strings\n\nfunction selectString(str) {\n  try {\n    var nodes = document.querySelectorAll(str);\n    return nodes;\n  }\n  catch (e) {\n    return;\n  }\n}\n\n// Arrays\n\nfunction filterArray(arr, callback) {\n  var len = arr.length;\n  var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n  var result = [];\n  for (var i = 0; i < len; i++) {\n    if (i in arr) {\n      var val = arr[i];\n      if (callback.call(thisArg, val, i, arr)) {\n        result.push(val);\n      }\n    }\n  }\n  return result;\n}\n\nfunction flattenArray(arr) {\n  return arr.reduce(function (a, b) { return a.concat(is.arr(b) ? flattenArray(b) : b); }, []);\n}\n\nfunction toArray(o) {\n  if (is.arr(o)) { return o; }\n  if (is.str(o)) { o = selectString(o) || o; }\n  if (o instanceof NodeList || o instanceof HTMLCollection) { return [].slice.call(o); }\n  return [o];\n}\n\nfunction arrayContains(arr, val) {\n  return arr.some(function (a) { return a === val; });\n}\n\n// Objects\n\nfunction cloneObject(o) {\n  var clone = {};\n  for (var p in o) { clone[p] = o[p]; }\n  return clone;\n}\n\nfunction replaceObjectProps(o1, o2) {\n  var o = cloneObject(o1);\n  for (var p in o1) { o[p] = o2.hasOwnProperty(p) ? o2[p] : o1[p]; }\n  return o;\n}\n\nfunction mergeObjects(o1, o2) {\n  var o = cloneObject(o1);\n  for (var p in o2) { o[p] = is.und(o1[p]) ? o2[p] : o1[p]; }\n  return o;\n}\n\n// Colors\n\nfunction rgbToRgba(rgbValue) {\n  var rgb = /rgb\\((\\d+,\\s*[\\d]+,\\s*[\\d]+)\\)/g.exec(rgbValue);\n  return rgb ? (\"rgba(\" + (rgb[1]) + \",1)\") : rgbValue;\n}\n\nfunction hexToRgba(hexValue) {\n  var rgx = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  var hex = hexValue.replace(rgx, function (m, r, g, b) { return r + r + g + g + b + b; });\n  var rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  var r = parseInt(rgb[1], 16);\n  var g = parseInt(rgb[2], 16);\n  var b = parseInt(rgb[3], 16);\n  return (\"rgba(\" + r + \",\" + g + \",\" + b + \",1)\");\n}\n\nfunction hslToRgba(hslValue) {\n  var hsl = /hsl\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%\\)/g.exec(hslValue) || /hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%,\\s*([\\d.]+)\\)/g.exec(hslValue);\n  var h = parseInt(hsl[1], 10) / 360;\n  var s = parseInt(hsl[2], 10) / 100;\n  var l = parseInt(hsl[3], 10) / 100;\n  var a = hsl[4] || 1;\n\n  function hue2rgb(p, q, t) {\n    if (t < 0) { t += 1; }\n    if (t > 1) { t -= 1; }\n    if (t < 1 / 6) { return p + (q - p) * 6 * t; }\n    if (t < 1 / 2) { return q; }\n    if (t < 2 / 3) { return p + (q - p) * (2 / 3 - t) * 6; }\n    return p;\n  }\n  var r, g, b;\n  if (s == 0) {\n    r = g = b = l;\n  }\n  else {\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n  return (\"rgba(\" + (r * 255) + \",\" + (g * 255) + \",\" + (b * 255) + \",\" + a + \")\");\n}\n\nfunction colorToRgb(val) {\n  if (is.rgb(val)) { return rgbToRgba(val); }\n  if (is.hex(val)) { return hexToRgba(val); }\n  if (is.hsl(val)) { return hslToRgba(val); }\n}\n\n// Units\n\nfunction getUnit(val) {\n  var split = /[+-]?\\d*\\.?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(val);\n  if (split) { return split[1]; }\n}\n\nfunction getTransformUnit(propName) {\n  if (stringContains(propName, 'translate') || propName === 'perspective') { return 'px'; }\n  if (stringContains(propName, 'rotate') || stringContains(propName, 'skew')) { return 'deg'; }\n}\n\n// Values\n\nfunction getFunctionValue(val, animatable) {\n  if (!is.fnc(val)) { return val; }\n  return val(animatable.target, animatable.id, animatable.total);\n}\n\nfunction getAttribute(el, prop) {\n  return el.getAttribute(prop);\n}\n\nfunction convertPxToUnit(el, value, unit) {\n  var valueUnit = getUnit(value);\n  if (arrayContains([unit, 'deg', 'rad', 'turn'], valueUnit)) { return value; }\n  var cached = cache.CSS[value + unit];\n  if (!is.und(cached)) { return cached; }\n  var baseline = 100;\n  var tempEl = document.createElement(el.tagName);\n  var parentEl = (el.parentNode && (el.parentNode !== document)) ? el.parentNode : document.body;\n  parentEl.appendChild(tempEl);\n  tempEl.style.position = 'absolute';\n  tempEl.style.width = baseline + unit;\n  var factor = baseline / tempEl.offsetWidth;\n  parentEl.removeChild(tempEl);\n  var convertedUnit = factor * parseFloat(value);\n  cache.CSS[value + unit] = convertedUnit;\n  return convertedUnit;\n}\n\nfunction getCSSValue(el, prop, unit) {\n  if (prop in el.style) {\n    var uppercasePropName = prop.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    var value = el.style[prop] || getComputedStyle(el).getPropertyValue(uppercasePropName) || '0';\n    return unit ? convertPxToUnit(el, value, unit) : value;\n  }\n}\n\nfunction getAnimationType(el, prop) {\n  if (is.dom(el) && !is.inp(el) && (getAttribute(el, prop) || (is.svg(el) && el[prop]))) { return 'attribute'; }\n  if (is.dom(el) && arrayContains(validTransforms, prop)) { return 'transform'; }\n  if (is.dom(el) && (prop !== 'transform' && getCSSValue(el, prop))) { return 'css'; }\n  if (el[prop] != null) { return 'object'; }\n}\n\nfunction getElementTransforms(el) {\n  if (!is.dom(el)) { return; }\n  var str = el.style.transform || '';\n  var reg = /(\\w+)\\(([^)]*)\\)/g;\n  var transforms = new Map();\n  var m;\n  while (m = reg.exec(str)) { transforms.set(m[1], m[2]); }\n  return transforms;\n}\n\nfunction getTransformValue(el, propName, animatable, unit) {\n  var defaultVal = stringContains(propName, 'scale') ? 1 : 0 + getTransformUnit(propName);\n  var value = getElementTransforms(el).get(propName) || defaultVal;\n  if (animatable) {\n    animatable.transforms.list.set(propName, value);\n    animatable.transforms['last'] = propName;\n  }\n  return unit ? convertPxToUnit(el, value, unit) : value;\n}\n\nfunction getOriginalTargetValue(target, propName, unit, animatable) {\n  switch (getAnimationType(target, propName)) {\n    case 'transform':\n      return getTransformValue(target, propName, animatable, unit);\n    case 'css':\n      return getCSSValue(target, propName, unit);\n    case 'attribute':\n      return getAttribute(target, propName);\n    default:\n      return target[propName] || 0;\n  }\n}\n\nfunction getRelativeValue(to, from) {\n  var operator = /^(\\*=|\\+=|-=)/.exec(to);\n  if (!operator) { return to; }\n  var u = getUnit(to) || 0;\n  var x = parseFloat(from);\n  var y = parseFloat(to.replace(operator[0], ''));\n  switch (operator[0][0]) {\n    case '+':\n      return x + y + u;\n    case '-':\n      return x - y + u;\n    case '*':\n      return x * y + u;\n  }\n}\n\nfunction validateValue(val, unit) {\n  if (is.col(val)) { return colorToRgb(val); }\n  if (/\\s/g.test(val)) { return val; }\n  var originalUnit = getUnit(val);\n  var unitLess = originalUnit ? val.substr(0, val.length - originalUnit.length) : val;\n  if (unit) { return unitLess + unit; }\n  return unitLess;\n}\n\n// Decompose value\n\nfunction decomposeValue(val, unit) {\n  // const rgx = /-?\\d*\\.?\\d+/g; // handles basic numbers\n  // const rgx = /[+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?/g; // handles exponents notation\n  var rgx = /[+-]?\\d*\\.?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?/g; // handles exponents notation\n  var value = validateValue((is.pth(val) ? val.totalLength : val), unit) + '';\n  return {\n    original: value,\n    numbers: value.match(rgx) ? value.match(rgx).map(Number) : [0],\n    strings: (is.str(val) || unit) ? value.split(rgx) : []\n  }\n}\n\n// Animatables\n\nfunction parseTargets(targets) {\n  var targetsArray = targets ? (flattenArray(is.arr(targets) ? targets.map(toArray) : toArray(targets))) : [];\n  return filterArray(targetsArray, function (item, pos, self) { return self.indexOf(item) === pos; });\n}\n\nfunction getAnimatables(targets) {\n  var parsed = parseTargets(targets);\n  return parsed.map(function (t, i) {\n    return { target: t, id: i, total: parsed.length, transforms: { list: getElementTransforms(t) } };\n  });\n}\n\n// Properties\n\nfunction normalizePropertyTweens(prop, tweenSettings) {\n  var settings = cloneObject(tweenSettings);\n  if (is.arr(prop)) {\n    var l = prop.length;\n    var isFromTo = (l === 2 && !is.obj(prop[0]));\n    if (!isFromTo) {\n      // Duration divided by the number of tweens\n      if (!is.fnc(tweenSettings.duration)) { settings.duration = tweenSettings.duration / l; }\n    }\n    else {\n      // Transform [from, to] values shorthand to a valid tween value\n      prop = { value: prop };\n    }\n  }\n  var propArray = is.arr(prop) ? prop : [prop];\n  return propArray.map(function (v, i) {\n    var obj = (is.obj(v) && !is.pth(v)) ? v : { value: v };\n    return obj;\n  }).map(function (k) { return mergeObjects(k, settings); });\n}\n\nfunction getProperties(tweenSettings, params) {\n  var properties = [];\n  for (var p in params) {\n    if (is.key(p)) {\n      properties.push({\n        name: p,\n        tweens: normalizePropertyTweens(params[p], tweenSettings)\n      });\n    }\n  }\n  return properties;\n}\n\n// Tweens\n\nfunction normalizeTweenValues(tween, animatable) {\n  var t = {};\n  for (var p in tween) {\n    var value = getFunctionValue(tween[p], animatable);\n    if (is.arr(value)) {\n      value = value.map(function (v) { return getFunctionValue(v, animatable); });\n      if (value.length === 1) { value = value[0]; }\n    }\n    t[p] = value;\n  }\n  t.duration = parseFloat(t.duration);\n  return t;\n}\n\nfunction normalizeTweens(prop, animatable) {\n  var previousTween;\n  return prop.tweens.map(function (t) {\n    var tween = normalizeTweenValues(t, animatable);\n    var tweenValue = tween.value;\n    var to = is.arr(tweenValue) ? tweenValue[1] : tweenValue;\n    var toUnit = getUnit(to);\n    var originalValue = getOriginalTargetValue(animatable.target, prop.name, toUnit, animatable);\n    var previousValue = previousTween ? previousTween.to.original : originalValue;\n    var from = is.arr(tweenValue) ? tweenValue[0] : previousValue;\n    var fromUnit = getUnit(from) || getUnit(originalValue);\n    var unit = toUnit || fromUnit;\n    if (is.und(to)) { to = previousValue; }\n    tween.from = decomposeValue(from, unit);\n    tween.to = decomposeValue(getRelativeValue(to, from), unit);\n    tween.start = previousTween ? previousTween.end : 0;\n    tween.end = tween.start + tween.duration;\n    tween.isPath = false;\n    tween.isColor = is.col(tween.from.original);\n    if (tween.isColor) { tween.round = 1; }\n    previousTween = tween;\n    return tween;\n  });\n}\n\n// Tween progress\n\nvar setProgressValue = {\n  css: function (t, p, v) { return t.style[p] = v; },\n  attribute: function (t, p, v) { return t.setAttribute(p, v); },\n  object: function (t, p, v) { return t[p] = v; },\n  transform: function (t, p, v, transforms, manual) {\n    transforms.list.set(p, v);\n    if (p === transforms.last || manual) {\n      var str = '';\n      transforms.list.forEach(function (value, prop) { str += prop + \"(\" + value + \") \"; });\n      t.style.transform = str;\n    }\n  }\n};\n\n// Set Value helper\n\nfunction setTargetsValue(targets, properties) {\n  var animatables = getAnimatables(targets);\n  animatables.forEach(function (animatable) {\n    for (var property in properties) {\n      var value = getFunctionValue(properties[property], animatable);\n      var target = animatable.target;\n      var valueUnit = getUnit(value);\n      var originalValue = getOriginalTargetValue(target, property, valueUnit, animatable);\n      var unit = valueUnit || getUnit(originalValue);\n      var to = getRelativeValue(validateValue(value, unit), originalValue);\n      var animType = getAnimationType(target, property);\n      setProgressValue[animType](target, property, to, animatable.transforms, true);\n    }\n  });\n}\n\n// Animations\n\nfunction createAnimation(animatable, prop) {\n  var animType = getAnimationType(animatable.target, prop.name);\n  if (animType) {\n    var tweens = normalizeTweens(prop, animatable);\n    var lastTween = tweens[tweens.length - 1];\n    return {\n      type: animType,\n      property: prop.name,\n      animatable: animatable,\n      tweens: tweens,\n      duration: lastTween.end\n    }\n  }\n}\n\nfunction getAnimations(animatables, properties) {\n  return filterArray(flattenArray(animatables.map(function (animatable) {\n    return properties.map(function (prop) {\n      return createAnimation(animatable, prop);\n    });\n  })), function (a) { return !is.und(a); });\n}\n\n// Create Instance\n\nfunction getInstanceTimings(animations, tweenSettings) {\n  var animLength = animations.length;\n  var timings = {};\n  timings.duration = animLength ? Math.max.apply(Math, animations.map(function (anim) { return anim.duration; })) : tweenSettings.duration;\n  return timings;\n}\n\nvar instanceID = 0;\n\nfunction createNewInstance(params) {\n  var instanceSettings = replaceObjectProps(defaultInstanceSettings, params);\n  var tweenSettings = replaceObjectProps(defaultTweenSettings, params);\n  var properties = getProperties(tweenSettings, params);\n  var animatables = getAnimatables(params.targets);\n  var animations = getAnimations(animatables, properties);\n  var timings = getInstanceTimings(animations, tweenSettings);\n  var id = instanceID;\n  instanceID++;\n  return mergeObjects(instanceSettings, {\n    id: id,\n    children: [],\n    animatables: animatables,\n    animations: animations,\n    duration: timings.duration\n  });\n}\n\n// Public Instance\n\nfunction anime(params) {\n  if ( params === void 0 ) params = {};\n\n  var children, childrenLength = 0;\n  var resolve = null;\n\n  function makePromise(instance) {\n    var promise = window.Promise && new Promise(function (_resolve) { return resolve = _resolve; });\n    instance.finished = promise;\n    return promise;\n  }\n\n  var instance = createNewInstance(params);\n  var promise = makePromise(instance);\n\n  function seekChild(time, child) {\n    if (child) { child.seek(time); }\n  }\n\n  function syncInstanceChildren(time) {\n    if (!instance.reversePlayback) {\n      for (var i = 0; i < childrenLength; i++) { seekChild(time, children[i]); }\n    }\n    else {\n      for (var i$1 = childrenLength; i$1--;) { seekChild(time, children[i$1]); }\n    }\n  }\n\n  function setAnimationsProgress(insTime) {\n    var i = 0;\n    var animations = instance.animations;\n    var animationsLength = animations.length;\n    while (i < animationsLength) {\n      var anim = animations[i];\n      var animatable = anim.animatable;\n      var tweens = anim.tweens;\n      var tweenLength = tweens.length - 1;\n      var tween = tweens[tweenLength];\n      // Only check for keyframes if there is more than one tween\n      if (tweenLength) { tween = filterArray(tweens, function (t) { return (insTime < t.end); })[0] || tween; }\n      var elapsed = minMax(insTime - tween.start, 0, tween.duration) / tween.duration;\n      var strings = tween.to.strings;\n      var round = tween.round;\n      var numbers = [];\n      var toNumbersLength = tween.to.numbers.length;\n      var progress = (void 0);\n      for (var n = 0; n < toNumbersLength; n++) {\n        var value = (void 0);\n        var toNumber = tween.to.numbers[n];\n        var fromNumber = tween.from.numbers[n] || 0;\n        value = fromNumber + (elapsed * (toNumber - fromNumber));\n\n        if (round) {\n          if (!(tween.isColor && n > 2)) {\n            value = Math.round(value * round) / round;\n          }\n        }\n        numbers.push(value);\n      }\n      // Manual Array.reduce for better performances\n      var stringsLength = strings.length;\n      if (!stringsLength) {\n        progress = numbers[0];\n      }\n      else {\n        progress = strings[0];\n        for (var s = 0; s < stringsLength; s++) {\n          var a = strings[s];\n          var b = strings[s + 1];\n          var n$1 = numbers[s];\n          if (!isNaN(n$1)) {\n            if (!b) {\n              progress += n$1 + ' ';\n            }\n            else {\n              progress += n$1 + b;\n            }\n          }\n        }\n      }\n      setProgressValue[anim.type](animatable.target, anim.property, progress, animatable.transforms);\n      anim.currentValue = progress;\n      i++;\n    }\n  }\n\n  function setInstanceProgress(engineTime) {\n    var insDuration = instance.duration;\n    var insTime = engineTime;\n    instance.progress = minMax((insTime / insDuration) * 100, 0, 100);\n    instance.reversePlayback = insTime < instance.currentTime;\n    if (children) { syncInstanceChildren(insTime); }\n    if (!instance.began && instance.currentTime > 0) {\n      instance.began = true;\n    }\n\n    setAnimationsProgress(insTime);\n\n    instance.currentTime = minMax(insTime, 0, insDuration);\n    if (engineTime >= insDuration) {\n      instance.paused = true;\n      if (!instance.completed) {\n        instance.completed = true;\n        if (!instance.passThrough && 'Promise' in window) {\n          resolve();\n          promise = makePromise(instance);\n        }\n      }\n    }\n  }\n\n  instance.reset = function() {\n    instance.passThrough = false;\n    instance.currentTime = 0;\n    instance.progress = 0;\n    instance.paused = true;\n    instance.began = false;\n    instance.completed = false;\n    instance.reversePlayback = false;\n    children = instance.children;\n    childrenLength = children.length;\n    for (var i = childrenLength; i--;) { instance.children[i].reset(); }\n  };\n\n  // Set Value helper\n\n  instance.set = function(targets, properties) {\n    setTargetsValue(targets, properties);\n    return instance;\n  };\n\n  instance.seek = function(time) {\n    setInstanceProgress(time);\n  };\n\n  instance.reset();\n\n  return instance;\n\n}\n\nanime.version = '3.1.0';\nanime.get = getOriginalTargetValue;\nanime.set = setTargetsValue;\nanime.convertPx = convertPxToUnit;\nanime.penner = penner;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (anime);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! es6-promise */ \"../node_modules/es6-promise/dist/es6-promise.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL21jLWFuaW1lanMtY29yZS9saWIvYW5pbWUuZXMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL21jLWFuaW1lanMtY29yZS9saWIvYW5pbWUuZXMuanM/NjBhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogYW5pbWUuanMgdjMuMS4wXG4gKiAoYykgMjAxOSBKdWxpYW4gR2FybmllclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBhbmltZWpzLmNvbVxuICovXG5cbi8vIERlZmF1bHRzXG5cbnZhciBkZWZhdWx0SW5zdGFuY2VTZXR0aW5ncyA9IHt9O1xuXG52YXIgZGVmYXVsdFR3ZWVuU2V0dGluZ3MgPSB7XG4gIGR1cmF0aW9uOiAxMDAwLFxuICByb3VuZDogMFxufTtcblxudmFyIHZhbGlkVHJhbnNmb3JtcyA9IFsndHJhbnNsYXRlWCcsICd0cmFuc2xhdGVZJywgJ3RyYW5zbGF0ZVonLCAncm90YXRlJywgJ3JvdGF0ZVgnLCAncm90YXRlWScsICdyb3RhdGVaJywgJ3NjYWxlJywgJ3NjYWxlWCcsICdzY2FsZVknLCAnc2NhbGVaJywgJ3NrZXcnLCAnc2tld1gnLCAnc2tld1knLCAncGVyc3BlY3RpdmUnXTtcblxuLy8gQ2FjaGluZ1xuXG52YXIgY2FjaGUgPSB7XG4gIENTUzoge31cbn07XG5cbi8vIFV0aWxzXG5cbmZ1bmN0aW9uIG1pbk1heCh2YWwsIG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2YWwsIG1pbiksIG1heCk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ0NvbnRhaW5zKHN0ciwgdGV4dCkge1xuICByZXR1cm4gc3RyLmluZGV4T2YodGV4dCkgPiAtMTtcbn1cblxudmFyIGlzID0ge1xuICBhcnI6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBBcnJheS5pc0FycmF5KGEpOyB9LFxuICBvYmo6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBzdHJpbmdDb250YWlucyhPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSksICdPYmplY3QnKTsgfSxcbiAgcHRoOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gaXMub2JqKGEpICYmIGEuaGFzT3duUHJvcGVydHkoJ3RvdGFsTGVuZ3RoJyk7IH0sXG4gIHN2ZzogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEgaW5zdGFuY2VvZiBTVkdFbGVtZW50OyB9LFxuICBpbnA6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBhIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudDsgfSxcbiAgZG9tOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5ub2RlVHlwZSB8fCBpcy5zdmcoYSk7IH0sXG4gIHN0cjogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIHR5cGVvZiBhID09PSAnc3RyaW5nJzsgfSxcbiAgZm5jOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gdHlwZW9mIGEgPT09ICdmdW5jdGlvbic7IH0sXG4gIHVuZDogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIHR5cGVvZiBhID09PSAndW5kZWZpbmVkJzsgfSxcbiAgaGV4OiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gLyheI1swLTlBLUZdezZ9JCl8KF4jWzAtOUEtRl17M30kKS9pLnRlc3QoYSk7IH0sXG4gIHJnYjogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIC9ecmdiLy50ZXN0KGEpOyB9LFxuICBoc2w6IGZ1bmN0aW9uIChhKSB7IHJldHVybiAvXmhzbC8udGVzdChhKTsgfSxcbiAgY29sOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gKGlzLmhleChhKSB8fCBpcy5yZ2IoYSkgfHwgaXMuaHNsKGEpKTsgfSxcbiAga2V5OiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gIWRlZmF1bHRJbnN0YW5jZVNldHRpbmdzLmhhc093blByb3BlcnR5KGEpICYmICFkZWZhdWx0VHdlZW5TZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShhKSAmJiBhICE9PSAndGFyZ2V0cycgJiYgYSAhPT0gJ2tleWZyYW1lcyc7IH1cbn07XG5cbnZhciBwZW5uZXIgPSAoZnVuY3Rpb24gKCkge1xuXG4gIC8vIEJhc2VkIG9uIGpRdWVyeSBVSSdzIGltcGxlbWVuYXRpb24gb2YgZWFzaW5nIGVxdWF0aW9ucyBmcm9tIFJvYmVydCBQZW5uZXIgKGh0dHA6Ly93d3cucm9iZXJ0cGVubmVyLmNvbS9lYXNpbmcpXG5cbiAgdmFyIGVhc2VzID0geyBsaW5lYXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiB0OyB9OyB9IH07XG4gIHJldHVybiBlYXNlcztcblxufSkoKTtcblxuXG4vLyBTdHJpbmdzXG5cbmZ1bmN0aW9uIHNlbGVjdFN0cmluZyhzdHIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgbm9kZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHN0cik7XG4gICAgcmV0dXJuIG5vZGVzO1xuICB9XG4gIGNhdGNoIChlKSB7XG4gICAgcmV0dXJuO1xuICB9XG59XG5cbi8vIEFycmF5c1xuXG5mdW5jdGlvbiBmaWx0ZXJBcnJheShhcnIsIGNhbGxiYWNrKSB7XG4gIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMiA/IGFyZ3VtZW50c1sxXSA6IHZvaWQgMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGkgaW4gYXJyKSB7XG4gICAgICB2YXIgdmFsID0gYXJyW2ldO1xuICAgICAgaWYgKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsLCBpLCBhcnIpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHZhbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5BcnJheShhcnIpIHtcbiAgcmV0dXJuIGFyci5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuY29uY2F0KGlzLmFycihiKSA/IGZsYXR0ZW5BcnJheShiKSA6IGIpOyB9LCBbXSk7XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkobykge1xuICBpZiAoaXMuYXJyKG8pKSB7IHJldHVybiBvOyB9XG4gIGlmIChpcy5zdHIobykpIHsgbyA9IHNlbGVjdFN0cmluZyhvKSB8fCBvOyB9XG4gIGlmIChvIGluc3RhbmNlb2YgTm9kZUxpc3QgfHwgbyBpbnN0YW5jZW9mIEhUTUxDb2xsZWN0aW9uKSB7IHJldHVybiBbXS5zbGljZS5jYWxsKG8pOyB9XG4gIHJldHVybiBbb107XG59XG5cbmZ1bmN0aW9uIGFycmF5Q29udGFpbnMoYXJyLCB2YWwpIHtcbiAgcmV0dXJuIGFyci5zb21lKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhID09PSB2YWw7IH0pO1xufVxuXG4vLyBPYmplY3RzXG5cbmZ1bmN0aW9uIGNsb25lT2JqZWN0KG8pIHtcbiAgdmFyIGNsb25lID0ge307XG4gIGZvciAodmFyIHAgaW4gbykgeyBjbG9uZVtwXSA9IG9bcF07IH1cbiAgcmV0dXJuIGNsb25lO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlT2JqZWN0UHJvcHMobzEsIG8yKSB7XG4gIHZhciBvID0gY2xvbmVPYmplY3QobzEpO1xuICBmb3IgKHZhciBwIGluIG8xKSB7IG9bcF0gPSBvMi5oYXNPd25Qcm9wZXJ0eShwKSA/IG8yW3BdIDogbzFbcF07IH1cbiAgcmV0dXJuIG87XG59XG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0cyhvMSwgbzIpIHtcbiAgdmFyIG8gPSBjbG9uZU9iamVjdChvMSk7XG4gIGZvciAodmFyIHAgaW4gbzIpIHsgb1twXSA9IGlzLnVuZChvMVtwXSkgPyBvMltwXSA6IG8xW3BdOyB9XG4gIHJldHVybiBvO1xufVxuXG4vLyBDb2xvcnNcblxuZnVuY3Rpb24gcmdiVG9SZ2JhKHJnYlZhbHVlKSB7XG4gIHZhciByZ2IgPSAvcmdiXFwoKFxcZCssXFxzKltcXGRdKyxcXHMqW1xcZF0rKVxcKS9nLmV4ZWMocmdiVmFsdWUpO1xuICByZXR1cm4gcmdiID8gKFwicmdiYShcIiArIChyZ2JbMV0pICsgXCIsMSlcIikgOiByZ2JWYWx1ZTtcbn1cblxuZnVuY3Rpb24gaGV4VG9SZ2JhKGhleFZhbHVlKSB7XG4gIHZhciByZ3ggPSAvXiM/KFthLWZcXGRdKShbYS1mXFxkXSkoW2EtZlxcZF0pJC9pO1xuICB2YXIgaGV4ID0gaGV4VmFsdWUucmVwbGFjZShyZ3gsIGZ1bmN0aW9uIChtLCByLCBnLCBiKSB7IHJldHVybiByICsgciArIGcgKyBnICsgYiArIGI7IH0pO1xuICB2YXIgcmdiID0gL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaS5leGVjKGhleCk7XG4gIHZhciByID0gcGFyc2VJbnQocmdiWzFdLCAxNik7XG4gIHZhciBnID0gcGFyc2VJbnQocmdiWzJdLCAxNik7XG4gIHZhciBiID0gcGFyc2VJbnQocmdiWzNdLCAxNik7XG4gIHJldHVybiAoXCJyZ2JhKFwiICsgciArIFwiLFwiICsgZyArIFwiLFwiICsgYiArIFwiLDEpXCIpO1xufVxuXG5mdW5jdGlvbiBoc2xUb1JnYmEoaHNsVmFsdWUpIHtcbiAgdmFyIGhzbCA9IC9oc2xcXCgoXFxkKyksXFxzKihbXFxkLl0rKSUsXFxzKihbXFxkLl0rKSVcXCkvZy5leGVjKGhzbFZhbHVlKSB8fCAvaHNsYVxcKChcXGQrKSxcXHMqKFtcXGQuXSspJSxcXHMqKFtcXGQuXSspJSxcXHMqKFtcXGQuXSspXFwpL2cuZXhlYyhoc2xWYWx1ZSk7XG4gIHZhciBoID0gcGFyc2VJbnQoaHNsWzFdLCAxMCkgLyAzNjA7XG4gIHZhciBzID0gcGFyc2VJbnQoaHNsWzJdLCAxMCkgLyAxMDA7XG4gIHZhciBsID0gcGFyc2VJbnQoaHNsWzNdLCAxMCkgLyAxMDA7XG4gIHZhciBhID0gaHNsWzRdIHx8IDE7XG5cbiAgZnVuY3Rpb24gaHVlMnJnYihwLCBxLCB0KSB7XG4gICAgaWYgKHQgPCAwKSB7IHQgKz0gMTsgfVxuICAgIGlmICh0ID4gMSkgeyB0IC09IDE7IH1cbiAgICBpZiAodCA8IDEgLyA2KSB7IHJldHVybiBwICsgKHEgLSBwKSAqIDYgKiB0OyB9XG4gICAgaWYgKHQgPCAxIC8gMikgeyByZXR1cm4gcTsgfVxuICAgIGlmICh0IDwgMiAvIDMpIHsgcmV0dXJuIHAgKyAocSAtIHApICogKDIgLyAzIC0gdCkgKiA2OyB9XG4gICAgcmV0dXJuIHA7XG4gIH1cbiAgdmFyIHIsIGcsIGI7XG4gIGlmIChzID09IDApIHtcbiAgICByID0gZyA9IGIgPSBsO1xuICB9XG4gIGVsc2Uge1xuICAgIHZhciBxID0gbCA8IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSBsICogcztcbiAgICB2YXIgcCA9IDIgKiBsIC0gcTtcbiAgICByID0gaHVlMnJnYihwLCBxLCBoICsgMSAvIDMpO1xuICAgIGcgPSBodWUycmdiKHAsIHEsIGgpO1xuICAgIGIgPSBodWUycmdiKHAsIHEsIGggLSAxIC8gMyk7XG4gIH1cbiAgcmV0dXJuIChcInJnYmEoXCIgKyAociAqIDI1NSkgKyBcIixcIiArIChnICogMjU1KSArIFwiLFwiICsgKGIgKiAyNTUpICsgXCIsXCIgKyBhICsgXCIpXCIpO1xufVxuXG5mdW5jdGlvbiBjb2xvclRvUmdiKHZhbCkge1xuICBpZiAoaXMucmdiKHZhbCkpIHsgcmV0dXJuIHJnYlRvUmdiYSh2YWwpOyB9XG4gIGlmIChpcy5oZXgodmFsKSkgeyByZXR1cm4gaGV4VG9SZ2JhKHZhbCk7IH1cbiAgaWYgKGlzLmhzbCh2YWwpKSB7IHJldHVybiBoc2xUb1JnYmEodmFsKTsgfVxufVxuXG4vLyBVbml0c1xuXG5mdW5jdGlvbiBnZXRVbml0KHZhbCkge1xuICB2YXIgc3BsaXQgPSAvWystXT9cXGQqXFwuP1xcZCsoPzpcXC5cXGQrKT8oPzpbZUVdWystXT9cXGQrKT8oJXxweHxwdHxlbXxyZW18aW58Y218bW18ZXh8Y2h8cGN8dnd8dmh8dm1pbnx2bWF4fGRlZ3xyYWR8dHVybik/JC8uZXhlYyh2YWwpO1xuICBpZiAoc3BsaXQpIHsgcmV0dXJuIHNwbGl0WzFdOyB9XG59XG5cbmZ1bmN0aW9uIGdldFRyYW5zZm9ybVVuaXQocHJvcE5hbWUpIHtcbiAgaWYgKHN0cmluZ0NvbnRhaW5zKHByb3BOYW1lLCAndHJhbnNsYXRlJykgfHwgcHJvcE5hbWUgPT09ICdwZXJzcGVjdGl2ZScpIHsgcmV0dXJuICdweCc7IH1cbiAgaWYgKHN0cmluZ0NvbnRhaW5zKHByb3BOYW1lLCAncm90YXRlJykgfHwgc3RyaW5nQ29udGFpbnMocHJvcE5hbWUsICdza2V3JykpIHsgcmV0dXJuICdkZWcnOyB9XG59XG5cbi8vIFZhbHVlc1xuXG5mdW5jdGlvbiBnZXRGdW5jdGlvblZhbHVlKHZhbCwgYW5pbWF0YWJsZSkge1xuICBpZiAoIWlzLmZuYyh2YWwpKSB7IHJldHVybiB2YWw7IH1cbiAgcmV0dXJuIHZhbChhbmltYXRhYmxlLnRhcmdldCwgYW5pbWF0YWJsZS5pZCwgYW5pbWF0YWJsZS50b3RhbCk7XG59XG5cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZShlbCwgcHJvcCkge1xuICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKHByb3ApO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0UHhUb1VuaXQoZWwsIHZhbHVlLCB1bml0KSB7XG4gIHZhciB2YWx1ZVVuaXQgPSBnZXRVbml0KHZhbHVlKTtcbiAgaWYgKGFycmF5Q29udGFpbnMoW3VuaXQsICdkZWcnLCAncmFkJywgJ3R1cm4nXSwgdmFsdWVVbml0KSkgeyByZXR1cm4gdmFsdWU7IH1cbiAgdmFyIGNhY2hlZCA9IGNhY2hlLkNTU1t2YWx1ZSArIHVuaXRdO1xuICBpZiAoIWlzLnVuZChjYWNoZWQpKSB7IHJldHVybiBjYWNoZWQ7IH1cbiAgdmFyIGJhc2VsaW5lID0gMTAwO1xuICB2YXIgdGVtcEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbC50YWdOYW1lKTtcbiAgdmFyIHBhcmVudEVsID0gKGVsLnBhcmVudE5vZGUgJiYgKGVsLnBhcmVudE5vZGUgIT09IGRvY3VtZW50KSkgPyBlbC5wYXJlbnROb2RlIDogZG9jdW1lbnQuYm9keTtcbiAgcGFyZW50RWwuYXBwZW5kQ2hpbGQodGVtcEVsKTtcbiAgdGVtcEVsLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgdGVtcEVsLnN0eWxlLndpZHRoID0gYmFzZWxpbmUgKyB1bml0O1xuICB2YXIgZmFjdG9yID0gYmFzZWxpbmUgLyB0ZW1wRWwub2Zmc2V0V2lkdGg7XG4gIHBhcmVudEVsLnJlbW92ZUNoaWxkKHRlbXBFbCk7XG4gIHZhciBjb252ZXJ0ZWRVbml0ID0gZmFjdG9yICogcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIGNhY2hlLkNTU1t2YWx1ZSArIHVuaXRdID0gY29udmVydGVkVW5pdDtcbiAgcmV0dXJuIGNvbnZlcnRlZFVuaXQ7XG59XG5cbmZ1bmN0aW9uIGdldENTU1ZhbHVlKGVsLCBwcm9wLCB1bml0KSB7XG4gIGlmIChwcm9wIGluIGVsLnN0eWxlKSB7XG4gICAgdmFyIHVwcGVyY2FzZVByb3BOYW1lID0gcHJvcC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciB2YWx1ZSA9IGVsLnN0eWxlW3Byb3BdIHx8IGdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUodXBwZXJjYXNlUHJvcE5hbWUpIHx8ICcwJztcbiAgICByZXR1cm4gdW5pdCA/IGNvbnZlcnRQeFRvVW5pdChlbCwgdmFsdWUsIHVuaXQpIDogdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QW5pbWF0aW9uVHlwZShlbCwgcHJvcCkge1xuICBpZiAoaXMuZG9tKGVsKSAmJiAhaXMuaW5wKGVsKSAmJiAoZ2V0QXR0cmlidXRlKGVsLCBwcm9wKSB8fCAoaXMuc3ZnKGVsKSAmJiBlbFtwcm9wXSkpKSB7IHJldHVybiAnYXR0cmlidXRlJzsgfVxuICBpZiAoaXMuZG9tKGVsKSAmJiBhcnJheUNvbnRhaW5zKHZhbGlkVHJhbnNmb3JtcywgcHJvcCkpIHsgcmV0dXJuICd0cmFuc2Zvcm0nOyB9XG4gIGlmIChpcy5kb20oZWwpICYmIChwcm9wICE9PSAndHJhbnNmb3JtJyAmJiBnZXRDU1NWYWx1ZShlbCwgcHJvcCkpKSB7IHJldHVybiAnY3NzJzsgfVxuICBpZiAoZWxbcHJvcF0gIT0gbnVsbCkgeyByZXR1cm4gJ29iamVjdCc7IH1cbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudFRyYW5zZm9ybXMoZWwpIHtcbiAgaWYgKCFpcy5kb20oZWwpKSB7IHJldHVybjsgfVxuICB2YXIgc3RyID0gZWwuc3R5bGUudHJhbnNmb3JtIHx8ICcnO1xuICB2YXIgcmVnID0gLyhcXHcrKVxcKChbXildKilcXCkvZztcbiAgdmFyIHRyYW5zZm9ybXMgPSBuZXcgTWFwKCk7XG4gIHZhciBtO1xuICB3aGlsZSAobSA9IHJlZy5leGVjKHN0cikpIHsgdHJhbnNmb3Jtcy5zZXQobVsxXSwgbVsyXSk7IH1cbiAgcmV0dXJuIHRyYW5zZm9ybXM7XG59XG5cbmZ1bmN0aW9uIGdldFRyYW5zZm9ybVZhbHVlKGVsLCBwcm9wTmFtZSwgYW5pbWF0YWJsZSwgdW5pdCkge1xuICB2YXIgZGVmYXVsdFZhbCA9IHN0cmluZ0NvbnRhaW5zKHByb3BOYW1lLCAnc2NhbGUnKSA/IDEgOiAwICsgZ2V0VHJhbnNmb3JtVW5pdChwcm9wTmFtZSk7XG4gIHZhciB2YWx1ZSA9IGdldEVsZW1lbnRUcmFuc2Zvcm1zKGVsKS5nZXQocHJvcE5hbWUpIHx8IGRlZmF1bHRWYWw7XG4gIGlmIChhbmltYXRhYmxlKSB7XG4gICAgYW5pbWF0YWJsZS50cmFuc2Zvcm1zLmxpc3Quc2V0KHByb3BOYW1lLCB2YWx1ZSk7XG4gICAgYW5pbWF0YWJsZS50cmFuc2Zvcm1zWydsYXN0J10gPSBwcm9wTmFtZTtcbiAgfVxuICByZXR1cm4gdW5pdCA/IGNvbnZlcnRQeFRvVW5pdChlbCwgdmFsdWUsIHVuaXQpIDogdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGdldE9yaWdpbmFsVGFyZ2V0VmFsdWUodGFyZ2V0LCBwcm9wTmFtZSwgdW5pdCwgYW5pbWF0YWJsZSkge1xuICBzd2l0Y2ggKGdldEFuaW1hdGlvblR5cGUodGFyZ2V0LCBwcm9wTmFtZSkpIHtcbiAgICBjYXNlICd0cmFuc2Zvcm0nOlxuICAgICAgcmV0dXJuIGdldFRyYW5zZm9ybVZhbHVlKHRhcmdldCwgcHJvcE5hbWUsIGFuaW1hdGFibGUsIHVuaXQpO1xuICAgIGNhc2UgJ2Nzcyc6XG4gICAgICByZXR1cm4gZ2V0Q1NTVmFsdWUodGFyZ2V0LCBwcm9wTmFtZSwgdW5pdCk7XG4gICAgY2FzZSAnYXR0cmlidXRlJzpcbiAgICAgIHJldHVybiBnZXRBdHRyaWJ1dGUodGFyZ2V0LCBwcm9wTmFtZSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB0YXJnZXRbcHJvcE5hbWVdIHx8IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UmVsYXRpdmVWYWx1ZSh0bywgZnJvbSkge1xuICB2YXIgb3BlcmF0b3IgPSAvXihcXCo9fFxcKz18LT0pLy5leGVjKHRvKTtcbiAgaWYgKCFvcGVyYXRvcikgeyByZXR1cm4gdG87IH1cbiAgdmFyIHUgPSBnZXRVbml0KHRvKSB8fCAwO1xuICB2YXIgeCA9IHBhcnNlRmxvYXQoZnJvbSk7XG4gIHZhciB5ID0gcGFyc2VGbG9hdCh0by5yZXBsYWNlKG9wZXJhdG9yWzBdLCAnJykpO1xuICBzd2l0Y2ggKG9wZXJhdG9yWzBdWzBdKSB7XG4gICAgY2FzZSAnKyc6XG4gICAgICByZXR1cm4geCArIHkgKyB1O1xuICAgIGNhc2UgJy0nOlxuICAgICAgcmV0dXJuIHggLSB5ICsgdTtcbiAgICBjYXNlICcqJzpcbiAgICAgIHJldHVybiB4ICogeSArIHU7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVWYWx1ZSh2YWwsIHVuaXQpIHtcbiAgaWYgKGlzLmNvbCh2YWwpKSB7IHJldHVybiBjb2xvclRvUmdiKHZhbCk7IH1cbiAgaWYgKC9cXHMvZy50ZXN0KHZhbCkpIHsgcmV0dXJuIHZhbDsgfVxuICB2YXIgb3JpZ2luYWxVbml0ID0gZ2V0VW5pdCh2YWwpO1xuICB2YXIgdW5pdExlc3MgPSBvcmlnaW5hbFVuaXQgPyB2YWwuc3Vic3RyKDAsIHZhbC5sZW5ndGggLSBvcmlnaW5hbFVuaXQubGVuZ3RoKSA6IHZhbDtcbiAgaWYgKHVuaXQpIHsgcmV0dXJuIHVuaXRMZXNzICsgdW5pdDsgfVxuICByZXR1cm4gdW5pdExlc3M7XG59XG5cbi8vIERlY29tcG9zZSB2YWx1ZVxuXG5mdW5jdGlvbiBkZWNvbXBvc2VWYWx1ZSh2YWwsIHVuaXQpIHtcbiAgLy8gY29uc3Qgcmd4ID0gLy0/XFxkKlxcLj9cXGQrL2c7IC8vIGhhbmRsZXMgYmFzaWMgbnVtYmVyc1xuICAvLyBjb25zdCByZ3ggPSAvWystXT9cXGQrKD86XFwuXFxkKyk/KD86W2VFXVsrLV0/XFxkKyk/L2c7IC8vIGhhbmRsZXMgZXhwb25lbnRzIG5vdGF0aW9uXG4gIHZhciByZ3ggPSAvWystXT9cXGQqXFwuP1xcZCsoPzpcXC5cXGQrKT8oPzpbZUVdWystXT9cXGQrKT8vZzsgLy8gaGFuZGxlcyBleHBvbmVudHMgbm90YXRpb25cbiAgdmFyIHZhbHVlID0gdmFsaWRhdGVWYWx1ZSgoaXMucHRoKHZhbCkgPyB2YWwudG90YWxMZW5ndGggOiB2YWwpLCB1bml0KSArICcnO1xuICByZXR1cm4ge1xuICAgIG9yaWdpbmFsOiB2YWx1ZSxcbiAgICBudW1iZXJzOiB2YWx1ZS5tYXRjaChyZ3gpID8gdmFsdWUubWF0Y2gocmd4KS5tYXAoTnVtYmVyKSA6IFswXSxcbiAgICBzdHJpbmdzOiAoaXMuc3RyKHZhbCkgfHwgdW5pdCkgPyB2YWx1ZS5zcGxpdChyZ3gpIDogW11cbiAgfVxufVxuXG4vLyBBbmltYXRhYmxlc1xuXG5mdW5jdGlvbiBwYXJzZVRhcmdldHModGFyZ2V0cykge1xuICB2YXIgdGFyZ2V0c0FycmF5ID0gdGFyZ2V0cyA/IChmbGF0dGVuQXJyYXkoaXMuYXJyKHRhcmdldHMpID8gdGFyZ2V0cy5tYXAodG9BcnJheSkgOiB0b0FycmF5KHRhcmdldHMpKSkgOiBbXTtcbiAgcmV0dXJuIGZpbHRlckFycmF5KHRhcmdldHNBcnJheSwgZnVuY3Rpb24gKGl0ZW0sIHBvcywgc2VsZikgeyByZXR1cm4gc2VsZi5pbmRleE9mKGl0ZW0pID09PSBwb3M7IH0pO1xufVxuXG5mdW5jdGlvbiBnZXRBbmltYXRhYmxlcyh0YXJnZXRzKSB7XG4gIHZhciBwYXJzZWQgPSBwYXJzZVRhcmdldHModGFyZ2V0cyk7XG4gIHJldHVybiBwYXJzZWQubWFwKGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgcmV0dXJuIHsgdGFyZ2V0OiB0LCBpZDogaSwgdG90YWw6IHBhcnNlZC5sZW5ndGgsIHRyYW5zZm9ybXM6IHsgbGlzdDogZ2V0RWxlbWVudFRyYW5zZm9ybXModCkgfSB9O1xuICB9KTtcbn1cblxuLy8gUHJvcGVydGllc1xuXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wZXJ0eVR3ZWVucyhwcm9wLCB0d2VlblNldHRpbmdzKSB7XG4gIHZhciBzZXR0aW5ncyA9IGNsb25lT2JqZWN0KHR3ZWVuU2V0dGluZ3MpO1xuICBpZiAoaXMuYXJyKHByb3ApKSB7XG4gICAgdmFyIGwgPSBwcm9wLmxlbmd0aDtcbiAgICB2YXIgaXNGcm9tVG8gPSAobCA9PT0gMiAmJiAhaXMub2JqKHByb3BbMF0pKTtcbiAgICBpZiAoIWlzRnJvbVRvKSB7XG4gICAgICAvLyBEdXJhdGlvbiBkaXZpZGVkIGJ5IHRoZSBudW1iZXIgb2YgdHdlZW5zXG4gICAgICBpZiAoIWlzLmZuYyh0d2VlblNldHRpbmdzLmR1cmF0aW9uKSkgeyBzZXR0aW5ncy5kdXJhdGlvbiA9IHR3ZWVuU2V0dGluZ3MuZHVyYXRpb24gLyBsOyB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gVHJhbnNmb3JtIFtmcm9tLCB0b10gdmFsdWVzIHNob3J0aGFuZCB0byBhIHZhbGlkIHR3ZWVuIHZhbHVlXG4gICAgICBwcm9wID0geyB2YWx1ZTogcHJvcCB9O1xuICAgIH1cbiAgfVxuICB2YXIgcHJvcEFycmF5ID0gaXMuYXJyKHByb3ApID8gcHJvcCA6IFtwcm9wXTtcbiAgcmV0dXJuIHByb3BBcnJheS5tYXAoZnVuY3Rpb24gKHYsIGkpIHtcbiAgICB2YXIgb2JqID0gKGlzLm9iaih2KSAmJiAhaXMucHRoKHYpKSA/IHYgOiB7IHZhbHVlOiB2IH07XG4gICAgcmV0dXJuIG9iajtcbiAgfSkubWFwKGZ1bmN0aW9uIChrKSB7IHJldHVybiBtZXJnZU9iamVjdHMoaywgc2V0dGluZ3MpOyB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcGVydGllcyh0d2VlblNldHRpbmdzLCBwYXJhbXMpIHtcbiAgdmFyIHByb3BlcnRpZXMgPSBbXTtcbiAgZm9yICh2YXIgcCBpbiBwYXJhbXMpIHtcbiAgICBpZiAoaXMua2V5KHApKSB7XG4gICAgICBwcm9wZXJ0aWVzLnB1c2goe1xuICAgICAgICBuYW1lOiBwLFxuICAgICAgICB0d2VlbnM6IG5vcm1hbGl6ZVByb3BlcnR5VHdlZW5zKHBhcmFtc1twXSwgdHdlZW5TZXR0aW5ncylcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcHJvcGVydGllcztcbn1cblxuLy8gVHdlZW5zXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVR3ZWVuVmFsdWVzKHR3ZWVuLCBhbmltYXRhYmxlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gdHdlZW4pIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRGdW5jdGlvblZhbHVlKHR3ZWVuW3BdLCBhbmltYXRhYmxlKTtcbiAgICBpZiAoaXMuYXJyKHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGdldEZ1bmN0aW9uVmFsdWUodiwgYW5pbWF0YWJsZSk7IH0pO1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMSkgeyB2YWx1ZSA9IHZhbHVlWzBdOyB9XG4gICAgfVxuICAgIHRbcF0gPSB2YWx1ZTtcbiAgfVxuICB0LmR1cmF0aW9uID0gcGFyc2VGbG9hdCh0LmR1cmF0aW9uKTtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVR3ZWVucyhwcm9wLCBhbmltYXRhYmxlKSB7XG4gIHZhciBwcmV2aW91c1R3ZWVuO1xuICByZXR1cm4gcHJvcC50d2VlbnMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIHR3ZWVuID0gbm9ybWFsaXplVHdlZW5WYWx1ZXModCwgYW5pbWF0YWJsZSk7XG4gICAgdmFyIHR3ZWVuVmFsdWUgPSB0d2Vlbi52YWx1ZTtcbiAgICB2YXIgdG8gPSBpcy5hcnIodHdlZW5WYWx1ZSkgPyB0d2VlblZhbHVlWzFdIDogdHdlZW5WYWx1ZTtcbiAgICB2YXIgdG9Vbml0ID0gZ2V0VW5pdCh0byk7XG4gICAgdmFyIG9yaWdpbmFsVmFsdWUgPSBnZXRPcmlnaW5hbFRhcmdldFZhbHVlKGFuaW1hdGFibGUudGFyZ2V0LCBwcm9wLm5hbWUsIHRvVW5pdCwgYW5pbWF0YWJsZSk7XG4gICAgdmFyIHByZXZpb3VzVmFsdWUgPSBwcmV2aW91c1R3ZWVuID8gcHJldmlvdXNUd2Vlbi50by5vcmlnaW5hbCA6IG9yaWdpbmFsVmFsdWU7XG4gICAgdmFyIGZyb20gPSBpcy5hcnIodHdlZW5WYWx1ZSkgPyB0d2VlblZhbHVlWzBdIDogcHJldmlvdXNWYWx1ZTtcbiAgICB2YXIgZnJvbVVuaXQgPSBnZXRVbml0KGZyb20pIHx8IGdldFVuaXQob3JpZ2luYWxWYWx1ZSk7XG4gICAgdmFyIHVuaXQgPSB0b1VuaXQgfHwgZnJvbVVuaXQ7XG4gICAgaWYgKGlzLnVuZCh0bykpIHsgdG8gPSBwcmV2aW91c1ZhbHVlOyB9XG4gICAgdHdlZW4uZnJvbSA9IGRlY29tcG9zZVZhbHVlKGZyb20sIHVuaXQpO1xuICAgIHR3ZWVuLnRvID0gZGVjb21wb3NlVmFsdWUoZ2V0UmVsYXRpdmVWYWx1ZSh0bywgZnJvbSksIHVuaXQpO1xuICAgIHR3ZWVuLnN0YXJ0ID0gcHJldmlvdXNUd2VlbiA/IHByZXZpb3VzVHdlZW4uZW5kIDogMDtcbiAgICB0d2Vlbi5lbmQgPSB0d2Vlbi5zdGFydCArIHR3ZWVuLmR1cmF0aW9uO1xuICAgIHR3ZWVuLmlzUGF0aCA9IGZhbHNlO1xuICAgIHR3ZWVuLmlzQ29sb3IgPSBpcy5jb2wodHdlZW4uZnJvbS5vcmlnaW5hbCk7XG4gICAgaWYgKHR3ZWVuLmlzQ29sb3IpIHsgdHdlZW4ucm91bmQgPSAxOyB9XG4gICAgcHJldmlvdXNUd2VlbiA9IHR3ZWVuO1xuICAgIHJldHVybiB0d2VlbjtcbiAgfSk7XG59XG5cbi8vIFR3ZWVuIHByb2dyZXNzXG5cbnZhciBzZXRQcm9ncmVzc1ZhbHVlID0ge1xuICBjc3M6IGZ1bmN0aW9uICh0LCBwLCB2KSB7IHJldHVybiB0LnN0eWxlW3BdID0gdjsgfSxcbiAgYXR0cmlidXRlOiBmdW5jdGlvbiAodCwgcCwgdikgeyByZXR1cm4gdC5zZXRBdHRyaWJ1dGUocCwgdik7IH0sXG4gIG9iamVjdDogZnVuY3Rpb24gKHQsIHAsIHYpIHsgcmV0dXJuIHRbcF0gPSB2OyB9LFxuICB0cmFuc2Zvcm06IGZ1bmN0aW9uICh0LCBwLCB2LCB0cmFuc2Zvcm1zLCBtYW51YWwpIHtcbiAgICB0cmFuc2Zvcm1zLmxpc3Quc2V0KHAsIHYpO1xuICAgIGlmIChwID09PSB0cmFuc2Zvcm1zLmxhc3QgfHwgbWFudWFsKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG4gICAgICB0cmFuc2Zvcm1zLmxpc3QuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIHByb3ApIHsgc3RyICs9IHByb3AgKyBcIihcIiArIHZhbHVlICsgXCIpIFwiOyB9KTtcbiAgICAgIHQuc3R5bGUudHJhbnNmb3JtID0gc3RyO1xuICAgIH1cbiAgfVxufTtcblxuLy8gU2V0IFZhbHVlIGhlbHBlclxuXG5mdW5jdGlvbiBzZXRUYXJnZXRzVmFsdWUodGFyZ2V0cywgcHJvcGVydGllcykge1xuICB2YXIgYW5pbWF0YWJsZXMgPSBnZXRBbmltYXRhYmxlcyh0YXJnZXRzKTtcbiAgYW5pbWF0YWJsZXMuZm9yRWFjaChmdW5jdGlvbiAoYW5pbWF0YWJsZSkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldEZ1bmN0aW9uVmFsdWUocHJvcGVydGllc1twcm9wZXJ0eV0sIGFuaW1hdGFibGUpO1xuICAgICAgdmFyIHRhcmdldCA9IGFuaW1hdGFibGUudGFyZ2V0O1xuICAgICAgdmFyIHZhbHVlVW5pdCA9IGdldFVuaXQodmFsdWUpO1xuICAgICAgdmFyIG9yaWdpbmFsVmFsdWUgPSBnZXRPcmlnaW5hbFRhcmdldFZhbHVlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlVW5pdCwgYW5pbWF0YWJsZSk7XG4gICAgICB2YXIgdW5pdCA9IHZhbHVlVW5pdCB8fCBnZXRVbml0KG9yaWdpbmFsVmFsdWUpO1xuICAgICAgdmFyIHRvID0gZ2V0UmVsYXRpdmVWYWx1ZSh2YWxpZGF0ZVZhbHVlKHZhbHVlLCB1bml0KSwgb3JpZ2luYWxWYWx1ZSk7XG4gICAgICB2YXIgYW5pbVR5cGUgPSBnZXRBbmltYXRpb25UeXBlKHRhcmdldCwgcHJvcGVydHkpO1xuICAgICAgc2V0UHJvZ3Jlc3NWYWx1ZVthbmltVHlwZV0odGFyZ2V0LCBwcm9wZXJ0eSwgdG8sIGFuaW1hdGFibGUudHJhbnNmb3JtcywgdHJ1ZSk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gQW5pbWF0aW9uc1xuXG5mdW5jdGlvbiBjcmVhdGVBbmltYXRpb24oYW5pbWF0YWJsZSwgcHJvcCkge1xuICB2YXIgYW5pbVR5cGUgPSBnZXRBbmltYXRpb25UeXBlKGFuaW1hdGFibGUudGFyZ2V0LCBwcm9wLm5hbWUpO1xuICBpZiAoYW5pbVR5cGUpIHtcbiAgICB2YXIgdHdlZW5zID0gbm9ybWFsaXplVHdlZW5zKHByb3AsIGFuaW1hdGFibGUpO1xuICAgIHZhciBsYXN0VHdlZW4gPSB0d2VlbnNbdHdlZW5zLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBhbmltVHlwZSxcbiAgICAgIHByb3BlcnR5OiBwcm9wLm5hbWUsXG4gICAgICBhbmltYXRhYmxlOiBhbmltYXRhYmxlLFxuICAgICAgdHdlZW5zOiB0d2VlbnMsXG4gICAgICBkdXJhdGlvbjogbGFzdFR3ZWVuLmVuZFxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRBbmltYXRpb25zKGFuaW1hdGFibGVzLCBwcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBmaWx0ZXJBcnJheShmbGF0dGVuQXJyYXkoYW5pbWF0YWJsZXMubWFwKGZ1bmN0aW9uIChhbmltYXRhYmxlKSB7XG4gICAgcmV0dXJuIHByb3BlcnRpZXMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQW5pbWF0aW9uKGFuaW1hdGFibGUsIHByb3ApO1xuICAgIH0pO1xuICB9KSksIGZ1bmN0aW9uIChhKSB7IHJldHVybiAhaXMudW5kKGEpOyB9KTtcbn1cblxuLy8gQ3JlYXRlIEluc3RhbmNlXG5cbmZ1bmN0aW9uIGdldEluc3RhbmNlVGltaW5ncyhhbmltYXRpb25zLCB0d2VlblNldHRpbmdzKSB7XG4gIHZhciBhbmltTGVuZ3RoID0gYW5pbWF0aW9ucy5sZW5ndGg7XG4gIHZhciB0aW1pbmdzID0ge307XG4gIHRpbWluZ3MuZHVyYXRpb24gPSBhbmltTGVuZ3RoID8gTWF0aC5tYXguYXBwbHkoTWF0aCwgYW5pbWF0aW9ucy5tYXAoZnVuY3Rpb24gKGFuaW0pIHsgcmV0dXJuIGFuaW0uZHVyYXRpb247IH0pKSA6IHR3ZWVuU2V0dGluZ3MuZHVyYXRpb247XG4gIHJldHVybiB0aW1pbmdzO1xufVxuXG52YXIgaW5zdGFuY2VJRCA9IDA7XG5cbmZ1bmN0aW9uIGNyZWF0ZU5ld0luc3RhbmNlKHBhcmFtcykge1xuICB2YXIgaW5zdGFuY2VTZXR0aW5ncyA9IHJlcGxhY2VPYmplY3RQcm9wcyhkZWZhdWx0SW5zdGFuY2VTZXR0aW5ncywgcGFyYW1zKTtcbiAgdmFyIHR3ZWVuU2V0dGluZ3MgPSByZXBsYWNlT2JqZWN0UHJvcHMoZGVmYXVsdFR3ZWVuU2V0dGluZ3MsIHBhcmFtcyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gZ2V0UHJvcGVydGllcyh0d2VlblNldHRpbmdzLCBwYXJhbXMpO1xuICB2YXIgYW5pbWF0YWJsZXMgPSBnZXRBbmltYXRhYmxlcyhwYXJhbXMudGFyZ2V0cyk7XG4gIHZhciBhbmltYXRpb25zID0gZ2V0QW5pbWF0aW9ucyhhbmltYXRhYmxlcywgcHJvcGVydGllcyk7XG4gIHZhciB0aW1pbmdzID0gZ2V0SW5zdGFuY2VUaW1pbmdzKGFuaW1hdGlvbnMsIHR3ZWVuU2V0dGluZ3MpO1xuICB2YXIgaWQgPSBpbnN0YW5jZUlEO1xuICBpbnN0YW5jZUlEKys7XG4gIHJldHVybiBtZXJnZU9iamVjdHMoaW5zdGFuY2VTZXR0aW5ncywge1xuICAgIGlkOiBpZCxcbiAgICBjaGlsZHJlbjogW10sXG4gICAgYW5pbWF0YWJsZXM6IGFuaW1hdGFibGVzLFxuICAgIGFuaW1hdGlvbnM6IGFuaW1hdGlvbnMsXG4gICAgZHVyYXRpb246IHRpbWluZ3MuZHVyYXRpb25cbiAgfSk7XG59XG5cbi8vIFB1YmxpYyBJbnN0YW5jZVxuXG5mdW5jdGlvbiBhbmltZShwYXJhbXMpIHtcbiAgaWYgKCBwYXJhbXMgPT09IHZvaWQgMCApIHBhcmFtcyA9IHt9O1xuXG4gIHZhciBjaGlsZHJlbiwgY2hpbGRyZW5MZW5ndGggPSAwO1xuICB2YXIgcmVzb2x2ZSA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbWFrZVByb21pc2UoaW5zdGFuY2UpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHdpbmRvdy5Qcm9taXNlICYmIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChfcmVzb2x2ZSkgeyByZXR1cm4gcmVzb2x2ZSA9IF9yZXNvbHZlOyB9KTtcbiAgICBpbnN0YW5jZS5maW5pc2hlZCA9IHByb21pc2U7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICB2YXIgaW5zdGFuY2UgPSBjcmVhdGVOZXdJbnN0YW5jZShwYXJhbXMpO1xuICB2YXIgcHJvbWlzZSA9IG1ha2VQcm9taXNlKGluc3RhbmNlKTtcblxuICBmdW5jdGlvbiBzZWVrQ2hpbGQodGltZSwgY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQpIHsgY2hpbGQuc2Vlayh0aW1lKTsgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3luY0luc3RhbmNlQ2hpbGRyZW4odGltZSkge1xuICAgIGlmICghaW5zdGFuY2UucmV2ZXJzZVBsYXliYWNrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHsgc2Vla0NoaWxkKHRpbWUsIGNoaWxkcmVuW2ldKTsgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IGNoaWxkcmVuTGVuZ3RoOyBpJDEtLTspIHsgc2Vla0NoaWxkKHRpbWUsIGNoaWxkcmVuW2kkMV0pOyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0QW5pbWF0aW9uc1Byb2dyZXNzKGluc1RpbWUpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFuaW1hdGlvbnMgPSBpbnN0YW5jZS5hbmltYXRpb25zO1xuICAgIHZhciBhbmltYXRpb25zTGVuZ3RoID0gYW5pbWF0aW9ucy5sZW5ndGg7XG4gICAgd2hpbGUgKGkgPCBhbmltYXRpb25zTGVuZ3RoKSB7XG4gICAgICB2YXIgYW5pbSA9IGFuaW1hdGlvbnNbaV07XG4gICAgICB2YXIgYW5pbWF0YWJsZSA9IGFuaW0uYW5pbWF0YWJsZTtcbiAgICAgIHZhciB0d2VlbnMgPSBhbmltLnR3ZWVucztcbiAgICAgIHZhciB0d2Vlbkxlbmd0aCA9IHR3ZWVucy5sZW5ndGggLSAxO1xuICAgICAgdmFyIHR3ZWVuID0gdHdlZW5zW3R3ZWVuTGVuZ3RoXTtcbiAgICAgIC8vIE9ubHkgY2hlY2sgZm9yIGtleWZyYW1lcyBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHR3ZWVuXG4gICAgICBpZiAodHdlZW5MZW5ndGgpIHsgdHdlZW4gPSBmaWx0ZXJBcnJheSh0d2VlbnMsIGZ1bmN0aW9uICh0KSB7IHJldHVybiAoaW5zVGltZSA8IHQuZW5kKTsgfSlbMF0gfHwgdHdlZW47IH1cbiAgICAgIHZhciBlbGFwc2VkID0gbWluTWF4KGluc1RpbWUgLSB0d2Vlbi5zdGFydCwgMCwgdHdlZW4uZHVyYXRpb24pIC8gdHdlZW4uZHVyYXRpb247XG4gICAgICB2YXIgc3RyaW5ncyA9IHR3ZWVuLnRvLnN0cmluZ3M7XG4gICAgICB2YXIgcm91bmQgPSB0d2Vlbi5yb3VuZDtcbiAgICAgIHZhciBudW1iZXJzID0gW107XG4gICAgICB2YXIgdG9OdW1iZXJzTGVuZ3RoID0gdHdlZW4udG8ubnVtYmVycy5sZW5ndGg7XG4gICAgICB2YXIgcHJvZ3Jlc3MgPSAodm9pZCAwKTtcbiAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgdG9OdW1iZXJzTGVuZ3RoOyBuKyspIHtcbiAgICAgICAgdmFyIHZhbHVlID0gKHZvaWQgMCk7XG4gICAgICAgIHZhciB0b051bWJlciA9IHR3ZWVuLnRvLm51bWJlcnNbbl07XG4gICAgICAgIHZhciBmcm9tTnVtYmVyID0gdHdlZW4uZnJvbS5udW1iZXJzW25dIHx8IDA7XG4gICAgICAgIHZhbHVlID0gZnJvbU51bWJlciArIChlbGFwc2VkICogKHRvTnVtYmVyIC0gZnJvbU51bWJlcikpO1xuXG4gICAgICAgIGlmIChyb3VuZCkge1xuICAgICAgICAgIGlmICghKHR3ZWVuLmlzQ29sb3IgJiYgbiA+IDIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUgKiByb3VuZCkgLyByb3VuZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbnVtYmVycy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIC8vIE1hbnVhbCBBcnJheS5yZWR1Y2UgZm9yIGJldHRlciBwZXJmb3JtYW5jZXNcbiAgICAgIHZhciBzdHJpbmdzTGVuZ3RoID0gc3RyaW5ncy5sZW5ndGg7XG4gICAgICBpZiAoIXN0cmluZ3NMZW5ndGgpIHtcbiAgICAgICAgcHJvZ3Jlc3MgPSBudW1iZXJzWzBdO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHByb2dyZXNzID0gc3RyaW5nc1swXTtcbiAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCBzdHJpbmdzTGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICB2YXIgYSA9IHN0cmluZ3Nbc107XG4gICAgICAgICAgdmFyIGIgPSBzdHJpbmdzW3MgKyAxXTtcbiAgICAgICAgICB2YXIgbiQxID0gbnVtYmVyc1tzXTtcbiAgICAgICAgICBpZiAoIWlzTmFOKG4kMSkpIHtcbiAgICAgICAgICAgIGlmICghYikge1xuICAgICAgICAgICAgICBwcm9ncmVzcyArPSBuJDEgKyAnICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgcHJvZ3Jlc3MgKz0gbiQxICsgYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNldFByb2dyZXNzVmFsdWVbYW5pbS50eXBlXShhbmltYXRhYmxlLnRhcmdldCwgYW5pbS5wcm9wZXJ0eSwgcHJvZ3Jlc3MsIGFuaW1hdGFibGUudHJhbnNmb3Jtcyk7XG4gICAgICBhbmltLmN1cnJlbnRWYWx1ZSA9IHByb2dyZXNzO1xuICAgICAgaSsrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEluc3RhbmNlUHJvZ3Jlc3MoZW5naW5lVGltZSkge1xuICAgIHZhciBpbnNEdXJhdGlvbiA9IGluc3RhbmNlLmR1cmF0aW9uO1xuICAgIHZhciBpbnNUaW1lID0gZW5naW5lVGltZTtcbiAgICBpbnN0YW5jZS5wcm9ncmVzcyA9IG1pbk1heCgoaW5zVGltZSAvIGluc0R1cmF0aW9uKSAqIDEwMCwgMCwgMTAwKTtcbiAgICBpbnN0YW5jZS5yZXZlcnNlUGxheWJhY2sgPSBpbnNUaW1lIDwgaW5zdGFuY2UuY3VycmVudFRpbWU7XG4gICAgaWYgKGNoaWxkcmVuKSB7IHN5bmNJbnN0YW5jZUNoaWxkcmVuKGluc1RpbWUpOyB9XG4gICAgaWYgKCFpbnN0YW5jZS5iZWdhbiAmJiBpbnN0YW5jZS5jdXJyZW50VGltZSA+IDApIHtcbiAgICAgIGluc3RhbmNlLmJlZ2FuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBzZXRBbmltYXRpb25zUHJvZ3Jlc3MoaW5zVGltZSk7XG5cbiAgICBpbnN0YW5jZS5jdXJyZW50VGltZSA9IG1pbk1heChpbnNUaW1lLCAwLCBpbnNEdXJhdGlvbik7XG4gICAgaWYgKGVuZ2luZVRpbWUgPj0gaW5zRHVyYXRpb24pIHtcbiAgICAgIGluc3RhbmNlLnBhdXNlZCA9IHRydWU7XG4gICAgICBpZiAoIWluc3RhbmNlLmNvbXBsZXRlZCkge1xuICAgICAgICBpbnN0YW5jZS5jb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoIWluc3RhbmNlLnBhc3NUaHJvdWdoICYmICdQcm9taXNlJyBpbiB3aW5kb3cpIHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgcHJvbWlzZSA9IG1ha2VQcm9taXNlKGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGluc3RhbmNlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgaW5zdGFuY2UucGFzc1Rocm91Z2ggPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5jdXJyZW50VGltZSA9IDA7XG4gICAgaW5zdGFuY2UucHJvZ3Jlc3MgPSAwO1xuICAgIGluc3RhbmNlLnBhdXNlZCA9IHRydWU7XG4gICAgaW5zdGFuY2UuYmVnYW4gPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5jb21wbGV0ZWQgPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5yZXZlcnNlUGxheWJhY2sgPSBmYWxzZTtcbiAgICBjaGlsZHJlbiA9IGluc3RhbmNlLmNoaWxkcmVuO1xuICAgIGNoaWxkcmVuTGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSBjaGlsZHJlbkxlbmd0aDsgaS0tOykgeyBpbnN0YW5jZS5jaGlsZHJlbltpXS5yZXNldCgpOyB9XG4gIH07XG5cbiAgLy8gU2V0IFZhbHVlIGhlbHBlclxuXG4gIGluc3RhbmNlLnNldCA9IGZ1bmN0aW9uKHRhcmdldHMsIHByb3BlcnRpZXMpIHtcbiAgICBzZXRUYXJnZXRzVmFsdWUodGFyZ2V0cywgcHJvcGVydGllcyk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xuXG4gIGluc3RhbmNlLnNlZWsgPSBmdW5jdGlvbih0aW1lKSB7XG4gICAgc2V0SW5zdGFuY2VQcm9ncmVzcyh0aW1lKTtcbiAgfTtcblxuICBpbnN0YW5jZS5yZXNldCgpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcblxufVxuXG5hbmltZS52ZXJzaW9uID0gJzMuMS4wJztcbmFuaW1lLmdldCA9IGdldE9yaWdpbmFsVGFyZ2V0VmFsdWU7XG5hbmltZS5zZXQgPSBzZXRUYXJnZXRzVmFsdWU7XG5hbmltZS5jb252ZXJ0UHggPSBjb252ZXJ0UHhUb1VuaXQ7XG5hbmltZS5wZW5uZXIgPSBwZW5uZXI7XG5cbmV4cG9ydCBkZWZhdWx0IGFuaW1lO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/mc-animejs-core/lib/anime.es.js\n");

/***/ }),

/***/ "../node_modules/process/browser.js":
/*!******************************************!*\
  !*** ../node_modules/process/browser.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/process/browser.js\n");

/***/ }),

/***/ "../node_modules/webpack/buildin/global.js":
/*!*************************************************!*\
  !*** ../node_modules/webpack/buildin/global.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanM/YTQyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "../src/Anime.js":
/*!***********************!*\
  !*** ../src/Anime.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Anime; });\n/* harmony import */ var mc_animejs_core_lib_anime_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mc-animejs-core/lib/anime.es.js */ \"../node_modules/mc-animejs-core/lib/anime.es.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar MC = __webpack_require__(/*! @kissmybutton/motorcortex */ \"../node_modules/@kissmybutton/motorcortex/dist/motorcortex.umd.js\");\n\n\n\nvar compoAttributes = __webpack_require__(/*! ./compoAttributes */ \"../src/compoAttributes.js\");\n\nvar getMatrix2D = __webpack_require__(/*! ./matrix2d */ \"../src/matrix2d.js\");\n\nvar Anime = /*#__PURE__*/function (_MC$API$MonoIncident) {\n  _inherits(Anime, _MC$API$MonoIncident);\n\n  function Anime() {\n    _classCallCheck(this, Anime);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Anime).apply(this, arguments));\n  }\n\n  _createClass(Anime, [{\n    key: \"onGetContext\",\n    value: function onGetContext() {\n      var options = {};\n      var initialize = {};\n\n      if (compoAttributes.hasOwnProperty(this.attributeKey)) {\n        var compoAttribute = compoAttributes[this.attributeKey];\n\n        for (var i = 0; i < compoAttribute.length; i++) {\n          if (!this.targetValue.hasOwnProperty(compoAttribute[i])) {\n            continue;\n          }\n\n          options[compoAttribute[i]] = [this.getInitialValue()[compoAttribute[i]], this.targetValue[compoAttribute[i]]];\n          initialize[compoAttribute[i]] = [this.getScratchValue(), this.targetValue[compoAttribute[i]]];\n        }\n      } else {\n        options[this.attributeKey] = [this.getInitialValue(), this.targetValue];\n        initialize[this.targetValue] = [this.getScratchValue(), this.targetValue];\n      }\n\n      this.target = Object(mc_animejs_core_lib_anime_es_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_objectSpread({\n        autoplay: false,\n        duration: this.props.duration,\n        easing: \"linear\",\n        targets: this.element\n      }, (this.attrs || {}).attrs || {}, {}, options)); // handle first render initial values\n    }\n  }, {\n    key: \"getScratchValue\",\n    value: function getScratchValue() {\n      if (this.attributeKey === \"transform\") {\n        var obj = {};\n        var transform = compoAttributes[this.attributeKey];\n        var currentTransform = getMatrix2D(this.context.window, this.element);\n\n        for (var i = 0; i < transform.length; i++) {\n          if (currentTransform.hasOwnProperty(transform[i])) {\n            obj[transform[i]] = currentTransform[transform[i]];\n          } else {\n            obj[transform[i]] = mc_animejs_core_lib_anime_es_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(this.element, transform[i]);\n          }\n        }\n\n        return obj;\n      }\n\n      return mc_animejs_core_lib_anime_es_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(this.element, this.attributeKey);\n    }\n  }, {\n    key: \"onProgress\",\n    value: function onProgress(f) {\n      return this.target.seek(this.target.duration * f);\n    }\n  }]);\n\n  return Anime;\n}(MC.API.MonoIncident);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL0FuaW1lLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy9BbmltZS5qcz8zYjhmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1DID0gcmVxdWlyZShcIkBraXNzbXlidXR0b24vbW90b3Jjb3J0ZXhcIik7XHJcbmltcG9ydCBhbmltZSBmcm9tIFwibWMtYW5pbWVqcy1jb3JlL2xpYi9hbmltZS5lcy5qc1wiO1xyXG5jb25zdCBjb21wb0F0dHJpYnV0ZXMgPSByZXF1aXJlKFwiLi9jb21wb0F0dHJpYnV0ZXNcIik7XHJcbmNvbnN0IGdldE1hdHJpeDJEID0gcmVxdWlyZShcIi4vbWF0cml4MmRcIik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmltZSBleHRlbmRzIE1DLkFQSS5Nb25vSW5jaWRlbnQge1xyXG4gIG9uR2V0Q29udGV4dCgpIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7fTtcclxuICAgIGNvbnN0IGluaXRpYWxpemUgPSB7fTtcclxuICAgIGlmIChjb21wb0F0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkodGhpcy5hdHRyaWJ1dGVLZXkpKSB7XHJcbiAgICAgIGNvbnN0IGNvbXBvQXR0cmlidXRlID0gY29tcG9BdHRyaWJ1dGVzW3RoaXMuYXR0cmlidXRlS2V5XTtcclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcG9BdHRyaWJ1dGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoIXRoaXMudGFyZ2V0VmFsdWUuaGFzT3duUHJvcGVydHkoY29tcG9BdHRyaWJ1dGVbaV0pKSB7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgb3B0aW9uc1tjb21wb0F0dHJpYnV0ZVtpXV0gPSBbXHJcbiAgICAgICAgICB0aGlzLmdldEluaXRpYWxWYWx1ZSgpW2NvbXBvQXR0cmlidXRlW2ldXSxcclxuICAgICAgICAgIHRoaXMudGFyZ2V0VmFsdWVbY29tcG9BdHRyaWJ1dGVbaV1dXHJcbiAgICAgICAgXTtcclxuICAgICAgICBpbml0aWFsaXplW2NvbXBvQXR0cmlidXRlW2ldXSA9IFtcclxuICAgICAgICAgIHRoaXMuZ2V0U2NyYXRjaFZhbHVlKCksXHJcbiAgICAgICAgICB0aGlzLnRhcmdldFZhbHVlW2NvbXBvQXR0cmlidXRlW2ldXVxyXG4gICAgICAgIF07XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG9wdGlvbnNbdGhpcy5hdHRyaWJ1dGVLZXldID0gW3RoaXMuZ2V0SW5pdGlhbFZhbHVlKCksIHRoaXMudGFyZ2V0VmFsdWVdO1xyXG4gICAgICBpbml0aWFsaXplW3RoaXMudGFyZ2V0VmFsdWVdID0gW3RoaXMuZ2V0U2NyYXRjaFZhbHVlKCksIHRoaXMudGFyZ2V0VmFsdWVdO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudGFyZ2V0ID0gYW5pbWUoe1xyXG4gICAgICBhdXRvcGxheTogZmFsc2UsXHJcbiAgICAgIGR1cmF0aW9uOiB0aGlzLnByb3BzLmR1cmF0aW9uLFxyXG4gICAgICBlYXNpbmc6IFwibGluZWFyXCIsXHJcbiAgICAgIHRhcmdldHM6IHRoaXMuZWxlbWVudCxcclxuICAgICAgLi4uKCh0aGlzLmF0dHJzIHx8IHt9KS5hdHRycyB8fCB7fSksXHJcbiAgICAgIC4uLm9wdGlvbnNcclxuICAgIH0pOyAvLyBoYW5kbGUgZmlyc3QgcmVuZGVyIGluaXRpYWwgdmFsdWVzXHJcbiAgfVxyXG5cclxuICBnZXRTY3JhdGNoVmFsdWUoKSB7XHJcbiAgICBpZiAodGhpcy5hdHRyaWJ1dGVLZXkgPT09IFwidHJhbnNmb3JtXCIpIHtcclxuICAgICAgY29uc3Qgb2JqID0ge307XHJcbiAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IGNvbXBvQXR0cmlidXRlc1t0aGlzLmF0dHJpYnV0ZUtleV07XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm0gPSBnZXRNYXRyaXgyRCh0aGlzLmNvbnRleHQud2luZG93LCB0aGlzLmVsZW1lbnQpO1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmFuc2Zvcm0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoY3VycmVudFRyYW5zZm9ybS5oYXNPd25Qcm9wZXJ0eSh0cmFuc2Zvcm1baV0pKSB7XHJcbiAgICAgICAgICBvYmpbdHJhbnNmb3JtW2ldXSA9IGN1cnJlbnRUcmFuc2Zvcm1bdHJhbnNmb3JtW2ldXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgb2JqW3RyYW5zZm9ybVtpXV0gPSBhbmltZS5nZXQodGhpcy5lbGVtZW50LCB0cmFuc2Zvcm1baV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuICAgIHJldHVybiBhbmltZS5nZXQodGhpcy5lbGVtZW50LCB0aGlzLmF0dHJpYnV0ZUtleSk7XHJcbiAgfVxyXG5cclxuICBvblByb2dyZXNzKGYpIHtcclxuICAgIHJldHVybiB0aGlzLnRhcmdldC5zZWVrKHRoaXMudGFyZ2V0LmR1cmF0aW9uICogZik7XHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBSUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFRQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7OztBQXhEQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../src/Anime.js\n");

/***/ }),

/***/ "../src/compoAttributes.js":
/*!*********************************!*\
  !*** ../src/compoAttributes.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  transform: [\"translateX\", \"translateY\", \"translateZ\", \"rotate\", \"rotateX\", \"rotateY\", \"rotateZ\", \"scale\", \"scaleX\", \"scaleY\", \"scaleZ\", \"skewX\", \"skewY\", \"perspective\"]\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2NvbXBvQXR0cmlidXRlcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zcmMvY29tcG9BdHRyaWJ1dGVzLmpzPzdiZjciXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgdHJhbnNmb3JtOiBbXHJcbiAgICBcInRyYW5zbGF0ZVhcIixcclxuICAgIFwidHJhbnNsYXRlWVwiLFxyXG4gICAgXCJ0cmFuc2xhdGVaXCIsXHJcbiAgICBcInJvdGF0ZVwiLFxyXG4gICAgXCJyb3RhdGVYXCIsXHJcbiAgICBcInJvdGF0ZVlcIixcclxuICAgIFwicm90YXRlWlwiLFxyXG4gICAgXCJzY2FsZVwiLFxyXG4gICAgXCJzY2FsZVhcIixcclxuICAgIFwic2NhbGVZXCIsXHJcbiAgICBcInNjYWxlWlwiLFxyXG4gICAgXCJza2V3WFwiLFxyXG4gICAgXCJza2V3WVwiLFxyXG4gICAgXCJwZXJzcGVjdGl2ZVwiXHJcbiAgXVxyXG59O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFEQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../src/compoAttributes.js\n");

/***/ }),

/***/ "../src/main.js":
/*!**********************!*\
  !*** ../src/main.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Anime = __webpack_require__(/*! ./Anime */ \"../src/Anime.js\");\n\nvar compositeAttributes = __webpack_require__(/*! ./compoAttributes */ \"../src/compoAttributes.js\");\n\nvar validations = __webpack_require__(/*! ./validation */ \"../src/validation.js\");\n\nmodule.exports = {\n  npm_name: \"@kissmybutton/motorcortex-anime\",\n  incidents: [{\n    exportable: Anime,\n    name: \"Anime\",\n    attributesValidationRules: validations\n  }],\n  compositeAttributes: compositeAttributes\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL21haW4uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL21haW4uanM/ZDNmZSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBbmltZSA9IHJlcXVpcmUoXCIuL0FuaW1lXCIpO1xyXG5jb25zdCBjb21wb3NpdGVBdHRyaWJ1dGVzID0gcmVxdWlyZShcIi4vY29tcG9BdHRyaWJ1dGVzXCIpO1xyXG5jb25zdCB2YWxpZGF0aW9ucyA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRpb25cIik7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBucG1fbmFtZTogXCJAa2lzc215YnV0dG9uL21vdG9yY29ydGV4LWFuaW1lXCIsXHJcbiAgaW5jaWRlbnRzOiBbXHJcbiAgICB7XHJcbiAgICAgIGV4cG9ydGFibGU6IEFuaW1lLFxyXG4gICAgICBuYW1lOiBcIkFuaW1lXCIsXHJcbiAgICAgIGF0dHJpYnV0ZXNWYWxpZGF0aW9uUnVsZXM6IHZhbGlkYXRpb25zXHJcbiAgICB9XHJcbiAgXSxcclxuICBjb21wb3NpdGVBdHRyaWJ1dGVzXHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBSEE7QUFNQTtBQVRBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../src/main.js\n");

/***/ }),

/***/ "../src/matrix2d.js":
/*!**************************!*\
  !*** ../src/matrix2d.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction getMatrix2D(win, element) {\n  var transform = win.getComputedStyle(element).transform;\n\n  if (transform === \"\" || transform === \"none\") {\n    return {};\n  }\n\n  var values = transform.split(\"(\")[1].split(\")\")[0].split(\",\");\n\n  var qrDecompone = function qrDecompone(a) {\n    var angle = Math.atan2(a[1], a[0]),\n        denom = Math.pow(a[0], 2) + Math.pow(a[1], 2),\n        denom2 = Math.pow(a[2], 2) + Math.pow(a[3], 2),\n        scaleX = Math.sqrt(denom),\n        scaleY = (a[0] * a[3] - a[2] * a[1]) / scaleX,\n        skewX = Math.atan2(a[0] * a[2] + a[1] * a[3], denom),\n        skewY = Math.atan2(a[1] * a[3] + a[0] * a[2], denom2);\n    return {\n      rotate: angle / (Math.PI / 180) + \"deg\",\n      // this is rotation angle in degrees\n      scaleX: scaleX,\n      // scaleX factor\n      scaleY: scaleY,\n      // scaleY factor\n      skewX: (denom === 1 ? skewX / (Math.PI / 180) : 0) + \"deg\",\n      // skewX angle degrees\n      skewY: (denom2 === 1 ? skewY / (Math.PI / 180) : 0) + \"deg\",\n      // skewY angle degrees\n      translateX: a[4] + \"px\",\n      // translation point  x\n      translateY: a[5] + \"px\" // translation point  y\n\n    };\n  };\n\n  return qrDecompone(values);\n}\n\nmodule.exports = getMatrix2D;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL21hdHJpeDJkLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy9tYXRyaXgyZC5qcz82NDZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuZnVuY3Rpb24gZ2V0TWF0cml4MkQod2luLCBlbGVtZW50KSB7XHJcbiAgY29uc3QgdHJhbnNmb3JtID0gd2luLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkudHJhbnNmb3JtO1xyXG5cclxuICBpZiAodHJhbnNmb3JtID09PSBcIlwiIHx8IHRyYW5zZm9ybSA9PT0gXCJub25lXCIpIHtcclxuICAgIHJldHVybiB7fTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHZhbHVlcyA9IHRyYW5zZm9ybVxyXG4gICAgLnNwbGl0KFwiKFwiKVsxXVxyXG4gICAgLnNwbGl0KFwiKVwiKVswXVxyXG4gICAgLnNwbGl0KFwiLFwiKTtcclxuXHJcbiAgY29uc3QgcXJEZWNvbXBvbmUgPSBmdW5jdGlvbiBxckRlY29tcG9uZShhKSB7XHJcbiAgICBjb25zdCBhbmdsZSA9IE1hdGguYXRhbjIoYVsxXSwgYVswXSksXHJcbiAgICAgIGRlbm9tID0gTWF0aC5wb3coYVswXSwgMikgKyBNYXRoLnBvdyhhWzFdLCAyKSxcclxuICAgICAgZGVub20yID0gTWF0aC5wb3coYVsyXSwgMikgKyBNYXRoLnBvdyhhWzNdLCAyKSxcclxuICAgICAgc2NhbGVYID0gTWF0aC5zcXJ0KGRlbm9tKSxcclxuICAgICAgc2NhbGVZID0gKGFbMF0gKiBhWzNdIC0gYVsyXSAqIGFbMV0pIC8gc2NhbGVYLFxyXG4gICAgICBza2V3WCA9IE1hdGguYXRhbjIoYVswXSAqIGFbMl0gKyBhWzFdICogYVszXSwgZGVub20pLFxyXG4gICAgICBza2V3WSA9IE1hdGguYXRhbjIoYVsxXSAqIGFbM10gKyBhWzBdICogYVsyXSwgZGVub20yKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJvdGF0ZTogYW5nbGUgLyAoTWF0aC5QSSAvIDE4MCkgKyBcImRlZ1wiLFxyXG4gICAgICAvLyB0aGlzIGlzIHJvdGF0aW9uIGFuZ2xlIGluIGRlZ3JlZXNcclxuICAgICAgc2NhbGVYOiBzY2FsZVgsXHJcbiAgICAgIC8vIHNjYWxlWCBmYWN0b3JcclxuICAgICAgc2NhbGVZOiBzY2FsZVksXHJcbiAgICAgIC8vIHNjYWxlWSBmYWN0b3JcclxuICAgICAgc2tld1g6IChkZW5vbSA9PT0gMSA/IHNrZXdYIC8gKE1hdGguUEkgLyAxODApIDogMCkgKyBcImRlZ1wiLFxyXG4gICAgICAvLyBza2V3WCBhbmdsZSBkZWdyZWVzXHJcbiAgICAgIHNrZXdZOiAoZGVub20yID09PSAxID8gc2tld1kgLyAoTWF0aC5QSSAvIDE4MCkgOiAwKSArIFwiZGVnXCIsXHJcbiAgICAgIC8vIHNrZXdZIGFuZ2xlIGRlZ3JlZXNcclxuICAgICAgdHJhbnNsYXRlWDogYVs0XSArIFwicHhcIixcclxuICAgICAgLy8gdHJhbnNsYXRpb24gcG9pbnQgIHhcclxuICAgICAgdHJhbnNsYXRlWTogYVs1XSArIFwicHhcIiAvLyB0cmFuc2xhdGlvbiBwb2ludCAgeVxyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gcXJEZWNvbXBvbmUodmFsdWVzKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXRyaXgyRDtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWRBO0FBZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../src/matrix2d.js\n");

/***/ }),

/***/ "../src/validation.js":
/*!****************************!*\
  !*** ../src/validation.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var nu = [\"cm\", \"mm\", \"in\", \"px\", \"pt\", \"pc\", \"em\", \"ex\", \"ch\", \"rem\", \"vw\", \"vh\", \"vmin\", \"vmax\", \"%\"];\nvar ru = [\"deg\", \"rad\", \"grad\", \"turn\"];\nvar _MEASUREMENT = \"measurement\";\nvar _COLOR = \"color\";\nmodule.exports = {\n  animatedAttrs: {\n    type: \"object\",\n    props: {\n      background: {\n        optional: true,\n        type: _COLOR\n      },\n      backgroundColor: {\n        optional: true,\n        type: _COLOR\n      },\n      backgroundPosition: {\n        optional: true,\n        type: \"string\"\n      },\n      backgroundSize: {\n        optional: true,\n        type: \"string\"\n      },\n      border: {\n        optional: true,\n        type: \"string\"\n      },\n      borderBottom: {\n        optional: true,\n        type: \"string\"\n      },\n      borderBottomColor: {\n        optional: true,\n        type: _COLOR\n      },\n      borderBottomLeftRadius: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      borderBottomRightRadius: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      borderBottomWidth: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      borderColor: {\n        optional: true,\n        type: _COLOR\n      },\n      borderEndEndRadius: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      borderEndStartRadius: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      borderImageOutset: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu,\n        min: 0\n      },\n      borderImageSlice: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu,\n        min: 0\n      },\n      borderImageWidth: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu,\n        min: 0\n      },\n      borderLeft: {\n        optional: true,\n        type: \"string\"\n      },\n      borderLeftColor: {\n        optional: true,\n        type: _COLOR\n      },\n      borderLeftWidth: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      borderRadius: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      borderRight: {\n        optional: true,\n        type: \"string\"\n      },\n      borderRightColor: {\n        optional: true,\n        type: _COLOR\n      },\n      borderRightWidth: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      borderStartEndRadius: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      borderStartStartRadius: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      borderTop: {\n        optional: true,\n        type: \"string\"\n      },\n      borderTopColor: {\n        optional: true,\n        type: _COLOR\n      },\n      borderTopLeftRadius: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      borderTopRightRadius: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      borderTopWidth: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      borderWidth: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      bottom: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      boxShadow: {\n        optional: true,\n        type: \"string\"\n      },\n      caretColor: {\n        optional: true,\n        type: _COLOR\n      },\n      color: {\n        optional: true,\n        type: _COLOR\n      },\n      columnCount: {\n        optional: true,\n        type: \"number\",\n        min: 0,\n        integer: true\n      },\n      columnGap: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      columnRule: {\n        optional: true,\n        type: \"string\"\n      },\n      columnRuleColor: {\n        optional: true,\n        type: _COLOR\n      },\n      columnRuleWidth: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      columns: {\n        optional: true,\n        type: \"number\",\n        min: 0,\n        integer: true\n      },\n      columnWidth: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      flex: {\n        optional: true,\n        type: \"number\",\n        min: 0,\n        integer: true\n      },\n      flexBasis: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      flexGrow: {\n        optional: true,\n        type: \"number\",\n        min: 0,\n        integer: true\n      },\n      flexShrink: {\n        optional: true,\n        type: \"number\",\n        min: 0,\n        integer: true\n      },\n      font: {\n        optional: true,\n        type: \"string\"\n      },\n      fontSize: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      fontSizeAdjust: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu,\n        min: 0\n      },\n      fontStretch: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: [\"%\"]\n      },\n      fontWeight: {\n        optional: true,\n        type: \"string\"\n      },\n      gap: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      gridColumnGap: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      gridGap: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      gridRowGap: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      gridTemplateColumns: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      gridTemplateRows: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      height: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu,\n        min: 0\n      },\n      inset: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu,\n        min: 0\n      },\n      insetBlock: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      insetBlockEnd: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      insetBlockStart: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      insetInline: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      insetInlineEnd: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      insetInlineStart: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      left: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      letterSpacing: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      lineClamp: {\n        optional: true,\n        type: \"number\",\n        min: 0,\n        integer: true\n      },\n      lineHeight: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu,\n        min: 0\n      },\n      margin: {\n        optional: true,\n        type: \"string\"\n      },\n      marginBottom: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      marginLeft: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      marginRight: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      marginTop: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      maskBorder: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu,\n        min: 0\n      },\n      maskPosition: {\n        optional: true,\n        type: \"string\"\n      },\n      maskSize: {\n        optional: true,\n        type: \"string\"\n      },\n      maxHeight: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu,\n        min: 0\n      },\n      maxWidth: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu,\n        min: 0\n      },\n      objectPosition: {\n        optional: true,\n        type: \"string\"\n      },\n      offset: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      offsetAnchor: {\n        optional: true,\n        type: \"string\"\n      },\n      offsetDistance: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      offsetPath: {\n        optional: true,\n        type: \"string\"\n      },\n      offsetPosition: {\n        optional: true,\n        type: \"string\"\n      },\n      offsetRotate: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: ru\n      },\n      opacity: {\n        optional: true,\n        type: \"number\",\n        min: 0,\n        max: 1\n      },\n      order: {\n        optional: true,\n        type: \"number\",\n        integer: true\n      },\n      outline: {\n        optional: true,\n        type: \"string\"\n      },\n      outlineColor: {\n        optional: true,\n        type: _COLOR\n      },\n      outlineOffset: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      outlineRadius: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      outlineRadiusBottomleft: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      outlineRadiusBottomright: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      outlineRadiusTopleft: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      outlineRadiusTopright: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      outlineWidth: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      padding: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      paddingBottom: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      paddingLeft: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      paddingRight: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      paddingTop: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      perspective: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      perspectiveOrigin: {\n        optional: true,\n        type: \"string\"\n      },\n      right: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      rotate: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: ru\n      },\n      rowGap: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scale: {\n        optional: true,\n        type: \"number\",\n        min: 0\n      },\n      scrollbarColor: {\n        optional: true,\n        type: _COLOR\n      },\n      scrollMargin: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollMarginBlock: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollMarginBlockEnd: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollMarginBlockStart: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollMarginBottom: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollMarginInline: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollMarginInlineEnd: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollMarginInlineStart: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollMarginLeft: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollMarginRight: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollMarginTop: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollPadding: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollPaddingBlock: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollPaddingBlockEnd: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollPaddingBlockStart: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollPaddingBottom: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollPaddingInline: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollPaddingInlineEnd: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollPaddingInlineStart: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollPaddingLeft: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollPaddingRight: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollPaddingTop: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      scrollSnapCoordinate: {\n        optional: true,\n        type: \"string\"\n      },\n      scrollSnapDestination: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      shapeImageThreshold: {\n        optional: true,\n        type: \"string\"\n      },\n      shapeMargin: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      shapeOutside: {\n        optional: true,\n        type: \"string\"\n      },\n      tabSize: {\n        optional: true,\n        type: \"string\"\n      },\n      textDecoration: {\n        optional: true,\n        type: \"string\"\n      },\n      textDecorationColor: {\n        optional: true,\n        type: _COLOR\n      },\n      textDecorationThickness: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      textEmphasis: {\n        optional: true,\n        type: \"string\"\n      },\n      textEmphasisColor: {\n        optional: true,\n        type: _COLOR\n      },\n      textFillColor: {\n        optional: true,\n        type: _COLOR\n      },\n      textIndent: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      textShadow: {\n        optional: true,\n        type: \"string\"\n      },\n      textStroke: {\n        optional: true,\n        type: \"string\"\n      },\n      textStrokeColor: {\n        optional: true,\n        type: _COLOR\n      },\n      textUnderlineOffset: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      top: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      transform: {\n        optional: true,\n        type: \"object\",\n        props: {\n          translateX: {\n            type: _MEASUREMENT,\n            units: nu,\n            optional: true\n          },\n          translateY: {\n            type: _MEASUREMENT,\n            units: nu,\n            optional: true\n          },\n          translateZ: {\n            type: _MEASUREMENT,\n            units: nu,\n            optional: true\n          },\n          rotate: {\n            type: _MEASUREMENT,\n            units: ru,\n            optional: true\n          },\n          rotateX: {\n            type: _MEASUREMENT,\n            units: ru,\n            optional: true\n          },\n          rotateY: {\n            type: _MEASUREMENT,\n            units: ru,\n            optional: true\n          },\n          rotateZ: {\n            type: _MEASUREMENT,\n            units: ru,\n            optional: true\n          },\n          scale: {\n            type: \"number\",\n            min: 0,\n            optional: true\n          },\n          scaleX: {\n            type: \"number\",\n            min: 0,\n            optional: true\n          },\n          scaleY: {\n            type: \"number\",\n            min: 0,\n            optional: true\n          },\n          scaleZ: {\n            type: \"number\",\n            min: 0,\n            optional: true\n          },\n          skewX: {\n            type: _MEASUREMENT,\n            units: ru,\n            optional: true\n          },\n          skewY: {\n            type: _MEASUREMENT,\n            units: ru,\n            optional: true\n          },\n          perspective: {\n            type: _MEASUREMENT,\n            units: nu,\n            optional: true\n          }\n        }\n      },\n      transformOrigin: {\n        optional: true,\n        type: \"string\"\n      },\n      verticalAlign: {\n        optional: true,\n        type: \"string\"\n      },\n      visibility: {\n        optional: true,\n        type: \"string\"\n      },\n      width: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      wordSpacing: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: nu\n      },\n      zIndex: {\n        optional: true,\n        type: \"number\",\n        integer: true\n      },\n      zoom: {\n        optional: true,\n        type: _MEASUREMENT,\n        units: [\"%\"],\n        min: 0\n      }\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/validation.js\n");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var MotorCortex = __webpack_require__(/*! @kissmybutton/motorcortex/ */ \"../node_modules/@kissmybutton/motorcortex/dist/motorcortex.umd.js\");\n\nvar Player = __webpack_require__(/*! @kissmybutton/motorcortex-player */ \"../node_modules/@kissmybutton/motorcortex-player/dist/Player.js\"); // const Player = require(\"../../teo-motorcortex-player/src/Player\");\n\n\nvar AnimeDefinition = __webpack_require__(/*! ../src/main */ \"../src/main.js\");\n\nvar Anime = MotorCortex.loadPlugin(AnimeDefinition);\nvar css = \"\\n\\n.wrapper {\\n    background-color: #f7f7f7;\\n    height:100%;\\n    width:100%;\\n    margin:0px;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n  }\\n  .container {\\n    \\n    width: 100%;\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    align-items: center;\\n    \\n    overflow: hidden;\\n    color: #252056;\\n    font-family: 'Montserrat', sans-serif;\\n  }\\n  .title {\\n    font-size: 50px;\\n    font-weight: bold;\\n  }\\n  .subTitle {\\n    font-size: 30px;\\n  }\\n  .text{\\n    font-size: 24px;\\n    font-weight: 100;\\n  }\\n  .boxWidth,.boxColor,.boxRotate,.boxMove,.boxBorder {\\n    background: #252056;\\n    width: 250px;\\n    height: 30px;\\n    position: relative;\\n    margin-left: 30px\\n  }\\n  .boxBorder{\\n    width: 30px;\\n    border-radius: 0%;\\n  }\\n  .boxMove{\\n    left:0;\\n    width: 30px;\\n  }\\n\\n  .boxWidth{\\n    width: 30px;\\n  }\\n\\n  .boxColor{\\n    background: rgb(37, 32, 86);\\n  }\\n\\n  .boxRotate{\\n    width:30px;\\n    transform: rotate(0deg);\\n  }\\n\\n  .demo{\\n    margin-top: 5%;\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    align-items: center;\\n    width: 60%;\\n    position: relative;\\n  }\\n  .demoWidth,.demoColor,.demoRotate,.demoMove,.demoBorder{\\n    display: flex;\\n    position: relative;\\n    width: 100%;\\n    justify-content: start;\\n  }\\n  .cls-1{\\n    stroke-dasharray: 6000;\\n    stroke-dashoffset: 6000;\\n  }\\n\";\nvar html = \"\\n<div class=\\\"wrapper\\\">\\n<div class=\\\"container\\\">\\n  <div class=\\\"title\\\">MotorCortex</div>\\n  <div class=\\\"subTitle\\\">Anime plugin</div>\\n  <div class=\\\"text\\\">Demo:</div>\\n  <div class=\\\"demo\\\">\\n    <div class=\\\"demoWidth\\\">\\n      <div class=\\\"text\\\">width :</div>\\n      <div class=\\\"boxWidth\\\"></div>\\n    </div>\\n    <div class=\\\"demoColor\\\">\\n      <div class=\\\"text\\\">background color :</div>\\n      <div class=\\\"boxColor\\\"></div>\\n    </div>\\n    <div class=\\\"demoRotate\\\">\\n      <div class=\\\"text\\\">Rotate :</div>\\n      <div class=\\\"boxRotate\\\"></div>\\n    </div>\\n    <div class=\\\"demoMove\\\">\\n      <div class=\\\"text\\\">Move with easings:</div>\\n      <div class=\\\"boxMove\\\"> </div>\\n    </div>\\n    <div class=\\\"demoBorder\\\">\\n      <div class=\\\"text\\\">Border :</div>\\n      <div class=\\\"boxBorder\\\"> </div>\\n    </div>\\n  </div>\\n \\n  <div class=\\\"subTitle svgText\\\">svg </div>\\n  <div class=\\\"svgBorder\\\"> <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"300px\\\" viewBox=\\\"0 0 495 464.3\\\"><defs><style>.cls-1{fill:none;stroke:#252056;stroke-miterlimit:10;stroke-width:3px;}.cls-2{fill:none;}</style></defs><title>mc2</title><g id=\\\"Layer_1\\\" data-name=\\\"Layer 1\\\"><path class=\\\"cls-1\\\" d=\\\"M86,368.6V128.8L195.3,253.4,86,368.6ZM496,18.1H419.8L246.4,197.3,86.3,18.1H4V479.3H80.5L299,250.1l119.6-125V370.5l-71.5-74.4a3.9,3.9,0,0,0-5.4-.1l-.2.2L293.2,348,418.6,479.3H496Z\\\" transform=\\\"translate(-2.5 -16.6)\\\"/></g><g id=\\\"Layer_2\\\" data-name=\\\"Layer 2\\\"><path class=\\\"cls-2\\\" d=\\\"M86,368.6V128.8L195.3,253.4,86,368.6ZM496,18.1H419.8L246.4,197.3,86.3,18.1H4V479.3H80.5L299,250.1l119.6-125V370.5l-71.5-74.4a3.9,3.9,0,0,0-5.4-.1l-.2.2L293.2,348,418.6,479.3H496Z\\\" transform=\\\"translate(-2.5 -16.6)\\\"/></g></svg> </div>\\n\\n</div>\\n</div>\";\nvar host = document.getElementById(\"clip\");\nvar containerParams = {\n  width: \"612px\",\n  height: \"671px\"\n};\nvar clip = new MotorCortex.Clip({\n  css: css,\n  html: html,\n  host: host,\n  fonts: [{\n    type: \"google-font\",\n    src: \"https://fonts.googleapis.com/css?family=Montserrat:100,300,400,700,900&display=swap\"\n  }],\n  containerParams: containerParams\n});\nvar boxWidth = new Anime.Anime({\n  animatedAttrs: {\n    width: \"250px\"\n  }\n}, {\n  duration: 1700,\n  selector: \".boxWidth\",\n  easing: \"easeOutQuad\"\n});\nvar boxColor = new Anime.Anime({\n  animatedAttrs: {\n    background: \"rgb(255, 0, 85)\"\n  },\n  initialValues: {\n    background: \"rgb(37, 32, 86)\"\n  }\n}, {\n  duration: 1700,\n  selector: \".boxColor\",\n  easing: \"easeOutQuad\"\n});\nvar boxRotate = new Anime.Anime({\n  animatedAttrs: {\n    transform: {\n      rotate: \"360deg\"\n    }\n  },\n  initialValues: {\n    transform: {\n      rotate: \"0deg\"\n    }\n  }\n}, {\n  duration: 1700,\n  selector: \".boxRotate\",\n  easing: \"easeOutQuad\"\n});\nvar boxMove = new Anime.Anime({\n  animatedAttrs: {\n    left: \"220px\"\n  },\n  initialValues: {\n    left: \"0px\"\n  }\n}, {\n  duration: 1700,\n  selector: \".boxMove\",\n  easing: \"easeOutBounce\"\n});\nvar boxBorder = new Anime.Anime({\n  animatedAttrs: {\n    borderRadius: \"50%\"\n  },\n  initialValues: {\n    borderRadius: \"0%\"\n  }\n}, {\n  duration: 1700,\n  selector: \".boxBorder\"\n});\nvar opacity = new Anime.Anime({\n  animatedAttrs: {\n    opacity: 1\n  },\n  initialValues: {\n    opacity: 0\n  }\n}, {\n  duration: 1000,\n  selector: \".svgText\"\n});\nvar svg = new Anime.Anime({\n  animatedAttrs: {\n    strokeDashoffset: 0\n  },\n  initialValues: {\n    strokeDashoffset: 6000\n  }\n}, {\n  duration: 3000,\n  selector: \".cls-1\"\n}); // const boxWidthBack = new Anime.Anime(\n//   {\n//     animatedAttrs: {\n//       // width: \"30px\",\n//       opacity: 0,\n//       // height: 30\n//     },\n//     initialValues: {\n//       // width: \"250px\"\n//     },\n//   },\n//   {\n//     duration: 1000,\n//     delay:3000,\n//     hiatus:4000,\n//     repeats:3,\n//     selector: \".boxWidth\",\n//     easing: \"easeOutQuad\"\n//   }\n// );\n\nclip.addIncident(boxWidth, 0);\nclip.addIncident(boxColor, 1700);\nclip.addIncident(boxRotate, 3400);\nclip.addIncident(boxMove, 5100);\nclip.addIncident(boxBorder, 6800);\nclip.addIncident(opacity, 8500);\nclip.addIncident(svg, 9500); // clip.addIncident(boxWidthBack, 0); //12500\n\nnew Player({\n  clip: clip,\n  theme: \"mc-blue\",\n  preview: false,\n  pointerEvents: false\n});\nwindow.myclip = clip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./index.js\n");

/***/ })

/******/ });